@{
    ViewData["Title"] = "Product Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="product-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Product Management</h1>
        <button style="background-color: #6A5ACD; color: white;" class="btn" id="add-product-btn">
            <i class="fas fa-plus"></i> Add New Product
        </button>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="product-table">
            <thead class="table-light">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Category</th>
                    <th>EXP Date</th>
                    <th width="20%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #6A5ACD;
        border-color: #6A5ACD;
    }

    .page-link {
        color: #6A5ACD;
    }

        .page-link:hover {
            color: #5a4abd;
        }

    .form-label {
        font-weight: 500;
        color: #6A5ACD;
    }

    .modal-overlay {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    .modal-content {
        animation: slideDown 0.3s ease-in-out;
    }

    @@keyframes slideDown {
        from

    {
        transform: translateY(-50px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .close-btn:hover {
        color: #6A5ACD !important;
    }

    .modal-footer .btn {
        padding: 6px 12px;
        border-radius: 4px;
        transition: all 0.3s;
    }

        .modal-footer .btn:hover {
            opacity: 0.9;
        }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 250px;
    }

        .form-group label {
            margin-bottom: 5px;
            display: block;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
        }

    .image-container {
        width: 200px;
        height: 200px;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        margin-top: 10px;
    }

        .image-container img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
</style>

<script>
    // Danh sách category mẫu
    const categories = [
        { id: 1, name: "Fruits" },
        { id: 2, name: "Vegetables" },
        { id: 3, name: "Dairy Products" },
        { id: 4, name: "Beverages" }
    ];

    // Dữ liệu product mẫu (30 sản phẩm)
    const sampleProducts = [
        { id: 1, name: "Apple", description: "Fresh red apple", price: 2.5, stock: 100, categoryId: 1, mfgDate: "2025-01-01", expDate: "2025-06-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.5 },
        { id: 2, name: "Milk", description: "Whole milk", price: 3.0, stock: 50, categoryId: 3, mfgDate: "2025-03-01", expDate: "2025-04-15", imageUrl: "https://via.placeholder.com/150", averageStar: 4.0 },
        { id: 3, name: "Orange", description: "Juicy orange", price: 1.8, stock: 80, categoryId: 1, mfgDate: "2025-02-01", expDate: "2025-07-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.2 },
        { id: 4, name: "Carrot", description: "Organic carrot", price: 1.2, stock: 120, categoryId: 2, mfgDate: "2025-02-15", expDate: "2025-08-15", imageUrl: "https://via.placeholder.com/150", averageStar: 3.8 },
        { id: 5, name: "Cheese", description: "Cheddar cheese", price: 5.0, stock: 30, categoryId: 3, mfgDate: "2025-01-10", expDate: "2025-12-10", imageUrl: "https://via.placeholder.com/150", averageStar: 4.7 },
        { id: 6, name: "Cola", description: "Carbonated drink", price: 1.5, stock: 200, categoryId: 4, mfgDate: "2025-03-01", expDate: "2026-03-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.0 },
        { id: 7, name: "Banana", description: "Ripe banana", price: 2.0, stock: 90, categoryId: 1, mfgDate: "2025-02-20", expDate: "2025-06-20", imageUrl: "https://via.placeholder.com/150", averageStar: 4.3 },
        { id: 8, name: "Broccoli", description: "Fresh broccoli", price: 2.2, stock: 60, categoryId: 2, mfgDate: "2025-03-05", expDate: "2025-09-05", imageUrl: "https://via.placeholder.com/150", averageStar: 3.9 },
        { id: 9, name: "Yogurt", description: "Greek yogurt", price: 2.8, stock: 40, categoryId: 3, mfgDate: "2025-03-10", expDate: "2025-04-10", imageUrl: "https://via.placeholder.com/150", averageStar: 4.1 },
        { id: 10, name: "Green Tea", description: "Bottled green tea", price: 2.0, stock: 150, categoryId: 4, mfgDate: "2025-02-01", expDate: "2026-02-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.4 },
        { id: 11, name: "Grape", description: "Seedless grape", price: 3.5, stock: 70, categoryId: 1, mfgDate: "2025-01-15", expDate: "2025-06-15", imageUrl: "https://via.placeholder.com/150", averageStar: 4.6 },
        { id: 12, name: "Tomato", description: "Fresh tomato", price: 1.5, stock: 110, categoryId: 2, mfgDate: "2025-03-01", expDate: "2025-09-01", imageUrl: "https://via.placeholder.com/150", averageStar: 3.7 },
        { id: 13, name: "Butter", description: "Salted butter", price: 4.0, stock: 25, categoryId: 3, mfgDate: "2025-02-01", expDate: "2025-11-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.5 },
        { id: 14, name: "Orange Juice", description: "Fresh orange juice", price: 3.2, stock: 100, categoryId: 4, mfgDate: "2025-03-15", expDate: "2025-06-15", imageUrl: "https://via.placeholder.com/150", averageStar: 4.3 },
        { id: 15, name: "Mango", description: "Sweet mango", price: 4.0, stock: 50, categoryId: 1, mfgDate: "2025-02-10", expDate: "2025-07-10", imageUrl: "https://via.placeholder.com/150", averageStar: 4.8 },
        { id: 16, name: "Spinach", description: "Organic spinach", price: 2.0, stock: 80, categoryId: 2, mfgDate: "2025-03-01", expDate: "2025-09-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.0 },
        { id: 17, name: "Cream", description: "Heavy cream", price: 3.5, stock: 35, categoryId: 3, mfgDate: "2025-03-05", expDate: "2025-05-05", imageUrl: "https://via.placeholder.com/150", averageStar: 4.2 },
        { id: 18, name: "Coffee", description: "Instant coffee", price: 5.0, stock: 60, categoryId: 4, mfgDate: "2025-01-01", expDate: "2026-01-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.5 },
        { id: 19, name: "Pineapple", description: "Tropical pineapple", price: 3.0, stock: 40, categoryId: 1, mfgDate: "2025-02-15", expDate: "2025-07-15", imageUrl: "https://via.placeholder.com/150", averageStar: 4.4 },
        { id: 20, name: "Cucumber", description: "Fresh cucumber", price: 1.0, stock: 130, categoryId: 2, mfgDate: "2025-03-10", expDate: "2025-09-10", imageUrl: "https://via.placeholder.com/150", averageStar: 3.6 },
        { id: 21, name: "Ice Cream", description: "Vanilla ice cream", price: 4.5, stock: 20, categoryId: 3, mfgDate: "2025-03-01", expDate: "2025-09-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.7 },
        { id: 22, name: "Lemonade", description: "Refreshing lemonade", price: 2.5, stock: 90, categoryId: 4, mfgDate: "2025-03-01", expDate: "2025-09-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.1 },
        { id: 23, name: "Strawberry", description: "Fresh strawberry", price: 4.0, stock: 60, categoryId: 1, mfgDate: "2025-02-01", expDate: "2025-06-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.6 },
        { id: 24, name: "Potato", description: "Organic potato", price: 1.3, stock: 150, categoryId: 2, mfgDate: "2025-03-15", expDate: "2025-12-15", imageUrl: "https://via.placeholder.com/150", averageStar: 3.8 },
        { id: 25, name: "Milkshake", description: "Chocolate milkshake", price: 3.8, stock: 30, categoryId: 3, mfgDate: "2025-03-10", expDate: "2025-04-10", imageUrl: "https://via.placeholder.com/150", averageStar: 4.3 },
        { id: 26, name: "Soda", description: "Lemon soda", price: 1.8, stock: 180, categoryId: 4, mfgDate: "2025-03-01", expDate: "2026-03-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.0 },
        { id: 27, name: "Watermelon", description: "Sweet watermelon", price: 3.5, stock: 50, categoryId: 1, mfgDate: "2025-02-20", expDate: "2025-07-20", imageUrl: "https://via.placeholder.com/150", averageStar: 4.5 },
        { id: 28, name: "Onion", description: "Red onion", price: 1.1, stock: 140, categoryId: 2, mfgDate: "2025-03-01", expDate: "2025-12-01", imageUrl: "https://via.placeholder.com/150", averageStar: 3.7 },
        { id: 29, name: "Cottage Cheese", description: "Low-fat cottage cheese", price: 3.2, stock: 45, categoryId: 3, mfgDate: "2025-03-05", expDate: "2025-05-05", imageUrl: "https://via.placeholder.com/150", averageStar: 4.1 },
        { id: 30, name: "Sparkling Water", description: "Flavored sparkling water", price: 2.0, stock: 110, categoryId: 4, mfgDate: "2025-03-01", expDate: "2026-03-01", imageUrl: "https://via.placeholder.com/150", averageStar: 4.2 }
    ];

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 10;

    // Render table data
    function renderProductTable(data, page = 1) {
        const tbody = document.querySelector('#product-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        paginatedData.forEach(product => {
            const category = categories.find(c => c.id === product.categoryId);
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${product.id}</td>
                <td>${product.name}</td>
                <td>$${product.price.toFixed(2)}</td>
                <td>${category ? category.name : 'N/A'}</td>
                <td>${product.expDate}</td>
                <td>
                    <button class="btn btn-sm btn-link text-dark me-2" onclick="viewProduct(${product.id})">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-link text-danger" onclick="deleteProduct(${product.id})">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Render pagination
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        for (let i = 1; i <= totalPages; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(sampleProducts.length / itemsPerPage)) return;
        currentPage = page;
        renderProductTable(sampleProducts, page);
    }

    // Generate category dropdown
    function getCategoryOptions(selectedId = null) {
        return categories.map(c =>
            `<option value="${c.id}" ${c.id === selectedId ? 'selected' : ''}>${c.name}</option>`
        ).join('');
    }

    // Show notification
    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.style.cssText = `position: fixed; bottom: 20px; right: 20px; padding: 12px 24px; border-radius: 4px; color: white; background-color: ${type === 'success' ? '#28a745' : '#dc3545'}; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1100; transition: all 0.3s ease; display: flex; align-items: center; gap: 10px;`;
        const icon = document.createElement('i');
        icon.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
        notification.appendChild(icon);
        notification.appendChild(document.createTextNode(message));
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => document.body.removeChild(notification), 300);
        }, 3000);
    }

    // View/Edit product
    function viewProduct(id) {
        const product = sampleProducts.find(p => p.id === id);
        if (!product) return;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 800px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #6A5ACD;">Product Details</h3>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">ID</label>
                        <input type="text" class="form-control" id="product-id" value="${product.id}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="product-name" value="${product.name}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" id="product-price" value="${product.price}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Stock</label>
                        <input type="number" class="form-control" id="product-stock" value="${product.stock}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <select class="form-control" id="product-category" disabled>
                            ${getCategoryOptions(product.categoryId)}
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">MFG Date</label>
                        <input type="date" class="form-control" id="product-mfg" value="${product.mfgDate}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">EXP Date</label>
                        <input type="date" class="form-control" id="product-exp" value="${product.expDate}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Average Star</label>
                        <input type="number" class="form-control" id="product-star" value="${product.averageStar}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="product-description" disabled>${product.description}</textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Image</label>
                        <input type="file" class="form-control" id="product-image" accept="image/*" disabled style="display: none;">
                        <div class="image-container">
                            <img src="${product.imageUrl}" id="product-image-preview">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 10px;">
                <button type="button" class="btn btn-edit" style="background-color: #6A5ACD; color: white;">Edit</button>
                <button type="button" class="btn btn-save" style="background-color: #28a745; color: white; display: none;">Save</button>
                <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; display: none;">Cancel</button>
                <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white;">Close</button>
            </div>
        `;

        const inputs = {
            name: modalContent.querySelector('#product-name'),
            description: modalContent.querySelector('#product-description'),
            price: modalContent.querySelector('#product-price'),
            stock: modalContent.querySelector('#product-stock'),
            category: modalContent.querySelector('#product-category'),
            mfg: modalContent.querySelector('#product-mfg'),
            exp: modalContent.querySelector('#product-exp'),
            image: modalContent.querySelector('#product-image'),
            imagePreview: modalContent.querySelector('#product-image-preview'),
            star: modalContent.querySelector('#product-star')
        };

        const buttons = {
            edit: modalContent.querySelector('.btn-edit'),
            save: modalContent.querySelector('.btn-save'),
            cancel: modalContent.querySelector('.btn-cancel'),
            close: modalContent.querySelector('.btn-close-modal')
        };

        const enterEditMode = () => {
            Object.values(inputs).forEach(input => {
                if (input.tagName !== 'IMG') input.disabled = false;
                if (input.id === 'product-image') input.style.display = 'block';
            });
            buttons.edit.style.display = 'none';
            buttons.save.style.display = 'block';
            buttons.cancel.style.display = 'block';
            buttons.close.style.display = 'none';
        };

        const exitEditMode = () => {
            Object.values(inputs).forEach(input => {
                if (input.tagName !== 'IMG') input.disabled = true;
                if (input.id === 'product-image') input.style.display = 'none';
            });
            inputs.name.value = product.name;
            inputs.description.value = product.description;
            inputs.price.value = product.price;
            inputs.stock.value = product.stock;
            inputs.category.value = product.categoryId;
            inputs.mfg.value = product.mfgDate;
            inputs.exp.value = product.expDate;
            inputs.imagePreview.src = product.imageUrl;
            inputs.star.value = product.averageStar;
            buttons.edit.style.display = 'block';
            buttons.save.style.display = 'none';
            buttons.cancel.style.display = 'none';
            buttons.close.style.display = 'block';
        };

        const saveChanges = () => {
            if (!inputs.name.value.trim()) {
                showNotification('Product name is required!', 'error');
                return;
            }
            if (inputs.price.value <= 0) {
                showNotification('Price must be greater than 0!', 'error');
                return;
            }
            const index = sampleProducts.findIndex(p => p.id === product.id);
            sampleProducts[index] = {
                ...product,
                name: inputs.name.value.trim(),
                description: inputs.description.value.trim(),
                price: parseFloat(inputs.price.value),
                stock: parseInt(inputs.stock.value),
                categoryId: parseInt(inputs.category.value),
                mfgDate: inputs.mfg.value,
                expDate: inputs.exp.value,
                imageUrl: inputs.imagePreview.src,
                averageStar: parseFloat(inputs.star.value)
            };
            renderProductTable(sampleProducts, currentPage);
            showNotification('Product updated successfully!');
            exitEditMode();
        };

        inputs.image.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => inputs.imagePreview.src = reader.result;
                reader.readAsDataURL(file);
            }
        });

        buttons.close.addEventListener('click', () => document.body.removeChild(modal));
        buttons.edit.addEventListener('click', enterEditMode);
        buttons.save.addEventListener('click', saveChanges);
        buttons.cancel.addEventListener('click', exitEditMode);
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (!inputs.name.disabled) exitEditMode();
                else document.body.removeChild(modal);
            }
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Delete product
    function deleteProduct(id) {
        const confirmModal = document.createElement('div');
        confirmModal.className = 'modal-overlay';
        confirmModal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';
        confirmModal.innerHTML = `
            <div class="modal-content" style="background-color: white; padding: 25px; border-radius: 8px; width: 400px; max-width: 90%;">
                <div class="modal-header">
                    <h3 class="modal-title" style="color: #6A5ACD;">Confirm Deletion</h3>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this product?</p>
                </div>
                <div class="modal-footer" style="display: flex; gap: 10px;">
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
                    <button type="button" class="btn btn-confirm" style="background-color: #dc3545; color: white;">Delete</button>
                </div>
            </div>
        `;

        const cancelBtn = confirmModal.querySelector('.btn-cancel');
        const confirmBtn = confirmModal.querySelector('.btn-confirm');

        cancelBtn.addEventListener('click', () => document.body.removeChild(confirmModal));
        confirmBtn.addEventListener('click', () => {
            const index = sampleProducts.findIndex(p => p.id === id);
            if (index !== -1) {
                sampleProducts.splice(index, 1);
                renderProductTable(sampleProducts, currentPage);
                showNotification('Product deleted successfully!', 'success');
            }
            document.body.removeChild(confirmModal);
        });

        document.body.appendChild(confirmModal);
    }

    // Add new product
    function addNewProduct() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 800px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header">
                <h3 class="modal-title" style="color: #6A5ACD;">Add New Product</h3>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="new-product-name" placeholder="Enter product name">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" id="new-product-price" placeholder="Enter price" min="0">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Stock</label>
                        <input type="number" class="form-control" id="new-product-stock" placeholder="Enter stock" min="0">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <select class="form-control" id="new-product-category">
                            <option value="">Select category</option>
                            ${getCategoryOptions()}
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">MFG Date</label>
                        <input type="date" class="form-control" id="new-product-mfg">
                    </div>
                    <div class="form-group">
                        <label class="form-label">EXP Date</label>
                        <input type="date" class="form-control" id="new-product-exp">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="new-product-description" placeholder="Enter description"></textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Image</label>
                        <input type="file" class="form-control" id="new-product-image" accept="image/*">
                        <div class="image-container">
                            <img src="" id="new-product-image-preview" style="display: none;">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 10px;">
                <button type="button" class="btn btn-add" style="background-color: #6A5ACD; color: white;">Add</button>
                <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
            </div>
        `;

        const inputs = {
            name: modalContent.querySelector('#new-product-name'),
            description: modalContent.querySelector('#new-product-description'),
            price: modalContent.querySelector('#new-product-price'),
            stock: modalContent.querySelector('#new-product-stock'),
            category: modalContent.querySelector('#new-product-category'),
            mfg: modalContent.querySelector('#new-product-mfg'),
            exp: modalContent.querySelector('#new-product-exp'),
            image: modalContent.querySelector('#new-product-image'),
            imagePreview: modalContent.querySelector('#new-product-image-preview')
        };

        inputs.image.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    inputs.imagePreview.src = reader.result;
                    inputs.imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });

        modalContent.querySelector('.btn-add').addEventListener('click', () => {
            if (!inputs.name.value.trim()) {
                showNotification('Product name is required!', 'error');
                return;
            }
            if (!inputs.price.value || inputs.price.value <= 0) {
                showNotification('Valid price is required!', 'error');
                return;
            }
            if (!inputs.category.value) {
                showNotification('Category is required!', 'error');
                return;
            }

            const newId = sampleProducts.length > 0 ? Math.max(...sampleProducts.map(p => p.id)) + 1 : 1;
            const newProduct = {
                id: newId,
                name: inputs.name.value.trim(),
                description: inputs.description.value.trim(),
                price: parseFloat(inputs.price.value),
                stock: parseInt(inputs.stock.value) || 0,
                categoryId: parseInt(inputs.category.value),
                mfgDate: inputs.mfg.value,
                expDate: inputs.exp.value,
                imageUrl: inputs.imagePreview.src || 'https://via.placeholder.com/150',
                averageStar: 0 // Default value for new product
            };

            sampleProducts.unshift(newProduct);
            currentPage = 1;
            renderProductTable(sampleProducts, currentPage);
            showNotification('Product added successfully!', 'success');
            document.body.removeChild(modal);
        });

        modalContent.querySelector('.btn-cancel').addEventListener('click', () => document.body.removeChild(modal));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        renderProductTable(sampleProducts);
        document.getElementById('add-product-btn').addEventListener('click', addNewProduct);
    });
</script>