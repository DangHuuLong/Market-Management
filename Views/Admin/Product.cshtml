@model PBL3_HK4.Models.ProductViewModel
@{
    ViewData["Title"] = "Product Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="product-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Product Management</h1>
        <button style="background-color: #2E8B57; color: white;" class="btn" id="add-product-btn">
            <i class="fas fa-plus"></i> <span class="d-none d-sm-inline">Add New Product</span>
        </button>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" id="search-product" placeholder="Search by product name...">
                <button class="btn btn-outline-secondary" type="button" id="search-btn">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex justify-content-end">
                <select class="form-select me-2" id="category-filter" style="max-width: 200px;">
                    <option value="">All Categories</option>
                    <!-- Categories will be added dynamically -->
                </select>
                <button class="btn btn-outline-secondary" type="button" id="clear-filters">
                    <i class="fas fa-times"></i> <span class="d-none d-sm-inline">Clear Filters</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Data Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="product-table">
            <thead class="table-light">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>
                        Price
                        <div class="dropdown d-inline-block">
                            <button class="btn btn-sm text-dark dropdown-toggle p-0 ms-1" type="button" id="priceDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-sort"></i>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="priceDropdown">
                                <li><a class="dropdown-item" href="#" id="sort-price-asc">Ascending</a></li>
                                <li><a class="dropdown-item" href="#" id="sort-price-desc">Descending</a></li>
                                <li><a class="dropdown-item" href="#" id="sort-price-none">Default</a></li>
                            </ul>
                        </div>
                    </th>
                    <th class="d-none d-md-table-cell">Category</th>
                    <th class="d-none d-md-table-cell">EXP Date</th>
                    <th width="20%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be added by JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center flex-wrap">
            <!-- Pagination will be added by JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #2E8B57;
        border-color: #2E8B57;
    }

    .page-link {
        color: #2E8B57;
    }

        .page-link:hover {
            color: #1e7d45;
        }

    .form-label {
        font-weight: 500;
        color: #2E8B57;
    }

    .modal-overlay {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    .modal-content {
        animation: slideDown 0.3s ease-in-out;
    }

    @@keyframes slideDown {
        from

    {
        transform: translateY(-50px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .close-btn:hover {
        color: #2E8B57 !important;
    }

    .modal-footer .btn {
        padding: 6px 12px;
        border-radius: 4px;
        transition: all 0.3s;
    }

        .modal-footer .btn:hover {
            opacity: 0.9;
        }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 250px;
    }

        .form-group label {
            margin-bottom: 5px;
            display: block;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
        }

    .image-container {
        width: 200px;
        height: 200px;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        margin-top: 10px;
    }

        .image-container img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

    #search-product::placeholder {
        opacity: 0.7;
    }

    .dropdown-item:hover {
        background-color: #f0f7f0;
    }

    .dropdown-item.active {
        background-color: #2E8B57;
        color: white;
    }

    /* Responsive styles - Only for tablet and mobile */
    @@media (max-width: 991.98px) {
        .row.mb-4

    {
        margin-bottom: 1rem !important;
    }

    .col-md-6:first-child {
        margin-bottom: 0.5rem;
    }

    .d-flex.justify-content-end {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    #category-filter {
        flex-grow: 1;
        max-width: none;
    }

    #product-table th,
    #product-table td {
        padding: 0.5rem;
    }

    .form-row {
        gap: 10px;
        margin-bottom: 10px;
    }

    }

    @@media (max-width: 767.98px) {
        h1

    {
        font-size: 1.75rem;
    }

    .d-flex.justify-content-between.align-items-center.mb-3 {
        flex-direction: column;
        align-items: flex-start !important;
        gap: 0.5rem;
    }

    #add-product-btn {
        align-self: stretch;
    }

    .modal-content {
        width: 95% !important;
        padding: 15px !important;
        max-height: 90vh !important;
        overflow-y: auto !important;
    }

    .form-row {
        flex-direction: column;
        gap: 8px;
    }

    .form-group {
        min-width: 100%;
    }

    .image-container {
        margin: 0 auto;
    }

    .modal-footer {
        flex-direction: column;
        width: 100%;
    }

        .modal-footer .btn {
            width: 100%;
            margin-bottom: 5px;
        }

    /* Pagination for mobile */
    .pagination .page-link {
        padding: 0.375rem 0.5rem;
    }

    .pagination .page-item:not(.active):not(:first-child):not(:last-child) {
        display: none;
    }

    .pagination .page-item.active {
        display: block;
    }

    }

    @@media (max-width: 575.98px) {
        .modal-content

    {
        padding: 10px !important;
    }

    .modal-header h3 {
        font-size: 1.5rem;
    }

    .image-container {
        height: 150px;
    }

    }
</style>

<script>
    // Get categories from ViewModel
    const categories = [
    @foreach (var catalog in Model.Catalogs)
    {
        @:{ id: "@catalog.CatalogID", name: "@catalog.CatalogName" },
    }
    ];

    // Get products from ViewModel
    const allProducts = [
    @foreach (var product in Model.Products)
    {
        @:{
        @:  id: "@product.ProductID",
        @:  name: "@product.ProductName",
        @:  description: "@(product.ProductDescription?.Replace("\n", "\\n").Replace("\"", "\\\""))",
        @:  price: @product.Price,
        @:  stock: @product.StockQuantity,
        @:  categoryId: "@product.CatalogID",
        @:  mfgDate: "@product.MFGDate.ToString("yyyy-MM-dd")",
        @:  expDate: "@product.EXPDate.ToString("yyyy-MM-dd")",
        @:  imageUrl: "/product-images/@product.ProductID.ToString()",
        @:  averageStar: @product.AverageRating
        @:},
    }
    ];

    // Variables for search and filter
    let filteredProducts = [...allProducts];
    let searchTerm = '';
    let selectedCategory = '';
    let sortDirection = null;
    let currentPage = 1;
    let itemsPerPage = 10;

    // Adjust items per page based on screen size
    function adjustItemsPerPage() {
        if (window.innerWidth <= 576) {
            itemsPerPage = 5;
        } else if (window.innerWidth <= 992) {
            itemsPerPage = 8;
        } else {
            itemsPerPage = 10;
        }
        renderProductTable();
    }

    // Format price as VND
    function formatVND(amount) {
        return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
    }

    // Get category name by ID
    function getCategoryName(id) {
        const category = categories.find(c => c.id === id);
        return category ? category.name : 'N/A';
    }

    // Render product table
    function renderProductTable() {
        const tbody = document.querySelector('#product-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        // Calculate pagination
        const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredProducts.length);
        const paginatedData = filteredProducts.slice(startIndex, endIndex);

        // Check if current page is valid after items per page change
        if (currentPage > totalPages && totalPages > 0) {
            currentPage = totalPages;
            renderProductTable();
            return;
        }

        // If no products found
        if (paginatedData.length === 0) {
            const emptyRow = document.createElement('tr');
            emptyRow.innerHTML = `
                <td colspan="6" class="text-center py-4">
                    <div class="alert alert-info mb-0">
                        No products found matching your criteria. Try adjusting your filters.
                    </div>
                </td>
            `;
            tbody.appendChild(emptyRow);
        } else {
            // Display products
            paginatedData.forEach(product => {
                const category = getCategoryName(product.categoryId);
                const row = document.createElement('tr');

                // Check if mobile view
                const isMobile = window.innerWidth <= 767.98;
                if (isMobile) {
                    row.innerHTML = `
                        <td>${product.id}</td>
                        <td>
                            <div>${product.name}</div>
                            <small class="text-muted d-md-none">
                                ${category} · ${product.expDate}
                            </small>
                        </td>
                        <td>${formatVND(product.price)}</td>
                        <td>
                            <button class="btn btn-sm btn-link text-dark me-2" onclick="viewProduct('${product.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-link text-danger" onclick="deleteProduct('${product.id}')">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    `;
                } else {
                    row.innerHTML = `
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${formatVND(product.price)}</td>
                        <td class="d-none d-md-table-cell">${category}</td>
                        <td class="d-none d-md-table-cell">${product.expDate}</td>
                        <td>
                            <button class="btn btn-sm btn-link text-dark me-2" onclick="viewProduct('${product.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-link text-danger" onclick="deleteProduct('${product.id}')">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    `;
                }
                tbody.appendChild(row);
            });
        }

        // Show pagination if needed
        if (filteredProducts.length > itemsPerPage) {
            renderPagination(totalPages);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Render pagination
    function renderPagination(totalPages) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        // Determine visible pages based on screen size
        let maxVisiblePages = 5; // Desktop default
        const isMobile = window.innerWidth <= 767.98;
        const isTablet = window.innerWidth <= 991.98 && window.innerWidth > 767.98;

        if (isMobile) {
            maxVisiblePages = 1;
        } else if (isTablet) {
            maxVisiblePages = 3;
        }

        const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // First page (if not in range)
        if (startPage > 1) {
            const firstPageLi = document.createElement('li');
            firstPageLi.className = 'page-item';
            firstPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(1)">1</a>`;
            pagination.appendChild(firstPageLi);

            // Ellipsis if needed
            if (startPage > 2) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        // Last page (if not in range)
        if (endPage < totalPages) {
            // Ellipsis if needed
            if (endPage < totalPages - 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }

            const lastPageLi = document.createElement('li');
            lastPageLi.className = 'page-item';
            lastPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${totalPages})">${totalPages}</a>`;
            pagination.appendChild(lastPageLi);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(filteredProducts.length / itemsPerPage)) return;
        currentPage = page;
        renderProductTable();
    }

    // Update category dropdown based on current filtered products
    function updateCategoryDropdown() {
        const dropdown = document.getElementById('category-filter');

        // Save current selection
        const currentValue = dropdown.value;

        // Clear all existing options
        dropdown.innerHTML = '<option value="">All Categories</option>';

        // Get categories from current filtered products
        let availableCategories = categories;

        // If searching by name, only show categories from search results
        if (searchTerm && !selectedCategory) {
            const categoryIds = [...new Set(filteredProducts.map(p => p.categoryId))];
            availableCategories = categories.filter(c => categoryIds.includes(c.id));
        }

        // Add options
        availableCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            dropdown.appendChild(option);
        });

        // Restore selection if it exists in new options
        if (currentValue) {
            const exists = Array.from(dropdown.options).some(opt => opt.value === currentValue);
            if (exists) {
                dropdown.value = currentValue;
            } else {
                selectedCategory = '';
            }
        }
    }

    // Search products
    function searchProducts() {
        currentPage = 1;

        // Reset filtered products
        filteredProducts = [...allProducts];

        // Filter by name (case insensitive)
        if (searchTerm) {
            const term = searchTerm.toLowerCase();
            filteredProducts = filteredProducts.filter(product =>
                product.name.toLowerCase().includes(term)
            );
        }

        // Filter by category
        if (selectedCategory) {
            filteredProducts = filteredProducts.filter(product =>
                product.categoryId === selectedCategory
            );
        }

        // Apply sorting
        if (sortDirection === 'asc') {
            filteredProducts.sort((a, b) => a.price - b.price);
        } else if (sortDirection === 'desc') {
            filteredProducts.sort((a, b) => b.price - a.price);
        }

        // Update dropdown and display
        updateCategoryDropdown();
        renderProductTable();
    }

    // Reset all filters
    function clearFilters() {
        // Reset variables
        searchTerm = '';
        selectedCategory = '';
        sortDirection = null;
        currentPage = 1;

        // Reset UI elements
        document.getElementById('search-product').value = '';
        document.getElementById('category-filter').value = '';
        document.querySelectorAll('.dropdown-item').forEach(item => {
            item.classList.remove('active');
        });

        // Reset filtered products
        filteredProducts = [...allProducts];

        // Update dropdown and display
        updateCategoryDropdown();
        renderProductTable();
    }

    // View product details
    function viewProduct(id) {
        const product = allProducts.find(p => p.id === id);
        if (!product) return;

        // Check if mobile device
        const isMobile = window.innerWidth <= 767.98;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';

        if (isMobile) {
            modalContent.style.cssText = 'background-color: white; padding: 15px; border-radius: 8px; width: 95%; max-width: 95%; max-height: 90vh; overflow-y: auto;';
        } else {
            modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 800px; max-width: 90%;';
        }

        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #2E8B57; margin: 0;">Product Details</h3>
            </div>
            <form id="editProductForm" action="UpdateProduct" method="post">
                <div class="modal-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">ID</label>
                            <input type="text" class="form-control" id="product-id" name="id" value="${product.id}" readonly style="background-color: #f8f9fa; cursor: not-allowed;">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" id="product-name" name="productName" value="${product.name || ''}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Price (VND)</label>
                            <input type="number" class="form-control" id="product-price" name="price" value="${product.price}" disabled>
                            <small class="text-muted">Displayed as: ${formatVND(product.price)}</small>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Stock</label>
                            <input type="number" class="form-control" id="product-stock" name="stockQuantity" value="${product.stock}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select class="form-control" id="product-category" name="catalogID" disabled>
                                ${categories.map(c => `<option value="${c.id}" ${c.id === product.categoryId ? 'selected' : ''}>${c.name}</option>`).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">MFG Date</label>
                            <input type="date" class="form-control" id="product-mfg" name="mfgDate" value="${product.mfgDate}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">EXP Date</label>
                            <input type="date" class="form-control" id="product-exp" name="expDate" value="${product.expDate}" disabled>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Average Rating</label>
                            <input type="number" class="form-control" id="product-star" value="${product.averageStar}" disabled readonly>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="product-description" name="productDescription" disabled>${product.description || ''}</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Image</label>
                            <input type="file" class="form-control" id="product-image" name="imageFile" accept="image/*" disabled style="display: none;">
                            <div class="image-container">
                                <img src="${product.imageUrl}" id="product-image-preview" onerror="this.src='https://via.placeholder.com/150'">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border-top: 1px solid #dee2e6; margin-top: 20px; padding-top: 15px; display: flex; gap: 10px;">
                    <button type="button" class="btn btn-edit" style="background-color: #2E8B57; color: white;">
                        <i class="fas fa-edit me-2"></i>Edit
                    </button>
                    <button type="submit" class="btn btn-save" style="background-color: #28a745; color: white; display: none;">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; display: none;">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white;">
                        Close
                    </button>
                </div>
            </form>
        `;

        const form = modalContent.querySelector('#editProductForm');
        const inputs = {
            id: modalContent.querySelector('#product-id'),
            name: modalContent.querySelector('#product-name'),
            description: modalContent.querySelector('#product-description'),
            price: modalContent.querySelector('#product-price'),
            stock: modalContent.querySelector('#product-stock'),
            category: modalContent.querySelector('#product-category'),
            mfg: modalContent.querySelector('#product-mfg'),
            exp: modalContent.querySelector('#product-exp'),
            image: modalContent.querySelector('#product-image'),
            imagePreview: modalContent.querySelector('#product-image-preview'),
            star: modalContent.querySelector('#product-star')
        };

        const buttons = {
            edit: modalContent.querySelector('.btn-edit'),
            save: modalContent.querySelector('.btn-save'),
            cancel: modalContent.querySelector('.btn-cancel'),
            close: modalContent.querySelector('.btn-close-modal')
        };

        const enterEditMode = () => {
            Object.values(inputs).forEach(input => {
                if (input.tagName !== 'IMG' && input.id !== 'product-id' && input.id !== 'product-star') {
                    input.disabled = false;
                }
                if (input.id === 'product-image') input.style.display = 'block';
            });
            buttons.edit.style.display = 'none';
            buttons.save.style.display = 'block';
            buttons.cancel.style.display = 'block';
            buttons.close.style.display = 'none';
        };

        const exitEditMode = () => {
            Object.values(inputs).forEach(input => {
                if (input.tagName !== 'IMG') input.disabled = true;
                if (input.id === 'product-image') input.style.display = 'none';
            });
            inputs.name.value = product.name || '';
            inputs.description.value = product.description || '';
            inputs.price.value = product.price;
            inputs.stock.value = product.stock;
            inputs.category.value = product.categoryId;
            inputs.mfg.value = product.mfgDate;
            inputs.exp.value = product.expDate;
            inputs.imagePreview.src = product.imageUrl;
            buttons.edit.style.display = 'block';
            buttons.save.style.display = 'none';
            buttons.cancel.style.display = 'none';
            buttons.close.style.display = 'block';
        };

        inputs.image.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => inputs.imagePreview.src = reader.result;
                reader.readAsDataURL(file);
            }
        });

        buttons.close.addEventListener('click', () => document.body.removeChild(modal));
        buttons.edit.addEventListener('click', enterEditMode);
        buttons.cancel.addEventListener('click', exitEditMode);

        // Form submit handler
        form.addEventListener('submit', function(event) {
            if (!inputs.name.value.trim() || inputs.price.value <= 0) {
                event.preventDefault();
                return false;
            }
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (!inputs.name.disabled) exitEditMode();
                else document.body.removeChild(modal);
            }
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Delete product
    function deleteProduct(id) {
        const product = allProducts.find(p => p.id === id);
        if (!product) return;

        // Check if mobile device
        const isMobile = window.innerWidth <= 767.98;

        const confirmModal = document.createElement('div');
        confirmModal.className = 'modal-overlay';
        confirmModal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        if (isMobile) {
            confirmModal.innerHTML = `
                <div class="modal-content" style="background-color: white; padding: 15px; border-radius: 8px; width: 95%; max-width: 95%;">
                    <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 15px; padding-bottom: 10px;">
                        <h3 class="modal-title" style="color: #2E8B57; font-size: 1.5rem;">Confirm Deletion</h3>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this product?</p>
                        <p><strong>Name:</strong> ${product.name || ''}</p>

                        <form id="deleteProductForm" action="DeleteProduct" method="post">
                            <input type="hidden" name="id" value="${product.id}">
                        </form>
                    </div>
                    <div class="modal-footer" style="border-top: 1px solid #dee2e6; margin-top: 15px; padding-top: 10px; display: flex; flex-direction: column; width: 100%; gap: 5px;">
                        <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; width: 100%;">Cancel</button>
                        <button type="button" class="btn btn-confirm" style="background-color: #dc3545; color: white; width: 100%;">Delete</button>
                    </div>
                </div>
            `;
        } else {
            confirmModal.innerHTML = `
                <div class="modal-content" style="background-color: white; padding: 25px; border-radius: 8px; width: 400px; max-width: 90%;">
                    <div class="modal-header">
                        <h3 class="modal-title" style="color: #2E8B57;">Confirm Deletion</h3>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this product?</p>
                        <p><strong>Name:</strong> ${product.name || ''}</p>

                        <form id="deleteProductForm" action="DeleteProduct" method="post">
                            <input type="hidden" name="id" value="${product.id}">
                        </form>
                    </div>
                    <div class="modal-footer" style="display: flex; gap: 10px;">
                        <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
                        <button type="button" class="btn btn-confirm" style="background-color: #dc3545; color: white;">Delete</button>
                    </div>
                </div>
            `;
        }

        const deleteForm = confirmModal.querySelector('#deleteProductForm');
        const cancelBtn = confirmModal.querySelector('.btn-cancel');
        const confirmBtn = confirmModal.querySelector('.btn-confirm');

        cancelBtn.addEventListener('click', () => document.body.removeChild(confirmModal));
        confirmBtn.addEventListener('click', () => {
            // Submit form
            deleteForm.submit();

            // Update UI locally
            const index = allProducts.findIndex(p => p.id === id);
            if (index !== -1) {
                allProducts.splice(index, 1);
                searchProducts(); // Reapply current filters
            }

            document.body.removeChild(confirmModal);
        });

        confirmModal.addEventListener('click', (e) => {
            if (e.target === confirmModal) document.body.removeChild(confirmModal);
        });

        document.body.appendChild(confirmModal);
    }

    // Add new product
    function addNewProduct() {
        // Check if mobile device
        const isMobile = window.innerWidth <= 767.98;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';

        if (isMobile) {
            modalContent.style.cssText = 'background-color: white; padding: 15px; border-radius: 8px; width: 95%; max-width: 95%; max-height: 90vh; overflow-y: auto;';
        } else {
            modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 800px; max-width: 90%;';
        }

        modalContent.innerHTML = `
            <div class="modal-header">
                <h3 class="modal-title" style="color: #2E8B57; ${isMobile ? 'font-size: 1.5rem;' : ''}">Add New Product</h3>
            </div>
            <form id="addProductForm" action="CreateProduct" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Name <span style="color: red;">*</span></label>
                            <input type="text" class="form-control" id="new-product-name" name="productName" placeholder="Enter product name" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Price (VND) <span style="color: red;">*</span></label>
                            <input type="number" class="form-control" id="new-product-price" name="price" placeholder="Enter price" min="1" step="1" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Stock <span style="color: red;">*</span></label>
                            <input type="number" class="form-control" id="new-product-stock" name="stockQuantity" placeholder="Enter stock" min="0" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category <span style="color: red;">*</span></label>
                            <select class="form-control" id="new-product-category" name="catalogID" required>
                                <option value="">Select category</option>
                                ${categories.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">MFG Date <span style="color: red;">*</span></label>
                            <input type="date" class="form-control" id="new-product-mfg" name="mfgDate" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">EXP Date <span style="color: red;">*</span></label>
                            <input type="date" class="form-control" id="new-product-exp" name="expDate" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="new-product-description" name="productDescription" placeholder="Enter description"></textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Image</label>
                            <input type="file" class="form-control" id="new-product-image" name="imageFile" accept="image/*">
                            <div class="image-container">
                                <img src="" id="new-product-image-preview" style="display: none;">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="display: flex; gap: 10px; ${isMobile ? 'flex-direction: column; width: 100%;' : ''}">
                    <button type="submit" class="btn btn-add" style="background-color: #2E8B57; color: white; ${isMobile ? 'width: 100%;' : ''}">
                        <i class="fas fa-plus me-2"></i>Add
                    </button>
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; ${isMobile ? 'width: 100%;' : ''}">
                        Cancel
                    </button>
                </div>
            </form>
        `;

        const form = modalContent.querySelector('#addProductForm');
        const inputs = {
            name: modalContent.querySelector('#new-product-name'),
            description: modalContent.querySelector('#new-product-description'),
            price: modalContent.querySelector('#new-product-price'),
            stock: modalContent.querySelector('#new-product-stock'),
            category: modalContent.querySelector('#new-product-category'),
            mfg: modalContent.querySelector('#new-product-mfg'),
            exp: modalContent.querySelector('#new-product-exp'),
            image: modalContent.querySelector('#new-product-image'),
            imagePreview: modalContent.querySelector('#new-product-image-preview')
        };

        inputs.image.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    inputs.imagePreview.src = reader.result;
                    inputs.imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });

        // Form validation on submit
        form.addEventListener('submit', function(event) {
            if (!inputs.name.value.trim() || !inputs.price.value || !inputs.category.value) {
                event.preventDefault();
                return false;
            }
        });

        modalContent.querySelector('.btn-cancel').addEventListener('click', () => document.body.removeChild(modal));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
        // Set up initial UI
        adjustItemsPerPage();
        updateCategoryDropdown();
        renderProductTable();

        // Set up event listeners
        const searchInput = document.getElementById('search-product');
        const searchBtn = document.getElementById('search-btn');
        const categoryFilter = document.getElementById('category-filter');
        const clearFiltersBtn = document.getElementById('clear-filters');
        const addProductBtn = document.getElementById('add-product-btn');

        // Search by pressing Enter
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                searchTerm = this.value.trim();
                searchProducts();
            }
        });

        // Search by clicking search button
        searchBtn.addEventListener('click', function() {
            searchTerm = searchInput.value.trim();
            searchProducts();
        });

        // Filter by category
        categoryFilter.addEventListener('change', function() {
            selectedCategory = this.value;
            searchProducts();
        });

        // Clear all filters
        clearFiltersBtn.addEventListener('click', clearFilters);

        // Add new product
        addProductBtn.addEventListener('click', addNewProduct);

        // Listen for window resize to adjust responsive elements
        window.addEventListener('resize', function() {
            adjustItemsPerPage();
            renderProductTable();
        });

        // Setup price sorting
        document.getElementById('sort-price-asc').addEventListener('click', function(e) {
            e.preventDefault();
            sortDirection = 'asc';
            searchProducts();
            document.querySelectorAll('.dropdown-item').forEach(item => item.classList.remove('active'));
            this.classList.add('active');
        });

        document.getElementById('sort-price-desc').addEventListener('click', function(e) {
            e.preventDefault();
            sortDirection = 'desc';
            searchProducts();
            document.querySelectorAll('.dropdown-item').forEach(item => item.classList.remove('active'));
            this.classList.add('active');
        });

        document.getElementById('sort-price-none').addEventListener('click', function(e) {
            e.preventDefault();
            sortDirection = null;
            searchProducts();
            document.querySelectorAll('.dropdown-item').forEach(item => item.classList.remove('active'));
            this.classList.add('active');
        });
    });
</script>