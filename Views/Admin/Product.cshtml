@model PBL3_HK4.Models.ProductViewModel
@{
    ViewData["Title"] = "Product Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="product-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Product Management</h1>
        <button style="background-color: #6A5ACD; color: white;" class="btn" id="add-product-btn">
            <i class="fas fa-plus"></i> Add New Product
        </button>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="product-table">
            <thead class="table-light">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Category</th>
                    <th>EXP Date</th>
                    <th width="20%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #6A5ACD;
        border-color: #6A5ACD;
    }

    .page-link {
        color: #6A5ACD;
    }

        .page-link:hover {
            color: #5a4abd;
        }

    .form-label {
        font-weight: 500;
        color: #6A5ACD;
    }

    .modal-overlay {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .modal-content {
        animation: slideDown 0.3s ease-in-out;
    }

    @@keyframes slideDown {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .close-btn:hover {
        color: #6A5ACD !important;
    }

    .modal-footer .btn {
        padding: 6px 12px;
        border-radius: 4px;
        transition: all 0.3s;
    }

        .modal-footer .btn:hover {
            opacity: 0.9;
        }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 250px;
    }

        .form-group label {
            margin-bottom: 5px;
            display: block;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
        }

    .image-container {
        width: 200px;
        height: 200px;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        margin-top: 10px;
    }

        .image-container img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
</style>

<script>
        // Lấy danh sách category từ ViewModel
    const categories = [
    @foreach (var catalog in Model.Catalogs)
    {
        @:{ id: "@catalog.CatalogID", name: "@catalog.CatalogName" },
    }
    ];

    // Lấy danh sách sản phẩm từ ViewModel
    const products = [
    @foreach (var product in Model.Products)
    {
        @:{
        @:  id: "@product.ProductID",
        @:  name: "@product.ProductName",
        @:  description: "@(product.ProductDescription?.Replace("\n", "\\n").Replace("\"", "\\\""))",
        @:  price: @product.Price,
        @:  stock: @product.StockQuantity,
        @:  categoryId: "@product.CatalogID",
        @:  mfgDate: "@product.MFGDate.ToString("yyyy-MM-dd")",
        @:  expDate: "@product.EXPDate.ToString("yyyy-MM-dd")",
        @:  imageUrl: "/product-images/@product.ProductID.ToString()",
        @:  averageStar: @product.AverageRating
        @:},
    }
    ];

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 10;

    // Render table data
    function renderProductTable(data, page = 1) {
        const tbody = document.querySelector('#product-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        paginatedData.forEach(product => {
            const category = categories.find(c => c.id === product.categoryId);
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${product.id}</td>
                <td>${product.name}</td>
                <td>$${product.price.toFixed(2)}</td>
                <td>${category ? category.name : 'N/A'}</td>
                <td>${product.expDate}</td>
                <td>
                    <button class="btn btn-sm btn-link text-dark me-2" onclick="viewProduct('${product.id}')">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-link text-danger" onclick="deleteProduct('${product.id}')">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Render pagination
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        for (let i = 1; i <= totalPages; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(products.length / itemsPerPage)) return;
        currentPage = page;
        renderProductTable(products, page);
    }

    // Generate category dropdown
    function getCategoryOptions(selectedId = null) {
        return categories.map(c =>
            `<option value="${c.id}" ${c.id === selectedId ? 'selected' : ''}>${c.name}</option>`
        ).join('');
    }

    // View/Edit product
    function viewProduct(id) {
        const product = products.find(p => p.id === id);
        if (!product) return;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 800px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #6A5ACD;">Product Details</h3>
            </div>
            <form id="editProductForm" action="UpdateProduct" method="post">
                <div class="modal-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">ID</label>
                            <input type="text" class="form-control" id="product-id" name="id" value="${product.id}" readonly style="background-color: #f8f9fa; cursor: not-allowed;">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" id="product-name" name="productName" value="${product.name || ''}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Price</label>
                            <input type="number" class="form-control" id="product-price" name="price" value="${product.price}" disabled>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Stock</label>
                            <input type="number" class="form-control" id="product-stock" name="stockQuantity" value="${product.stock}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select class="form-control" id="product-category" name="catalogID" disabled>
                                ${getCategoryOptions(product.categoryId)}
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">MFG Date</label>
                            <input type="date" class="form-control" id="product-mfg" name="mfgDate" value="${product.mfgDate}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">EXP Date</label>
                            <input type="date" class="form-control" id="product-exp" name="expDate" value="${product.expDate}" disabled>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Average Rating</label>
                            <input type="number" class="form-control" id="product-star" value="${product.averageStar}" disabled readonly>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="product-description" name="productDescription" disabled>${product.description || ''}</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Image</label>
                            <input type="file" class="form-control" id="product-image" name="imageFile" accept="image/*" disabled style="display: none;">
                            <div class="image-container">
                                <img src="${product.imageUrl}" id="product-image-preview" onerror="this.src='https://via.placeholder.com/150'">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="display: flex; gap: 10px;">
                    <button type="button" class="btn btn-edit" style="background-color: #6A5ACD; color: white;">Edit</button>
                    <button type="submit" class="btn btn-save" style="background-color: #28a745; color: white; display: none;">Save</button>
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; display: none;">Cancel</button>
                    <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white;">Close</button>
                </div>
            </form>
        `;

        const form = modalContent.querySelector('#editProductForm');
        const inputs = {
            id: modalContent.querySelector('#product-id'),
            name: modalContent.querySelector('#product-name'),
            description: modalContent.querySelector('#product-description'),
            price: modalContent.querySelector('#product-price'),
            stock: modalContent.querySelector('#product-stock'),
            category: modalContent.querySelector('#product-category'),
            mfg: modalContent.querySelector('#product-mfg'),
            exp: modalContent.querySelector('#product-exp'),
            image: modalContent.querySelector('#product-image'),
            imagePreview: modalContent.querySelector('#product-image-preview'),
            star: modalContent.querySelector('#product-star')
        };

        const buttons = {
            edit: modalContent.querySelector('.btn-edit'),
            save: modalContent.querySelector('.btn-save'),
            cancel: modalContent.querySelector('.btn-cancel'),
            close: modalContent.querySelector('.btn-close-modal')
        };

        const enterEditMode = () => {
            Object.values(inputs).forEach(input => {
                if (input.tagName !== 'IMG' && input.id !== 'product-id' && input.id !== 'product-star') {
                    input.disabled = false;
                }
                if (input.id === 'product-image') input.style.display = 'block';
            });
            buttons.edit.style.display = 'none';
            buttons.save.style.display = 'block';
            buttons.cancel.style.display = 'block';
            buttons.close.style.display = 'none';
        };

        const exitEditMode = () => {
            Object.values(inputs).forEach(input => {
                if (input.tagName !== 'IMG') input.disabled = true;
                if (input.id === 'product-image') input.style.display = 'none';
            });
            inputs.name.value = product.name || '';
            inputs.description.value = product.description || '';
            inputs.price.value = product.price;
            inputs.stock.value = product.stock;
            inputs.category.value = product.categoryId;
            inputs.mfg.value = product.mfgDate;
            inputs.exp.value = product.expDate;
            inputs.imagePreview.src = product.imageUrl;
            buttons.edit.style.display = 'block';
            buttons.save.style.display = 'none';
            buttons.cancel.style.display = 'none';
            buttons.close.style.display = 'block';
        };

        inputs.image.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => inputs.imagePreview.src = reader.result;
                reader.readAsDataURL(file);
            }
        });

        buttons.close.addEventListener('click', () => document.body.removeChild(modal));
        buttons.edit.addEventListener('click', enterEditMode);
        buttons.cancel.addEventListener('click', exitEditMode);

        // Form submit handler
        form.addEventListener('submit', function(event) {
            if (!inputs.name.value.trim() || inputs.price.value <= 0) {
                event.preventDefault();
                return false;
            }
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (!inputs.name.disabled) exitEditMode();
                else document.body.removeChild(modal);
            }
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Delete product
    function deleteProduct(id) {
        const product = products.find(p => p.id === id);
        if (!product) return;

        const confirmModal = document.createElement('div');
        confirmModal.className = 'modal-overlay';
        confirmModal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';
        confirmModal.innerHTML = `
            <div class="modal-content" style="background-color: white; padding: 25px; border-radius: 8px; width: 400px; max-width: 90%;">
                <div class="modal-header">
                    <h3 class="modal-title" style="color: #6A5ACD;">Confirm Deletion</h3>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this product?</p>
                    <p><strong>Name:</strong> ${product.name || ''}</p>

                    <form id="deleteProductForm" action="DeleteProduct" method="post">
                        <input type="hidden" name="id" value="${product.id}">
                    </form>
                </div>
                <div class="modal-footer" style="display: flex; gap: 10px;">
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
                    <button type="button" class="btn btn-confirm" style="background-color: #dc3545; color: white;">Delete</button>
                </div>
            </div>
        `;

        const deleteForm = confirmModal.querySelector('#deleteProductForm');
        const cancelBtn = confirmModal.querySelector('.btn-cancel');
        const confirmBtn = confirmModal.querySelector('.btn-confirm');

        cancelBtn.addEventListener('click', () => document.body.removeChild(confirmModal));
        confirmBtn.addEventListener('click', () => {
            // Submit form
            deleteForm.submit();

            // Update UI locally
            const index = products.findIndex(p => p.id === id);
            if (index !== -1) {
                products.splice(index, 1);
                renderProductTable(products, currentPage);
            }

            document.body.removeChild(confirmModal);
        });

        document.body.appendChild(confirmModal);
    }

    // Add new product
    function addNewProduct() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 800px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header">
                <h3 class="modal-title" style="color: #6A5ACD;">Add New Product</h3>
            </div>
            <form id="addProductForm" action="CreateProduct" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Name <span style="color: red;">*</span></label>
                            <input type="text" class="form-control" id="new-product-name" name="productName" placeholder="Enter product name" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Price <span style="color: red;">*</span></label>
                            <input type="number" class="form-control" id="new-product-price" name="price" placeholder="Enter price" min="0.01" step="0.01" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Stock <span style="color: red;">*</span></label>
                            <input type="number" class="form-control" id="new-product-stock" name="stockQuantity" placeholder="Enter stock" min="0" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category <span style="color: red;">*</span></label>
                            <select class="form-control" id="new-product-category" name="catalogID" required>
                                <option value="">Select category</option>
                                ${getCategoryOptions()}
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">MFG Date <span style="color: red;">*</span></label>
                            <input type="date" class="form-control" id="new-product-mfg" name="mfgDate" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">EXP Date <span style="color: red;">*</span></label>
                            <input type="date" class="form-control" id="new-product-exp" name="expDate" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="new-product-description" name="productDescription" placeholder="Enter description"></textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Image</label>
                            <input type="file" class="form-control" id="new-product-image" name="imageFile" accept="image/*">
                            <div class="image-container">
                                <img src="" id="new-product-image-preview" style="display: none;">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="display: flex; gap: 10px;">
                    <button type="submit" class="btn btn-add" style="background-color: #6A5ACD; color: white;">Add</button>
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
                </div>
            </form>
        `;

        const form = modalContent.querySelector('#addProductForm');
        const inputs = {
            name: modalContent.querySelector('#new-product-name'),
            description: modalContent.querySelector('#new-product-description'),
            price: modalContent.querySelector('#new-product-price'),
            stock: modalContent.querySelector('#new-product-stock'),
            category: modalContent.querySelector('#new-product-category'),
            mfg: modalContent.querySelector('#new-product-mfg'),
            exp: modalContent.querySelector('#new-product-exp'),
            image: modalContent.querySelector('#new-product-image'),
            imagePreview: modalContent.querySelector('#new-product-image-preview')
        };

        inputs.image.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    inputs.imagePreview.src = reader.result;
                    inputs.imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });

        // Form validation on submit
        form.addEventListener('submit', function(event) {
            if (!inputs.name.value.trim() || !inputs.price.value || !inputs.category.value) {
                event.preventDefault();
                return false;
            }
        });

        modalContent.querySelector('.btn-cancel').addEventListener('click', () => document.body.removeChild(modal));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        renderProductTable(products);
        document.getElementById('add-product-btn').addEventListener('click', addNewProduct);
    });
</script>