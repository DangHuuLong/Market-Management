@using PBL3_HK4.Entity
@{
    ViewData["Title"] = "Notification";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    OrderManagementViewModel orderManagementViewModel = Model as OrderManagementViewModel;
    var bills = orderManagementViewModel.Bills;
    var billDetails = orderManagementViewModel.BillDetails;
    var customers = orderManagementViewModel.Customers;
    var products = orderManagementViewModel.Products;
}

<div id="notification-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="fs-2 fs-md-1 mb-0">Notifications</h1>
    </div>

    <!-- Notification List -->
    <div id="notification-list" class="notification-list">
        <!-- Notifications will be populated by JavaScript -->
    </div>
</div>

<style>
    .notification-list {
        max-width: 800px;
        margin: 0 auto;
    }

    .notification-item {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        transition: transform 0.2s ease;
    }

        .notification-item:hover {
            transform: translateY(-2px);
        }

    .notification-icon {
        font-size: 1.5rem;
        margin-right: 1rem;
        flex-shrink: 0;
    }

    .notification-content {
        flex-grow: 1;
    }

    .notification-message {
        font-size: 1rem;
        color: #333333;
        margin: 0;
    }

    .notification-timestamp {
        font-size: 0.85rem;
        color: #6B7280;
        margin-top: 0.25rem;
    }

    .notification-processing .notification-icon {
        color: #FF9800; /* Orange for Processing */
    }

    .notification-canceled .notification-icon {
        color: #d32f2f; /* Red for Canceled */
    }

    .no-notifications {
        text-align: center;
        padding: 2rem;
        background-color: #F5F7FA;
        border-radius: 8px;
        color: #6B7280;
        font-size: 1rem;
    }

    /* Responsive styles */
    @@media (max-width: 767.98px) {
        .notification-item

    {
        padding: 1rem;
        flex-direction: column;
        align-items: flex-start;
    }

    .notification-icon {
        margin-right: 0;
        margin-bottom: 0.5rem;
    }

    .notification-message {
        font-size: 0.95rem;
    }

    .notification-timestamp {
        font-size: 0.8rem;
    }

    }

    @@media (max-width: 575.98px) {
        .notification-list

    {
        padding: 0 0.5rem;
    }

    }
</style>

<script>
    // Format date and time as HH:mm DD/MM/YYYY
    function formatDateTime(dateString) {
        const date = new Date(dateString);
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${hours}:${minutes} ${day}/${month}/${year}`;
    }

    // Bill data from ViewModel
    const bills = [
    @foreach (var bill in bills)
    {
        var customer = customers.FirstOrDefault(c => c.UserID == bill.UserID);
        var statusText = bill.Status == BillStatus.Unconfirmed ? "Processing" :
                         bill.Status == BillStatus.Cancelled ? "Canceled" : bill.Status.ToString();
        <text>
                {
                    id: "@bill.BillID",
                    customerName: "@(customer != null ? customer.Name : "Unknown")",
                    status: "@statusText",
                    date: "@bill.Date.ToString("yyyy-MM-ddTHH:mm:ss")",
                    cancellingReason: "@(bill.CancellingReason ?? "")"
                },
        </text>
    }
    ];

    // Filter and sort notifications
    function renderNotifications() {
        const notificationList = document.getElementById('notification-list');
        notificationList.innerHTML = '';

        // Filter bills with status Processing or Canceled
        const filteredBills = bills.filter(bill =>
            bill.status === 'Processing' || bill.status === 'Canceled'
        );

        // Sort by date (newest first)
        filteredBills.sort((a, b) => new Date(b.date) - new Date(a.date));

        if (filteredBills.length === 0) {
            notificationList.innerHTML = `
                <div class="no-notifications">
                    No notifications available.
                </div>
            `;
            return;
        }

        filteredBills.forEach(bill => {
            const notificationItem = document.createElement('div');
            notificationItem.className = `notification-item notification-${bill.status.toLowerCase()}`;

            // Determine icon and message based on status
            let iconClass = '';
            let message = '';

            if (bill.status === 'Processing') {
                iconClass = 'fas fa-clock';
                message = `An order from ${bill.customerName} has just been added to the processing queue.`;
            } else if (bill.status === 'Canceled') {
                iconClass = 'fas fa-times-circle';
                message = `An order from ${bill.customerName} has been canceled. Reason: ${bill.cancellingReason || 'No reason provided'}.`;
            }

            notificationItem.innerHTML = `
                <i class="${iconClass} notification-icon"></i>
                <div class="notification-content">
                    <p class="notification-message">${message}</p>
                    <p class="notification-timestamp">${formatDateTime(bill.date)}</p>
                </div>
            `;

            notificationList.appendChild(notificationItem);
        });
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        renderNotifications();
    });
</script>