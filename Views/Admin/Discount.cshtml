@{
    ViewData["Title"] = "Discount Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="discount-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Discount Management</h1>
        <button style="background-color: #6A5ACD; color: white;" class="btn" id="add-discount-btn">
            <i class="fas fa-plus"></i> Add New Discount
        </button>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="discount-table">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Rate (%)</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th width="20%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #6A5ACD;
        border-color: #6A5ACD;
    }

    .page-link {
        color: #6A5ACD;
    }

        .page-link:hover {
            color: #5a4abd;
        }

    .form-label {
        font-weight: 500;
        color: #6A5ACD;
    }

    .modal-overlay {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    .modal-content {
        animation: slideDown 0.3s ease-in-out;
    }

    @@keyframes slideDown {
        from

    {
        transform: translateY(-50px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .modal-footer .btn {
        padding: 6px 12px;
        border-radius: 4px;
        transition: all 0.3s;
    }

        .modal-footer .btn:hover {
            opacity: 0.9;
        }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 250px;
    }

        .form-group label {
            margin-bottom: 5px;
            display: block;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
        }
</style>

<script>
    // Dữ liệu discount mẫu (30 discount)
    const sampleDiscounts = [
        { id: 1, name: "New Year Sale", rate: 10, startDate: "2025-01-01", endDate: "2025-01-15" },
        { id: 2, name: "Valentine's Day", rate: 15, startDate: "2025-02-10", endDate: "2025-02-14" },
        { id: 3, name: "Spring Promotion", rate: 20, startDate: "2025-03-01", endDate: "2025-03-31" },
        { id: 4, name: "Easter Discount", rate: 25, startDate: "2025-04-10", endDate: "2025-04-20" },
        { id: 5, name: "Summer Sale", rate: 30, startDate: "2025-06-01", endDate: "2025-06-30" },
        { id: 6, name: "Independence Day", rate: 15, startDate: "2025-07-01", endDate: "2025-07-07" },
        { id: 7, name: "Back to School", rate: 20, startDate: "2025-08-15", endDate: "2025-09-15" },
        { id: 8, name: "Fall Clearance", rate: 25, startDate: "2025-09-01", endDate: "2025-09-30" },
        { id: 9, name: "Halloween Special", rate: 10, startDate: "2025-10-25", endDate: "2025-10-31" },
        { id: 10, name: "Black Friday", rate: 40, startDate: "2025-11-28", endDate: "2025-11-30" },
        { id: 11, name: "Cyber Monday", rate: 35, startDate: "2025-12-01", endDate: "2025-12-01" },
        { id: 12, name: "Christmas Sale", rate: 30, startDate: "2025-12-15", endDate: "2025-12-25" },
        { id: 13, name: "Winter Discount", rate: 20, startDate: "2025-12-26", endDate: "2026-01-05" },
        { id: 14, name: "Lunar New Year", rate: 15, startDate: "2025-01-29", endDate: "2025-02-05" },
        { id: 15, name: "Women's Day", rate: 10, startDate: "2025-03-08", endDate: "2025-03-08" },
        { id: 16, name: "Earth Day Promo", rate: 20, startDate: "2025-04-22", endDate: "2025-04-22" },
        { id: 17, name: "Labor Day Sale", rate: 25, startDate: "2025-05-01", endDate: "2025-05-05" },
        { id: 18, name: "Mid-Year Sale", rate: 30, startDate: "2025-07-15", endDate: "2025-07-31" },
        { id: 19, name: "Thanksgiving", rate: 35, startDate: "2025-11-27", endDate: "2025-11-28" },
        { id: 20, name: "Autumn Special", rate: 15, startDate: "2025-10-01", endDate: "2025-10-15" },
        { id: 21, name: "Flash Sale", rate: 50, startDate: "2025-05-10", endDate: "2025-05-12" },
        { id: 22, name: "Clearance Sale", rate: 40, startDate: "2025-02-20", endDate: "2025-02-28" },
        { id: 23, name: "Kids' Day", rate: 20, startDate: "2025-06-01", endDate: "2025-06-01" },
        { id: 24, name: "Singles' Day", rate: 25, startDate: "2025-11-11", endDate: "2025-11-11" },
        { id: 25, name: "Family Day", rate: 15, startDate: "2025-05-15", endDate: "2025-05-15" },
        { id: 26, name: "Health Week", rate: 10, startDate: "2025-04-07", endDate: "2025-04-13" },
        { id: 27, name: "Green Monday", rate: 20, startDate: "2025-12-08", endDate: "2025-12-08" },
        { id: 28, name: "Sports Day", rate: 15, startDate: "2025-09-10", endDate: "2025-09-10" },
        { id: 29, name: "Teacher's Day", rate: 10, startDate: "2025-09-05", endDate: "2025-09-05" },
        { id: 30, name: "Year-End Sale", rate: 30, startDate: "2025-12-26", endDate: "2025-12-31" }
    ];

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 10;

    // Render table data
    function renderDiscountTable(data, page = 1) {
        const tbody = document.querySelector('#discount-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        paginatedData.forEach(discount => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${discount.id}</td>
                <td>${discount.name}</td>
                <td>${discount.rate}%</td>
                <td>${discount.startDate}</td>
                <td>${discount.endDate}</td>
                <td>
                    <button class="btn btn-sm btn-link text-dark me-2" onclick="viewDiscount(${discount.id})">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-link text-danger" onclick="deleteDiscount(${discount.id})">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Render pagination
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        for (let i = 1; i <= totalPages; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(sampleDiscounts.length / itemsPerPage)) return;
        currentPage = page;
        renderDiscountTable(sampleDiscounts, page);
    }

    // Show notification
    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.style.cssText = `position: fixed; bottom: 20px; right: 20px; padding: 12px 24px; border-radius: 4px; color: white; background-color: ${type === 'success' ? '#28a745' : '#dc3545'}; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1100; transition: all 0.3s ease; display: flex; align-items: center; gap: 10px;`;
        const icon = document.createElement('i');
        icon.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
        notification.appendChild(icon);
        notification.appendChild(document.createTextNode(message));
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => document.body.removeChild(notification), 300);
        }, 3000);
    }

    // View/Edit discount
    function viewDiscount(id) {
        const discount = sampleDiscounts.find(d => d.id === id);
        if (!discount) return;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 600px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #6A5ACD;">Discount Details</h3>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">ID</label>
                        <input type="text" class="form-control" id="discount-id" value="${discount.id}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="discount-name" value="${discount.name}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Rate (%)</label>
                        <input type="number" class="form-control" id="discount-rate" value="${discount.rate}" min="0" max="100" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="discount-start" value="${discount.startDate}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">End Date</label>
                        <input type="date" class="form-control" id="discount-end" value="${discount.endDate}" disabled>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 10px;">
                <button type="button" class="btn btn-edit" style="background-color: #6A5ACD; color: white;">Edit</button>
                <button type="button" class="btn btn-save" style="background-color: #28a745; color: white; display: none;">Save</button>
                <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; display: none;">Cancel</button>
                <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white;">Close</button>
            </div>
        `;

        const inputs = {
            id: modalContent.querySelector('#discount-id'),
            name: modalContent.querySelector('#discount-name'),
            rate: modalContent.querySelector('#discount-rate'),
            start: modalContent.querySelector('#discount-start'),
            end: modalContent.querySelector('#discount-end')
        };

        const buttons = {
            edit: modalContent.querySelector('.btn-edit'),
            save: modalContent.querySelector('.btn-save'),
            cancel: modalContent.querySelector('.btn-cancel'),
            close: modalContent.querySelector('.btn-close-modal')
        };

        const enterEditMode = () => {
            inputs.name.disabled = false;
            inputs.rate.disabled = false;
            inputs.start.disabled = false;
            inputs.end.disabled = false;
            buttons.edit.style.display = 'none';
            buttons.save.style.display = 'block';
            buttons.cancel.style.display = 'block';
            buttons.close.style.display = 'none';
        };

        const exitEditMode = () => {
            inputs.name.disabled = true;
            inputs.rate.disabled = true;
            inputs.start.disabled = true;
            inputs.end.disabled = true;
            inputs.name.value = discount.name;
            inputs.rate.value = discount.rate;
            inputs.start.value = discount.startDate;
            inputs.end.value = discount.endDate;
            buttons.edit.style.display = 'block';
            buttons.save.style.display = 'none';
            buttons.cancel.style.display = 'none';
            buttons.close.style.display = 'block';
        };

        const saveChanges = () => {
            if (!inputs.name.value.trim()) {
                showNotification('Discount name is required!', 'error');
                return;
            }
            if (!inputs.rate.value || inputs.rate.value <= 0 || inputs.rate.value > 100) {
                showNotification('Rate must be between 1 and 100!', 'error');
                return;
            }
            if (!inputs.start.value) {
                showNotification('Start date is required!', 'error');
                return;
            }
            if (!inputs.end.value) {
                showNotification('End date is required!', 'error');
                return;
            }
            if (new Date(inputs.end.value) < new Date(inputs.start.value)) {
                showNotification('End date must be after start date!', 'error');
                return;
            }

            const index = sampleDiscounts.findIndex(d => d.id === discount.id);
            sampleDiscounts[index] = {
                ...discount,
                name: inputs.name.value.trim(),
                rate: parseFloat(inputs.rate.value),
                startDate: inputs.start.value,
                endDate: inputs.end.value
            };
            renderDiscountTable(sampleDiscounts, currentPage);
            showNotification('Discount updated successfully!');
            exitEditMode();
        };

        buttons.close.addEventListener('click', () => document.body.removeChild(modal));
        buttons.edit.addEventListener('click', enterEditMode);
        buttons.save.addEventListener('click', saveChanges);
        buttons.cancel.addEventListener('click', exitEditMode);
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (!inputs.name.disabled) exitEditMode();
                else document.body.removeChild(modal);
            }
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Delete discount
    function deleteDiscount(id) {
        const confirmModal = document.createElement('div');
        confirmModal.className = 'modal-overlay';
        confirmModal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';
        confirmModal.innerHTML = `
            <div class="modal-content" style="background-color: white; padding: 25px; border-radius: 8px; width: 400px; max-width:90%;">
                <div class="modal-header">
                    <h3 class="modal-title" style="color: #6A5ACD;">Confirm Deletion</h3>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this discount?</p>
                </div>
                <div class="modal-footer" style="display: flex; gap: 10px;">
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
                    <button type="button" class="btn btn-confirm" style="background-color: #dc3545; color: white;">Delete</button>
                </div>
            </div>
        `;

        const cancelBtn = confirmModal.querySelector('.btn-cancel');
        const confirmBtn = confirmModal.querySelector('.btn-confirm');

        cancelBtn.addEventListener('click', () => document.body.removeChild(confirmModal));
        confirmBtn.addEventListener('click', () => {
            const index = sampleDiscounts.findIndex(d => d.id === id);
            if (index !== -1) {
                sampleDiscounts.splice(index, 1);
                renderDiscountTable(sampleDiscounts, currentPage);
                showNotification('Discount deleted successfully!', 'success');
            }
            document.body.removeChild(confirmModal);
        });

        document.body.appendChild(confirmModal);
    }

    // Add new discount
    function addNewDiscount() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 600px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header">
                <h3 class="modal-title" style="color: #6A5ACD;">Add New Discount</h3>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="new-discount-name" placeholder="Enter discount name">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Rate (%)</label>
                        <input type="number" class="form-control" id="new-discount-rate" placeholder="Enter rate" min="0" max="100">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="new-discount-start">
                    </div>
                    <div class="form-group">
                        <label class="form-label">End Date</label>
                        <input type="date" class="form-control" id="new-discount-end">
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 10px;">
                <button type="button" class="btn btn-add" style="background-color: #6A5ACD; color: white;">Add</button>
                <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white;">Cancel</button>
            </div>
        `;

        const inputs = {
            name: modalContent.querySelector('#new-discount-name'),
            rate: modalContent.querySelector('#new-discount-rate'),
            start: modalContent.querySelector('#new-discount-start'),
            end: modalContent.querySelector('#new-discount-end')
        };

        modalContent.querySelector('.btn-add').addEventListener('click', () => {
            if (!inputs.name.value.trim()) {
                showNotification('Discount name is required!', 'error');
                return;
            }
            if (!inputs.rate.value || inputs.rate.value <= 0 || inputs.rate.value > 100) {
                showNotification('Rate must be between 1 and 100!', 'error');
                return;
            }
            if (!inputs.start.value) {
                showNotification('Start date is required!', 'error');
                return;
            }
            if (!inputs.end.value) {
                showNotification('End date is required!', 'error');
                return;
            }
            if (new Date(inputs.end.value) < new Date(inputs.start.value)) {
                showNotification('End date must be after start date!', 'error');
                return;
            }

            const newId = sampleDiscounts.length > 0 ? Math.max(...sampleDiscounts.map(d => d.id)) + 1 : 1;
            const newDiscount = {
                id: newId,
                name: inputs.name.value.trim(),
                rate: parseFloat(inputs.rate.value),
                startDate: inputs.start.value,
                endDate: inputs.end.value
            };

            sampleDiscounts.unshift(newDiscount);
            currentPage = 1;
            renderDiscountTable(sampleDiscounts, currentPage);
            showNotification('Discount added successfully!', 'success');
            document.body.removeChild(modal);
        });

        modalContent.querySelector('.btn-cancel').addEventListener('click', () => document.body.removeChild(modal));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        renderDiscountTable(sampleDiscounts);
        document.getElementById('add-discount-btn').addEventListener('click', addNewDiscount);
    });
</script>