@using PBL3_HK4.Entity
@model object
@{
    ViewData["Title"] = "Category Manage";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    IEnumerable<Catalog> listCatalog = Model as IEnumerable<Catalog>;
}

<div id="category-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Category Management</h1>
        <button style="background-color: #2E8B57; color: white;" class="btn" id="add-category-btn">
            <i class="fas fa-plus"></i> Add New Category
        </button>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="category-table">
            <thead class="table-light">
                <tr>
                    <th width="15%">ID</th>
                    <th>Name</th>
                    <th width="20%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #2E8B57;
        border-color: #2E8B57;
    }

    .page-link {
        color: #2E8B57;
    }

        .page-link:hover {
            color: #1e7d45;
        }

    .form-label {
        font-weight: 500;
        color: #2E8B57;
    }

    /* Modal Animation */
    .modal-overlay {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .modal-content {
        animation: slideDown 0.3s ease-in-out;
    }

    @@keyframes slideDown {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    /* Close button hover effect */
    .close-btn:hover {
        color: #2E8B57 !important;
    }

    /* Modal footer button styling */
    .modal-footer .btn {
        padding: 6px 12px;
        border-radius: 4px;
        transition: all 0.3s;
    }

        .modal-footer .btn:hover {
            opacity: 0.9;
        }
</style>

<script>
        // Chuyển dữ liệu từ Model thành JavaScript
    const categories = [
    @foreach (var item in listCatalog)
    {
        @:{ id: "@item.CatalogID", name: "@item.CatalogName" },
    }
    ];

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 10;

    // Function to render table data with pagination
    function renderCategoryTable(data, page = 1) {
        const tbody = document.querySelector('#category-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = ''; // Clear existing data

        // Calculate pagination
        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        // Render table rows
        paginatedData.forEach(category => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${category.id}</td>
                <td>${category.name}</td>
                <td>
                    <button class="btn btn-sm btn-link text-dark me-2" onclick="viewCategory('${category.id}')">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-link text-danger" onclick="deleteCategory('${category.id}')">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });

        // Render pagination controls if needed
        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Function to render pagination controls
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `
            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">
                <span>&laquo;</span>
            </a>
        `;
        pagination.appendChild(prevLi);

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `
                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
            `;
            pagination.appendChild(pageLi);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `
            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">
                <span>&raquo;</span>
            </a>
        `;
        pagination.appendChild(nextLi);
    }

    // Function to handle page changes
    function changePage(page) {
        if (page < 1 || page > Math.ceil(categories.length / itemsPerPage)) return;
        currentPage = page;
        renderCategoryTable(categories, page);
    }

    // View/Edit category modal with inline inputs
    function viewCategory(id) {
        const category = categories.find(c => c.id === id);
        if (!category) return;

        // Create modal overlay
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        modal.style.zIndex = '1050';
        modal.style.display = 'flex';
        modal.style.justifyContent = 'center';
        modal.style.alignItems = 'center';

        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.backgroundColor = 'white';
        modalContent.style.padding = '25px';
        modalContent.style.borderRadius = '8px';
        modalContent.style.width = '500px';
        modalContent.style.maxWidth = '90%';
        modalContent.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';

        // Create form with inline layout
        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #2E8B57; margin: 0;">Category Details</h3>
            </div>
            <form id="editCategoryForm" action="UpdateCategory" method="post">
                <div class="modal-body">
                    <div class="form-group row mb-3" style="display: flex; align-items: center;">
                        <label class="col-sm-3 col-form-label" style="font-weight: 500; color: #2E8B57;">ID</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" id="category-id" name="id" value="${category.id}"
                                   readonly style="background-color: #f8f9fa; cursor: not-allowed;">
                        </div>
                    </div>
                    <div class="form-group row mb-3" style="display: flex; align-items: center;">
                        <label class="col-sm-3 col-form-label" style="font-weight: 500; color: #2E8B57;">Name</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" id="category-name" name="name" value="${category.name}"
                                   disabled style="background-color: #f8f9fa; cursor: not-allowed;">
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border-top: 1px solid #dee2e6; margin-top: 20px; padding-top: 15px; display: flex; justify-content: flex-end; gap: 10px;">
                    <button type="button" class="btn btn-edit" style="background-color: #2E8B57; color: white; padding: 8px 16px; border-radius: 4px; border: none;">
                        <i class="fas fa-edit me-2"></i>Edit
                    </button>
                    <button type="submit" class="btn btn-save" style="background-color: #28a745; color: white; padding: 8px 16px; border-radius: 4px; border: none; display: none;">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; padding: 8px 16px; border-radius: 4px; border: none; display: none;">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white; padding: 8px 16px; border-radius: 4px; border: none;">
                        Close
                    </button>
                </div>
            </form>
        `;

        // Get DOM elements
        const form = modalContent.querySelector('#editCategoryForm');
        const closeBtn = modalContent.querySelector('.btn-close-modal');
        const editBtn = modalContent.querySelector('.btn-edit');
        const saveBtn = modalContent.querySelector('.btn-save');
        const cancelBtn = modalContent.querySelector('.btn-cancel');
        const idInput = modalContent.querySelector('#category-id');
        const nameInput = modalContent.querySelector('#category-name');

        // Close modal function
        const closeModal = () => {
            document.body.removeChild(modal);
        };

        // Enter edit mode
        const enterEditMode = () => {
            nameInput.disabled = false;
            nameInput.style.backgroundColor = 'white';
            nameInput.style.cursor = 'text';
            nameInput.focus();

            editBtn.style.display = 'none';
            saveBtn.style.display = 'block';
            cancelBtn.style.display = 'block';
            closeBtn.style.display = 'none';
        };

        // Exit edit mode
        const exitEditMode = () => {
            nameInput.disabled = true;
            nameInput.style.backgroundColor = '#f8f9fa';
            nameInput.style.cursor = 'not-allowed';
            nameInput.value = category.name; // Reset to original value

            editBtn.style.display = 'block';
            saveBtn.style.display = 'none';
            cancelBtn.style.display = 'none';
            closeBtn.style.display = 'block';
        };

        // Event listeners
        closeBtn.addEventListener('click', closeModal);
        editBtn.addEventListener('click', enterEditMode);
        cancelBtn.addEventListener('click', exitEditMode);

        // Close when clicking outside modal
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (!nameInput.disabled) {
                    exitEditMode();
                } else {
                    closeModal();
                }
            }
        });

        // Add elements to DOM
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    function deleteCategory(id) {
        const category = categories.find(c => c.id === id);
        if (!category) return;

        // Create confirmation modal
        const confirmModal = document.createElement('div');
        confirmModal.className = 'modal-overlay';
        confirmModal.style.position = 'fixed';
        confirmModal.style.top = '0';
        confirmModal.style.left = '0';
        confirmModal.style.width = '100%';
        confirmModal.style.height = '100%';
        confirmModal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        confirmModal.style.zIndex = '1050';
        confirmModal.style.display = 'flex';
        confirmModal.style.justifyContent = 'center';
        confirmModal.style.alignItems = 'center';

        confirmModal.innerHTML = `
            <div class="modal-content" style="background-color: white; padding: 25px; border-radius: 8px; width: 400px; max-width: 90%; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);">
                <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 15px; padding-bottom: 10px;">
                    <h3 class="modal-title" style="color: #2E8B57; margin: 0;">Confirm Deletion</h3>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this category?</p>
                    <p><strong>Name:</strong> ${category.name}</p>

                    <!-- Thêm form để POST dữ liệu -->
                    <form id="deleteCategoryForm" action="DeleteCategory" method="post">
                        <input type="hidden" name="id" value="${category.id}">
                    </form>
                </div>
                <div class="modal-footer" style="border-top: 1px solid #dee2e6; margin-top: 15px; padding-top: 10px; display: flex; justify-content: flex-end; gap: 10px;">
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; padding: 6px 12px; border-radius: 4px; border: none;">Cancel</button>
                    <button type="button" class="btn btn-confirm" style="background-color: #dc3545; color: white; padding: 6px 12px; border-radius: 4px; border: none;">Delete</button>
                </div>
            </div>
        `;

        // Add event listeners
        const deleteForm = confirmModal.querySelector('#deleteCategoryForm');
        const cancelBtn = confirmModal.querySelector('.btn-cancel');
        const confirmBtn = confirmModal.querySelector('.btn-confirm');

        const closeModal = () => {
            document.body.removeChild(confirmModal);
        };

        cancelBtn.addEventListener('click', closeModal);

        confirmBtn.addEventListener('click', () => {
            // Submit form để POST dữ liệu
            deleteForm.submit();

            // Xóa khỏi mảng local để cập nhật giao diện
            const index = categories.findIndex(c => c.id === id);
            if (index !== -1) {
                categories.splice(index, 1);
                renderCategoryTable(categories, currentPage);
            }

            closeModal();
        });

        // Close when clicking outside modal
        confirmModal.addEventListener('click', (e) => {
            if (e.target === confirmModal) {
                closeModal();
            }
        });

        // Add modal to DOM
        document.body.appendChild(confirmModal);
    }

    // Initialize table when page loads
    document.addEventListener('DOMContentLoaded', function() {
        renderCategoryTable(categories);
    });

    // Add New Category button event listener
    document.getElementById('add-category-btn').addEventListener('click', addNewCategory);

    function addNewCategory() {
        // Create modal overlay
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        modal.style.zIndex = '1050';
        modal.style.display = 'flex';
        modal.style.justifyContent = 'center';
        modal.style.alignItems = 'center';

        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.backgroundColor = 'white';
        modalContent.style.padding = '25px';
        modalContent.style.borderRadius = '8px';
        modalContent.style.width = '500px';
        modalContent.style.maxWidth = '90%';
        modalContent.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';

        // Create form for new category
        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #2E8B57; margin: 0;">Add New Category</h3>
            </div>
            <form id="addCategoryForm" action="CreateCategory" method="post">
                <div class="modal-body">
                    <div class="form-group row mb-3" style="display: flex; align-items: center;">
                        <label class="col-sm-3 col-form-label" style="font-weight: 500; color: #2E8B57;">ID</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" id="new-category-id"
                                   value="(Auto-generated)" disabled
                                   style="background-color: #f8f9fa; cursor: not-allowed;">
                        </div>
                    </div>
                    <div class="form-group row mb-3" style="display: flex; align-items: center;">
                        <label class="col-sm-3 col-form-label" style="font-weight: 500; color: #2E8B57; display: flex; align-items: center;">
                            Name <span style="color: #dc3545; margin-left: 5px;">*</span>
                        </label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" id="new-category-name" name="name"
                                   placeholder="Enter category name" required
                                   style="background-color: white; cursor: text;">
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border-top: 1px solid #dee2e6; margin-top: 20px; padding-top: 15px; display: flex; justify-content: flex-end; gap: 10px;">
                    <button type="submit" class="btn btn-add" style="background-color: #2E8B57; color: white; padding: 8px 16px; border-radius: 4px; border: none;">
                        <i class="fas fa-plus me-2"></i>Add
                    </button>
                    <button type="button" class="btn btn-cancel" style="background-color: #6c757d; color: white; padding: 8px 16px; border-radius: 4px; border: none;">
                        Cancel
                    </button>
                </div>
            </form>
        `;

        // Get DOM elements
        const form = modalContent.querySelector('#addCategoryForm');
        const cancelBtn = modalContent.querySelector('.btn-cancel');
        const nameInput = modalContent.querySelector('#new-category-name');

        // Event listeners
        cancelBtn.addEventListener('click', () => document.body.removeChild(modal));

        // Close when clicking outside modal
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });

        // Focus on name input when modal opens
        setTimeout(() => nameInput.focus(), 100);

        // Add elements to DOM
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }
</script>