@model IEnumerable<PBL3_HK4.Entity.Customer>
@{
    ViewData["Title"] = "Customer Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="customer-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Customer Management</h1>
        <!-- Không có nút Add New Customer -->
    </div>

    <!-- Search Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" id="search-customer" placeholder="Search by customer name...">
                <button class="btn btn-outline-secondary" type="button" id="search-btn">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex justify-content-end">
                <button class="btn btn-outline-secondary" type="button" id="clear-search">
                    <i class="fas fa-times"></i> <span class="d-none d-sm-inline">Clear Search</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="customer-table">
            <thead class="table-light">
                <tr>
                    <!-- Removed ID column -->
                    <th>Name</th>
                    <th>Gender</th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th width="10%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    /* Search styling */
    #search-customer::placeholder {
        opacity: 0.7;
    }

    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #2E8B57;
        border-color: #2E8B57;
    }

    .page-link {
        color: #2E8B57;
    }

        .page-link:hover {
            color: #1e7d45;
        }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 250px;
    }

        .form-group label {
            margin-bottom: 5px;
            display: block;
            font-weight: 500;
            color: #2E8B57;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
        }

    /* Responsive styling */
    @@media (max-width: 991.98px) {
        .row.mb-4

    {
        margin-bottom: 1rem !important;
    }

    .col-md-6:first-child {
        margin-bottom: 0.5rem;
    }

    .form-row {
        gap: 10px;
        margin-bottom: 10px;
    }

    }

    @@media (max-width: 767.98px) {
        .d-flex.justify-content-end

    {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .pagination .page-link {
        padding: 0.375rem 0.5rem;
    }

    .pagination .page-item:not(.active):not(:first-child):not(:last-child) {
        display: none;
    }

    .pagination .page-item.active {
        display: block;
    }

    }
</style>

<script>
    // Chuyển đổi dữ liệu từ Model sang JavaScript
    const customers = [
    @foreach (var customer in Model)
    {
        @:{
        @:  id: "@customer.UserID",
        @:  name: "@customer.Name",
        @:  gender: "@customer.Sex",
        @:  phoneNumber: "@customer.Phone",
        @:  email: "@customer.Email",
        @:  date: "@(customer.DateOfBirth.ToString("yyyy-MM-dd"))",
        @:  address: "@customer.Address",
        @:  point: @(customer.EarnedPoint ?? 0)
        @:},
    }
    ];

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 10;
    let searchTerm = '';
    let filteredCustomers = [...customers];

    // Function to search customers
    function searchCustomers() {
        searchTerm = document.getElementById('search-customer').value.trim().toLowerCase();

        if (searchTerm) {
            filteredCustomers = customers.filter(customer =>
                customer.name.toLowerCase().includes(searchTerm)
            );
        } else {
            filteredCustomers = [...customers];
        }

        currentPage = 1; // Reset to first page
        renderCustomerTable(filteredCustomers, currentPage);
    }

    // Function to clear search
    function clearSearch() {
        document.getElementById('search-customer').value = '';
        searchTerm = '';
        filteredCustomers = [...customers];
        currentPage = 1;
        renderCustomerTable(filteredCustomers, currentPage);
    }

    // Format date for display
    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        // Parse the date and format it as dd-mm-yyyy
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}-${month}-${year}`;
    }

    // Render table data
    function renderCustomerTable(data, page = 1) {
        const tbody = document.querySelector('#customer-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        if (paginatedData.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="alert alert-info mb-0">
                            No customers found matching your search. Try different keywords.
                        </div>
                    </td>
                </tr>
            `;
        } else {
            paginatedData.forEach(customer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${customer.name}</td>
                    <td>${customer.gender}</td>
                    <td>${customer.phoneNumber}</td>
                    <td>${customer.email}</td>
                    <td>
                        <button class="btn btn-sm btn-link text-dark me-2" onclick="viewCustomer('${customer.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Render pagination with better mobile support
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        // Determine visible pages based on screen size
        let maxVisiblePages = 5; // Desktop default
        const isMobile = window.innerWidth <= 767.98;
        const isTablet = window.innerWidth <= 991.98 && window.innerWidth > 767.98;

        if (isMobile) {
            maxVisiblePages = 1;
        } else if (isTablet) {
            maxVisiblePages = 3;
        }

        const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // First page (if not in range)
        if (startPage > 1) {
            const firstPageLi = document.createElement('li');
            firstPageLi.className = 'page-item';
            firstPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(1)">1</a>`;
            pagination.appendChild(firstPageLi);

            // Ellipsis if needed
            if (startPage > 2) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        // Last page (if not in range)
        if (endPage < totalPages) {
            // Ellipsis if needed
            if (endPage < totalPages - 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }

            const lastPageLi = document.createElement('li');
            lastPageLi.className = 'page-item';
            lastPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${totalPages})">${totalPages}</a>`;
            pagination.appendChild(lastPageLi);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(filteredCustomers.length / itemsPerPage)) return;
        currentPage = page;
        renderCustomerTable(filteredCustomers, page);
    }

    // View customer
    function viewCustomer(id) {
        const customer = customers.find(c => c.id === id);
        if (!customer) return;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 600px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #2E8B57;">Customer Details</h3>
            </div>
            <div class="modal-body">
                <!-- Hidden input for ID -->
                <input type="hidden" id="customer-id" value="${customer.id}">

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="customer-name" value="${customer.name}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Gender</label>
                        <input type="text" class="form-control" id="customer-gender" value="${customer.gender}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="customer-phone" value="${customer.phoneNumber}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="customer-email" value="${customer.email}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Date of Birth</label>
                        <input type="date" class="form-control" id="customer-date" value="${customer.date}" disabled>
                        <small class="text-muted">Display: ${formatDate(customer.date)}</small>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Point</label>
                        <input type="number" class="form-control" id="customer-point" value="${customer.point}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group" style="flex: 1;">
                        <label class="form-label">Address</label>
                        <textarea class="form-control" id="customer-address" disabled rows="3">${customer.address || ''}</textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 10px;">
                <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white;">Close</button>
            </div>
        `;

        const closeButton = modalContent.querySelector('.btn-close-modal');
        closeButton.addEventListener('click', () => document.body.removeChild(modal));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        renderCustomerTable(customers);

        // Setup search functionality
        const searchInput = document.getElementById('search-customer');
        const searchBtn = document.getElementById('search-btn');
        const clearSearchBtn = document.getElementById('clear-search');

        // Search on button click
        searchBtn.addEventListener('click', searchCustomers);

        // Search on Enter key press
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                searchCustomers();
            }
        });

        // Clear search button
        clearSearchBtn.addEventListener('click', clearSearch);

        // Update pagination on window resize
        window.addEventListener('resize', function() {
            renderCustomerTable(filteredCustomers, currentPage);
        });
    });
</script>