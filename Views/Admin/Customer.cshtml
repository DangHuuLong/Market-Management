@model IEnumerable<PBL3_HK4.Entity.Customer>
@{
    ViewData["Title"] = "Customer Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="customer-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Customer Management</h1>
        <!-- Không có nút Add New Customer -->
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="customer-table">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Gender</th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th width="10%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<!-- Keep your existing CSS styles here -->

<script>
    // Chuyển đổi dữ liệu từ Model sang JavaScript
    const customers = [
    @foreach (var customer in Model)
    {
        @:{
        @:  id: "@customer.UserID",
        @:  name: "@customer.Name",
        @:  gender: "@customer.Sex",
        @:  phoneNumber: "@customer.Phone",
        @:  email: "@customer.Email",
        @:  date: "@(customer.DateOfBirth.ToString("yyyy-MM-dd"))",
        @:  address: "@customer.Address",
        @:  point: @(customer.EarnedPoint ?? 0)
        @:},
    }
    ];

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 10;

    // Render table data
    function renderCustomerTable(data, page = 1) {
        const tbody = document.querySelector('#customer-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        paginatedData.forEach(customer => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${customer.id}</td>
                <td>${customer.name}</td>
                <td>${customer.gender}</td>
                <td>${customer.phoneNumber}</td>
                <td>${customer.email}</td>
                <td>
                    <button class="btn btn-sm btn-link text-dark me-2" onclick="viewCustomer('${customer.id}')">
                        <i class="fas fa-eye"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Render pagination
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        for (let i = 1; i <= totalPages; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(customers.length / itemsPerPage)) return;
        currentPage = page;
        renderCustomerTable(customers, page);
    }

    // View customer
    function viewCustomer(id) {
        const customer = customers.find(c => c.id === id);
        if (!customer) return;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;';

        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        modalContent.style.cssText = 'background-color: white; padding: 25px; border-radius: 8px; width: 600px; max-width: 90%;';

        modalContent.innerHTML = `
            <div class="modal-header" style="border-bottom: 1px solid #dee2e6; margin-bottom: 20px; padding-bottom: 10px;">
                <h3 class="modal-title" style="color: #2E8B57;">Customer Details</h3>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">ID</label>
                        <input type="text" class="form-control" id="customer-id" value="${customer.id}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="customer-name" value="${customer.name}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Gender</label>
                        <input type="text" class="form-control" id="customer-gender" value="${customer.gender}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="customer-phone" value="${customer.phoneNumber}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="customer-email" value="${customer.email}" disabled>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Date of Birth</label>
                        <input type="date" class="form-control" id="customer-date" value="${customer.date}" disabled>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Address</label>
                        <textarea class="form-control" id="customer-address" disabled>${customer.address || ''}</textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Point</label>
                        <input type="number" class="form-control" id="customer-point" value="${customer.point}" disabled>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 10px;">
                <button type="button" class="btn btn-close-modal" style="background-color: #6c757d; color: white;">Close</button>
            </div>
        `;

        const closeButton = modalContent.querySelector('.btn-close-modal');
        closeButton.addEventListener('click', () => document.body.removeChild(modal));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        });

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        renderCustomerTable(customers);
    });
</script>