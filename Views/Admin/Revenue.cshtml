@{
    ViewData["Title"] = "Query Analyzer";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    :root {
        --primary: #2e8b57;
        --primary-light: #60ad5e;
        --primary-dark: #005005;
        --background: #f9fbf7;
        --card-bg: #ffffff;
        --text: #2c3e50;
        --text-light: #7f8c8d;
        --border-radius: 12px;
        --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --transition: all 0.3s ease;
    }

    .card {
        background: var(--card-bg);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        padding: 25px;
        margin-bottom: 30px;
    }

    .section-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .section-header i {
            margin-right: 10px;
            color: var(--primary);
            font-size: 1.5rem;
        }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary);
    }

    /* Query form with row layout by default - no media query needed */
    .query-form {
        display: flex;
        flex-direction: row;
    }

    .query-input {
        flex: 1;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: var(--border-radius) 0 0 var(--border-radius);
        font-size: 1rem;
        transition: var(--transition);
        outline: none;
    }

        .query-input:focus {
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(46, 125, 50, 0.15);
        }

    .analyze-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0 30px;
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 120px;
    }

        .analyze-btn:hover {
            background: var(--primary-dark);
        }

    .result-card {
        position: relative;
    }

    .loader {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        align-items: center;
        justify-content: center;
        border-radius: var(--border-radius);
        z-index: 10;
    }

        .loader.active {
            display: flex;
        }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid var(--primary-light);
        border-top-color: var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .result-tabs {
        display: flex;
        margin-bottom: 20px;
        border-bottom: 2px solid #eee;
    }

    .tab {
        padding: 12px 24px;
        cursor: pointer;
        font-weight: 500;
        color: var(--text-light);
        position: relative;
        transition: var(--transition);
    }

        .tab.active {
            color: var(--primary);
        }

            .tab.active::after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 100%;
                height: 2px;
                background: var(--primary);
            }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .analysis-result {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        font-family: monospace;
        white-space: pre-wrap;
        overflow-x: auto;
        color: #333;
        border: 1px solid #e0e0e0;
        min-height: 100px;
    }

    .image-container {
        text-align: center;
        margin-top: 20px;
    }

    .result-image {
        max-width: 100%;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        cursor: pointer; /* Add pointer cursor to indicate it's clickable */
    }

    /* Zoom Modal Styles */
    .zoom-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        z-index: 9999;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s;
    }

    .zoom-content {
        position: relative;
        max-width: 90%;
        max-height: 90%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .zoom-image {
        max-width: 100%;
        max-height: 90vh;
        object-fit: contain;
        border-radius: 4px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .close-zoom {
        position: absolute;
        top: -40px;
        right: 0;
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@media (max-width: 768px) {
        .query-form {
            flex-direction: column;
        }

        .query-input {
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            margin-bottom: 0;
        }

        .analyze-btn {
            width: 100%;
            border-radius: 0 0 var(--border-radius) var(--border-radius);
        }
    }

    @@media (max-width: 576px) {
        .card {
            padding: 15px;
        }
    }
</style>

<div class="card">
    <div class="section-header">
        <i class="fas fa-search"></i>
        <h2 class="section-title">Query Analyzer</h2>
    </div>
    <div class="query-form">
        <input type="text" id="queryInput" class="query-input" placeholder="Enter your query (e.g., 'Thống kê doanh thu trong năm 2025')">
        <button onclick="sendQuery()" class="analyze-btn">Analyze</button>
    </div>
</div>

<div class="card result-card">
    <div class="section-header">
        <i class="fas fa-chart-bar"></i>
        <h2 class="section-title">Analysis Results</h2>
    </div>

    <div class="result-tabs">
        <div class="tab active" onclick="switchTab('data')">Data Analysis</div>
        <div class="tab" onclick="switchTab('visual')">Visualization</div>
    </div>

    <div class="tab-content active" id="data-tab">
        <div class="analysis-result" id="analysisResult">No analysis data yet. Please enter a query and click 'Analyze'.</div>
    </div>

    <div class="tab-content" id="visual-tab">
        <div class="image-container">
            <img id="resultImage" class="result-image" alt="Analysis visualization will appear here" onclick="openZoomModal(this.src)">
        </div>
    </div>

    <div class="loader">
        <div class="spinner"></div>
    </div>
</div>

<!-- Zoom Modal -->
<div id="imageZoomModal" class="zoom-modal" onclick="closeZoomModal()">
    <div class="zoom-content">
        <img id="zoomedImage" class="zoom-image" src="" alt="Zoomed visualization">
        <span class="close-zoom">&times;</span>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    // Switch between tabs
    function switchTab(tabName) {
        // Hide all tabs
        document.querySelectorAll('.tab-content').forEach(function(tab) {
            tab.classList.remove('active');
        });

        document.querySelectorAll('.tab').forEach(function(tab) {
            tab.classList.remove('active');
        });

        // Show selected tab
        document.getElementById(tabName + '-tab').classList.add('active');

        // Highlight the tab button
        const tabs = document.querySelectorAll('.tab');
        for (let i = 0; i < tabs.length; i++) {
            if (tabs[i].textContent.toLowerCase().includes(tabName)) {
                tabs[i].classList.add('active');
            }
        }
    }

    // Image zoom functionality
    function openZoomModal(imageSrc) {
        const modal = document.getElementById('imageZoomModal');
        const zoomedImg = document.getElementById('zoomedImage');

        // Set the image source
        zoomedImg.src = imageSrc;

        // Display the modal
        modal.style.display = 'flex';

        // Prevent scrolling on the body when modal is open
        document.body.style.overflow = 'hidden';
    }

    function closeZoomModal() {
        document.getElementById('imageZoomModal').style.display = 'none';

        // Restore scrolling on the body
        document.body.style.overflow = 'auto';
    }

    // Close modal when clicking the close button or outside the image
    document.querySelector('.close-zoom').addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent the event from bubbling up
        closeZoomModal();
    });

    // Prevent closing when clicking on the image itself
    document.querySelector('.zoom-image').addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent the event from bubbling up to the modal
    });

    // Close modal with ESC key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeZoomModal();
        }
    });

    function sendQuery() {
        const query = document.getElementById("queryInput").value;

        if (!query.trim()) {
            alert("Please enter a query");
            return;
        }

        // Show loading spinner
        document.querySelector('.loader').classList.add('active');

        // Using axios to send the query
        axios.post('http://localhost:5000/analyze', {
            query: query
        })
        .then(function(response) {
            // Hide loading spinner
            document.querySelector('.loader').classList.remove('active');

            // Display the results
            document.getElementById("analysisResult").innerText = JSON.stringify(response.data.analysis, null, 2);

            // If there's an image, display it and switch to visualization tab
            if (response.data.image_base64) {
                document.getElementById("resultImage").src = 'data:image/png;base64,' + response.data.image_base64;
                document.getElementById("resultImage").style.display = 'block';
                switchTab('visual');
            } else {
                switchTab('data');
            }
        })
        .catch(function(error) {
            // Hide loading spinner
            document.querySelector('.loader').classList.remove('active');

            console.error("Error:", error);
            document.getElementById("analysisResult").innerText = "Error: Failed to fetch analysis. Please try again.";
            switchTab('data');
        });
    }

    // Initialize empty image
    document.getElementById("resultImage").style.display = 'none';
</script>