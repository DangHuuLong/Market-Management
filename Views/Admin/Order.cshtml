@{
    ViewData["Title"] = "Order Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    OrderManagementViewModel orderManagementViewModel = Model as OrderManagementViewModel;
    var bills = orderManagementViewModel.Bills;
    var billDetails = orderManagementViewModel.BillDetails;
    var customers = orderManagementViewModel.Customers;
    var products = orderManagementViewModel.Products;
}

<div id="order-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="fs-2 fs-md-1 mb-0">Order Management</h1>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" id="search-customer" placeholder="Search by customer name...">
                <button class="btn btn-outline-secondary" type="button" id="search-btn">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex justify-content-end">
                <select class="form-select me-2" id="status-filter" style="max-width: 200px;">
                    <option value="">All Statuses</option>
                    <option value="Processing">Processing</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Canceled">Canceled</option>
                    <option value="Received">Received</option>
                </select>
                <button class="btn btn-outline-secondary" type="button" id="clear-filters">
                    <i class="fas fa-times"></i> <span class="d-none d-sm-inline">Clear Filters</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="order-table">
            <thead class="table-light">
                <tr>
                    <th>Customer Name</th>
                    <th class="d-none d-md-table-cell">Phone Number</th>
                    <th class="d-none d-md-table-cell">Email</th>
                    <th>
                        Status
                    </th>
                    <th>
                        Order Date
                        <div class="sort-controls d-inline-block">
                            <i class="fas fa-sort-up sort-icon" data-field="orderDate" data-direction="asc"></i>
                            <i class="fas fa-sort-down sort-icon" data-field="orderDate" data-direction="desc"></i>
                        </div>
                    </th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center flex-wrap">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #4A90E2;
        border-color: #4A90E2;
    }

    .page-link {
        color: #4A90E2;
    }

        .page-link:hover {
            color: #357ABD;
        }

    /* Search styling */
    #search-customer::placeholder {
        opacity: 0.7;
    }

    /* Sorting icons styling */
    .sort-controls {
        margin-left: 5px;
        display: inline-flex;
        flex-direction: column;
        vertical-align: middle;
        line-height: 0;
    }

    .sort-icon {
        cursor: pointer;
        font-size: 10px;
        color: #aaa;
        margin: -2px 0;
    }

        .sort-icon:hover, .sort-icon.active {
            color: #4A90E2;
        }

    .full-screen-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1050;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
    }

    .order-container {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        max-width: 900px;
        width: 100%;
        overflow: hidden;
    }

    .order-summary-header {
        background-color: #F5F7FA;
        border-bottom: 1px solid #E5E7EB;
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .order-summary-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333333;
            margin: 0;
        }

    .btn-close-modal {
        background-color: #E3342F;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
        transition: background-color 0.3s ease;
    }

        .btn-close-modal:hover {
            background-color: #C53030;
        }

    .order-details {
        padding: 2rem;
        background-color: #fff;
    }

        .order-details h4 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #333333;
            margin-bottom: 1.5rem;
        }

        .order-details .detail-item {
            margin-bottom: 1rem;
        }

            .order-details .detail-item label {
                font-size: 0.9rem;
                font-weight: 500;
                color: #6B7280;
                display: block;
                margin-bottom: 0.25rem;
            }

            .order-details .detail-item p {
                font-size: 1rem;
                color: #333333;
                margin: 0;
            }

        .order-details .items-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .order-details .items-list li {
                padding: 1rem 0;
                border-bottom: 1px solid #E5E7EB;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

                .order-details .items-list li:last-child {
                    border-bottom: none;
                }

            .order-details .items-list .item-name {
                font-size: 1rem;
                font-weight: 500;
                color: #333333;
            }

            .order-details .items-list .item-quantity {
                font-size: 0.9rem;
                color: #6B7280;
            }

            .order-details .items-list .item-price {
                font-size: 1rem;
                font-weight: 600;
                color: #38C172;
            }

    .total-row {
        background-color: #F5F7FA;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 1.25rem;
        font-weight: 600;
        color: #333333;
        border-radius: 8px;
        margin-top: 1rem;
    }

    .btn-confirm, .btn-cancel, .btn-confirm-cancel, .btn-keep {
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        color: white;
        padding: 0.75rem;
        transition: background-color 0.3s ease;
    }

    .btn-confirm, .btn-keep {
        background-color: #38C172;
    }

        .btn-confirm:hover, .btn-keep:hover {
            background-color: #2D995B;
        }

    .btn-cancel, .btn-confirm-cancel {
        background-color: #E3342F;
    }

        .btn-cancel:hover, .btn-confirm-cancel:hover {
            background-color: #C53030;
        }

    .cancellation-form {
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
    }

        .cancellation-form .form-label {
            font-size: 0.9rem;
            font-weight: 500;
            color: #333333;
        }

        .cancellation-form .form-control {
            border-radius: 8px;
            border: 1px solid #E5E7EB;
            resize: none;
        }

        .cancellation-form .text-danger {
            font-size: 0.85rem;
        }

    /* Responsive styles */
    @@media (max-width: 991.98px) {
        .order-container

    {
        max-width: calc(100% - 2rem);
    }

    }

    @@media (max-width: 767.98px) {
        h1

    {
        font-size: 1.75rem;
    }

    .order-summary-header {
        padding: 1rem;
    }

        .order-summary-header h3 {
            font-size: 1.25rem;
        }

    .order-details {
        padding: 1rem;
    }

    .btn-close-modal {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    .total-row {
        font-size: 1rem;
    }

    .btn-confirm, .btn-cancel, .btn-confirm-cancel, .btn-keep {
        font-size: 0.9rem;
        padding: 0.5rem;
    }

    .pagination .page-link {
        padding: 0.375rem 0.5rem;
    }

    .pagination .page-item:not(.active):not(:first-child):not(:last-child) {
        display: none;
    }

    .pagination .page-item.active {
        display: block;
    }

    .row.mb-4 {
        margin-bottom: 1rem !important;
    }

    .col-md-6:first-child {
        margin-bottom: 0.5rem;
    }

    .d-flex.justify-content-end {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    }

    @@media (max-width: 575.98px) {
        .full-screen-overlay

    {
        padding: 0;
    }

    .order-container {
        border-radius: 0;
        max-width: 100%;
        border: none;
    }

    #status-filter {
        flex-grow: 1;
        max-width: none;
    }

    }
</style>

<script>
    // Format number with dots as thousand separators
    function formatNumber(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    // Dữ liệu thực tế từ ViewModel
    const orders = [
    @foreach (var bill in bills)
    {
        var customer = customers.FirstOrDefault(c => c.UserID == bill.UserID);
        var billDetailItems = billDetails.Where(bd => bd.BillID == bill.BillID).Select(bd => new
        {
            ProductID = bd.ProductID,
            Quantity = bd.Quantity,
            Price = bd.Price
        }).ToList();
        var statusText = "";
        var statusColor = "";
        switch ((int)bill.Status)
        {
            case 0:
                statusText = "Processing";
                statusColor = "#FF9800"; // Orange
                break;
            case 1:
                statusText = "Confirmed";
                statusColor = "#80B500"; // Main green
                break;
            case 2:
                statusText = "Canceled";
                statusColor = "#d32f2f"; // Red
                break;
            case 3:
                statusText = "Received";
                statusColor = "#4CAF50"; // Green
                break;
            default:
                statusText = "Unknown";
                statusColor = "#6c757d"; // Gray
                break;
        }
        <text>
                                    {
                                        id: "@bill.BillID",
                                        customerName: "@(customer != null ? customer.Name : "Unknown")",
                                        phoneNumber: "@(customer != null ? customer.Phone : "N/A")",
                                        email: "@(customer != null ? customer.Email : "N/A")",
                                        status: "@statusText",
                                        statusColor: "@statusColor",
                                        total: @bill.TotalPrice,
                                        address: "@Html.Raw(bill.Address ?? customer?.Address ?? "N/A")",
                                        orderDate: "@bill.Date.ToString("yyyy-MM-dd")",
                                        paymentDate: "@bill.Date.ToString("yyyy-MM-dd")",
                                        paymentStatus: "@(bill.Status == PBL3_HK4.Entity.BillStatus.Cancelled ? "Refunded" : "Paid")",
                                        items: [
            @foreach (var item in billDetailItems)
            {
                var product = products.FirstOrDefault(p => p.ProductID == item.ProductID);
                <text>
                                                                        {
                                                                            name: "@(product != null ? product.ProductName : "Unknown")",
                                                                            quantity: @(item.Quantity ?? 0),
                                                                            price: @(item.Price ?? 0)
                                                                        },
                </text>
            }
                                        ]
                                    },
        </text>
    }
    ];

    // Pagination variables
    let currentPage = 1;
    let itemsPerPage = 10;
    let searchTerm = '';
    let selectedStatus = '';
    let filteredOrders = [...orders];
    let currentSortField = '';
    let currentSortDirection = '';

    // Adjust items per page based on screen size
    function adjustItemsPerPage() {
        if (window.innerWidth <= 576) {
            itemsPerPage = 5;
        } else if (window.innerWidth <= 992) {
            itemsPerPage = 8;
        } else {
            itemsPerPage = 10;
        }
        renderOrderTable(filteredOrders, currentPage);
    }

    // Format date for display
    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        // Parse the date and format it as dd-mm-yyyy
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}-${month}-${year}`;
    }

    // Function for searching orders
    function searchOrders() {
        searchTerm = document.getElementById('search-customer').value.trim().toLowerCase();
        currentPage = 1;
        applyFilters();
    }

    // Function to apply status filter
    function applyStatusFilter() {
        selectedStatus = document.getElementById('status-filter').value;
        currentPage = 1;
        applyFilters();
    }

    // Apply all filters together
    function applyFilters() {
        filteredOrders = [...orders];

        // Apply search by customer name
        if (searchTerm) {
            filteredOrders = filteredOrders.filter(order =>
                order.customerName.toLowerCase().includes(searchTerm)
            );
        }

        // Apply status filter
        if (selectedStatus) {
            filteredOrders = filteredOrders.filter(order =>
                order.status === selectedStatus
            );
        }

        // Apply current sort if any
        if (currentSortField && currentSortDirection) {
            sortOrders(currentSortField, currentSortDirection, false);
        } else {
            renderOrderTable(filteredOrders, currentPage);
        }
    }

    // Function to sort orders
    function sortOrders(field, direction, resetPage = true) {
        // Update active sort icon
        document.querySelectorAll('.sort-icon').forEach(icon => {
            if (icon.dataset.field === field && icon.dataset.direction === direction) {
                icon.classList.add('active');
            } else {
                icon.classList.remove('active');
            }
        });

        // Store current sort
        currentSortField = field;
        currentSortDirection = direction;

        // If resetPage is true, go back to first page
        if (resetPage) {
            currentPage = 1;
        }

        // Sort the filtered orders
        filteredOrders.sort((a, b) => {
            let valueA, valueB;

            if (field === 'orderDate') {
                valueA = new Date(a[field]);
                valueB = new Date(b[field]);
            } else {
                valueA = a[field].toLowerCase();
                valueB = b[field].toLowerCase();
            }

            if (direction === 'asc') {
                if (valueA < valueB) return -1;
                if (valueA > valueB) return 1;
                return 0;
            } else {
                if (valueA > valueB) return -1;
                if (valueA < valueB) return 1;
                return 0;
            }
        });

        renderOrderTable(filteredOrders, currentPage);
    }

    // Function to clear filters
    function clearFilters() {
        document.getElementById('search-customer').value = '';
        document.getElementById('status-filter').value = '';
        searchTerm = '';
        selectedStatus = '';
        currentPage = 1;
        currentSortField = '';
        currentSortDirection = '';
        filteredOrders = [...orders];

        // Reset all sort icons
        document.querySelectorAll('.sort-icon').forEach(icon => {
            icon.classList.remove('active');
        });

        renderOrderTable(filteredOrders, currentPage);
    }

    // Render table data
    function renderOrderTable(data, page = 1) {
        const tbody = document.querySelector('#order-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        // Check if current page is valid after items per page change
        if (page > totalPages && totalPages > 0) {
            currentPage = totalPages;
            renderOrderTable(data, totalPages);
            return;
        }

        if (paginatedData.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center py-4">
                        <div class="alert alert-info mb-0">
                            No orders found matching your criteria. Try adjusting your filters.
                        </div>
                    </td>
                </tr>
            `;
        } else {
            paginatedData.forEach(order => {
                const row = document.createElement('tr');

                // Check if mobile view
                const isMobile = window.innerWidth <= 767.98;
                if (isMobile) {
                    row.innerHTML = `
                        <td>
                            ${order.customerName}
                            <div class="small text-muted d-md-none">
                                ${order.phoneNumber}
                            </div>
                        </td>
                        <td>
                            <span class="badge ${getBadgeClass(order.status)}">${order.status}</span>
                        </td>
                        <td>${formatDate(order.orderDate)}</td>
                        <td>${formatNumber(order.total)}₫</td>
                        <td>
                            <button class="btn btn-sm btn-link text-dark" onclick="viewOrder('${order.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    `;
                } else {
                    row.innerHTML = `
                        <td>${order.customerName}</td>
                        <td class="d-none d-md-table-cell">${order.phoneNumber}</td>
                        <td class="d-none d-md-table-cell">${order.email}</td>
                        <td>
                            <span class="badge ${getBadgeClass(order.status)}">${order.status}</span>
                        </td>
                        <td>${formatDate(order.orderDate)}</td>
                        <td>${formatNumber(order.total)}₫</td>
                        <td>
                            <button class="btn btn-sm btn-link text-dark" onclick="viewOrder('${order.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    `;
                }
                tbody.appendChild(row);
            });
        }

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Get appropriate badge class for status
    function getBadgeClass(status) {
        switch(status) {
            case 'Processing': return 'bg-warning text-dark';
            case 'Confirmed': return 'bg-success';
            case 'Canceled': return 'bg-danger';
            case 'Received': return 'bg-info';
            default: return 'bg-secondary';
        }
    }

    // Render pagination
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        // Determine visible pages based on screen size
        let maxVisiblePages = 5; // Desktop default
        const isMobile = window.innerWidth <= 767.98;
        const isTablet = window.innerWidth <= 991.98 && window.innerWidth > 767.98;

        if (isMobile) {
            maxVisiblePages = 1;
        } else if (isTablet) {
            maxVisiblePages = 3;
        }

        const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // First page (if not in range)
        if (startPage > 1) {
            const firstPageLi = document.createElement('li');
            firstPageLi.className = 'page-item';
            firstPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(1)">1</a>`;
            pagination.appendChild(firstPageLi);

            // Ellipsis if needed
            if (startPage > 2) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        // Last page (if not in range)
        if (endPage < totalPages) {
            // Ellipsis if needed
            if (endPage < totalPages - 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }

            const lastPageLi = document.createElement('li');
            lastPageLi.className = 'page-item';
            lastPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${totalPages})">${totalPages}</a>`;
            pagination.appendChild(lastPageLi);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(filteredOrders.length / itemsPerPage)) return;
        currentPage = page;
        renderOrderTable(filteredOrders, page);
    }

    // View order
    function viewOrder(id) {
        const order = orders.find(o => o.id === id);
        if (!order) return;

        // Check if mobile view
        const isMobile = window.innerWidth <= 767.98;

        const overlay = document.createElement('div');
        overlay.className = 'full-screen-overlay';

        const container = document.createElement('div');
        container.className = 'order-container';

        container.innerHTML = `
            <div class="order-summary-header">
                <h3>Order Details</h3>
                <button class="btn btn-close-modal">
                    <i class="bi bi-x-lg me-1"></i> Close
                </button>
            </div>
            <div class="order-details">
                <!-- Hidden ID field -->
                <input type="hidden" id="order-id" value="${order.id}">

                <div class="row">
                    <div class="col-md-6 mb-4 mb-md-0">
                        <h4>Shipping Information</h4>
                        <div class="detail-item">
                            <label>Name</label>
                            <p>${order.customerName}</p>
                        </div>
                        <div class="detail-item">
                            <label>Phone</label>
                            <p>${order.phoneNumber}</p>
                        </div>
                        <div class="detail-item">
                            <label>Address</label>
                            <p>${order.address}</p>
                        </div>
                        <div class="detail-item">
                            <label>Order Date</label>
                            <p>${formatDate(order.orderDate)}</p>
                        </div>
                        <div class="detail-item">
                            <label>Payment Date</label>
                            <p>${formatDate(order.paymentDate)}</p>
                        </div>
                        <div class="detail-item">
                            <label>Payment Status</label>
                            <p>${order.paymentStatus}</p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h4>Order Items</h4>
                        <ul class="items-list">
                            ${order.items.map(item => `
                                <li>
                                    <div>
                                        <span class="item-name">${item.name}</span>
                                        <span class="item-quantity">Qty: ${item.quantity}</span>
                                    </div>
                                    <span class="item-price">${formatNumber(item.price)}₫</span>
                                </li>
                            `).join('')}
                        </ul>
                        <div class="total-row">
                            <span>Total</span>
                            <span>${formatNumber(order.total)}₫</span>
                        </div>
                        <div class="mt-3">
                            <p>Status: <span style="color: ${order.statusColor};">${order.status}</span></p>
                        </div>
                        <div id="actionButtonsContainer" style="${order.status !== 'Processing' ? 'display: none;' : ''}">
                            <div id="actionButtons" class="d-grid gap-3 mt-4">
                                <form id="confirmForm" method="post" action="/Admin/ConfirmOrder" onsubmit="handleFormSubmit(event)">
    @Html.AntiForgeryToken()
                                    <input type="hidden" name="billId" value="${order.id}" />
                                    <button type="submit" class="btn btn-confirm py-2 w-100">Confirm Order</button>
                                </form>
                                <button id="cancelButton" class="btn btn-cancel py-2 w-100">Cancel Order</button>
                            </div>
                            <div id="cancellationForm" class="cancellation-form d-none">
                                <form id="cancelForm" method="post" action="/Admin/CancelOrder" onsubmit="return handleCancelFormSubmit(event)">
    @Html.AntiForgeryToken()
                                    <input type="hidden" name="billId" value="${order.id}" />
                                    <div class="mb-3">
                                        <label for="cancellationReason" class="form-label">Reason for Cancellation</label>
                                        <textarea id="cancellationReason" name="reason" class="form-control" rows="3"></textarea>
                                        <div id="cancellationError" class="text-danger mt-2 d-none">Please provide a reason for cancellation.</div>
                                    </div>
                                    <div class="d-grid gap-2 ${isMobile ? '' : 'd-md-flex'}">
                                        <button type="submit" class="btn btn-confirm-cancel py-2 flex-grow-1">Confirm Cancellation</button>
                                        <button type="button" id="keepOrderBtn" class="btn btn-keep py-2 flex-grow-1">Keep Order</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        // Get DOM elements
        const actionButtons = container.querySelector('#actionButtons');
        const cancelButton = container.querySelector('#cancelButton');
        const cancellationForm = container.querySelector('#cancellationForm');
        const cancellationReason = container.querySelector('#cancellationReason');
        const cancellationError = container.querySelector('#cancellationError');
        const keepOrderBtn = container.querySelector('#keepOrderBtn');
        const closeBtn = container.querySelector('.btn-close-modal');

        // Handle Close button
        closeBtn.addEventListener('click', () => document.body.removeChild(overlay));

        if (order.status !== 'Processing') return;

        // Add input event to hide error when user starts typing
        cancellationReason.addEventListener('input', function() {
            if (cancellationReason.value.trim() !== '') {
                cancellationError.classList.add('d-none');
            }
        });

        // Handle Cancel button click
        cancelButton.addEventListener('click', function() {
            actionButtons.classList.add('d-none');
            cancellationForm.classList.remove('d-none');
        });

        // Handle "Keep Order" button click
        keepOrderBtn.addEventListener('click', function() {
            cancellationError.classList.add('d-none');
            cancellationForm.classList.add('d-none');
            actionButtons.classList.remove('d-none');
        });
    }

    // Handle form submission and reload page
    function handleFormSubmit(event) {
        event.preventDefault();
        const form = event.target;

        fetch(form.action, {
            method: 'POST',
            body: new FormData(form),
            headers: {
                'Accept': 'application/json'
            }
        })
        .finally(() => {
            window.location.reload();
        });

        return false;
    }

    // Handle cancel form submission with reason validation and reload page
    function handleCancelFormSubmit(event) {
        event.preventDefault();
        const form = event.target;
        const reason = form.querySelector('#cancellationReason').value.trim();
        const cancellationError = form.querySelector('#cancellationError');

        if (!reason) {
            cancellationError.classList.remove('d-none');
            return false;
        }

        fetch(form.action, {
            method: 'POST',
            body: new FormData(form),
            headers: {
                'Accept': 'application/json'
            }
        })
        .finally(() => {
            window.location.reload();
        });

        return false;
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        adjustItemsPerPage();
        renderOrderTable(orders);

        // Setup search functionality
        const searchInput = document.getElementById('search-customer');
        const searchBtn = document.getElementById('search-btn');
        const statusFilter = document.getElementById('status-filter');
        const clearFiltersBtn = document.getElementById('clear-filters');

        // Search on button click
        searchBtn.addEventListener('click', searchOrders);

        // Search on Enter key press
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                searchOrders();
            }
        });

        // Status filter change
        statusFilter.addEventListener('change', applyStatusFilter);

        // Clear filters button
        clearFiltersBtn.addEventListener('click', clearFilters);

        // Setup sorting functionality
        document.querySelectorAll('.sort-icon').forEach(icon => {
            icon.addEventListener('click', function() {
                const field = this.dataset.field;
                const direction = this.dataset.direction;
                sortOrders(field, direction);
            });
        });

        // Listen for window resize
        window.addEventListener('resize', function() {
            adjustItemsPerPage();
        });
    });
</script>