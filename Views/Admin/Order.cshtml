@{
    ViewData["Title"] = "Order Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="order-content" class="content-section active">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="fs-2 fs-md-1 mb-0">Order Management</h1>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="order-table">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Customer Name</th>
                    <th class="d-none d-md-table-cell">Phone Number</th>
                    <th class="d-none d-md-table-cell">Email</th>
                    <th>Status</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dữ liệu sẽ được thêm bằng JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center flex-wrap">
            <!-- Phân trang sẽ được thêm bằng JavaScript -->
        </ul>
    </nav>
</div>

<style>
    .pagination {
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: #2E8B57;
        border-color: #2E8B57;
    }

    .page-link {
        color: #2E8B57;
    }

        .page-link:hover {
            color: #1e7d45;
        }

    .full-screen-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: white;
        z-index: 1050;
        overflow-y: auto;
    }

    .order-container {
        border-radius: 20px;
        overflow: hidden;
        border: 1px solid #dee2e6;
        margin: 0 auto;
        max-width: 1200px;
    }

    .order-summary-header {
        background-color: #F0F7F0;
        border-bottom: 1px solid #dee2e6;
    }

    .order-status {
        font-weight: bold;
        color: white;
        border-radius: 10px;
        font-size: 12px;
        text-align: center;
        padding: 8px;
    }

    .list-group-item {
        border: none;
        padding: 15px;
    }

    .total-row {
        background-color: #2E8B57;
        color: white;
        font-size: 24px;
        padding: 10px 15px;
    }

    .btn-confirm, .btn-cancel, .btn-confirm-cancel, .btn-keep {
        border-radius: 10px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        padding: 10px;
    }

    .btn-confirm, .btn-keep {
        background-color: #2E8B57;
    }

    .btn-cancel, .btn-confirm-cancel {
        background-color: #E76F51;
    }

    .btn-close-modal {
        background-color: transparent;
        border: 2px solid #dc3545;
        color: #dc3545;
        border-radius: 10px;
        font-size: 16px;
        font-weight: bold;
        padding: 8px 20px;
    }

        .btn-close-modal:hover {
            background-color: #dc3545;
            color: white;
        }

    .form-floating label {
        color: #2E8B57;
    }

    .form-control:disabled {
        background-color: #f8f9fa;
    }

    .list-group-flush {
        border-radius: 10px;
        overflow: hidden;
    }

    .cancellation-form {
        border: 1px solid #dee2e6;
        border-radius: 10px;
    }

    /* Responsive styles */
    @@media (max-width: 991.98px) {
        #order-table th, #order-table td

    {
        padding: 0.5rem;
    }

    .order-container {
        margin: 0.5rem;
        max-width: calc(100% - 1rem);
    }

    .btn-close-modal {
        font-size: 14px;
        padding: 6px 15px;
    }

    }

    @@media (max-width: 767.98px) {
        h1

    {
        font-size: 1.75rem;
    }

    .order-summary-header {
        padding: 0.75rem !important;
    }

        .order-summary-header h3 {
            font-size: 1.25rem;
        }

    .btn-close-modal {
        padding: 5px 10px;
        font-size: 12px;
    }

    .order-status {
        font-size: 10px;
        padding: 6px;
    }

    .total-row {
        font-size: 18px;
    }

    .btn-confirm, .btn-cancel, .btn-confirm-cancel, .btn-keep {
        font-size: 14px;
    }

    /* Pagination for mobile */
    .pagination .page-link {
        padding: 0.375rem 0.5rem;
    }

    .pagination .page-item:not(.active):not(:first-child):not(:last-child) {
        display: none;
    }

    .pagination .page-item.active {
        display: block;
    }

    }

    @@media (max-width: 575.98px) {
        .container

    {
        padding: 0;
    }

    .full-screen-overlay {
        padding: 0;
    }

    .order-container {
        border-radius: 0;
        margin: 0;
        max-width: 100%;
        border-left: none;
        border-right: none;
    }

    .row {
        margin: 0 !important;
    }

    .col-md-6 {
        padding: 0.75rem !important;
    }

    .form-floating {
        margin-bottom: 0.75rem !important;
    }

    }
</style>

<script>
    // Sample order data
    const orders = [
        {
            id: 1,
            customerName: "John Doe",
            phoneNumber: "123-456-7890",
            email: "john.doe@example.com",
            status: "Processing",
            total: 45.50,
            address: "123 Main St, City",
            orderDate: "2025-04-01",
            shippingDate: "2025-04-05",
            paymentDate: "2025-04-01",
            paymentStatus: "Paid",
            items: [
                { name: "Apple", quantity: 5, price: 2.5 },
                { name: "Milk", quantity: 2, price: 3.0 }
            ]
        },
        {
            id: 2,
            customerName: "Jane Smith",
            phoneNumber: "987-654-3210",
            email: "jane.smith@example.com",
            status: "Confirmed",
            total: 32.80,
            address: "456 Oak Ave, Town",
            orderDate: "2025-04-02",
            shippingDate: "2025-04-06",
            paymentDate: "2025-04-02",
            paymentStatus: "Paid",
            items: [
                { name: "Orange", quantity: 10, price: 1.8 },
                { name: "Cheese", quantity: 1, price: 5.0 }
            ]
        },
        {
            id: 3,
            customerName: "Alice Johnson",
            phoneNumber: "555-123-4567",
            email: "alice.j@example.com",
            status: "Canceled",
            total: 20.00,
            address: "789 Pine Rd, Village",
            orderDate: "2025-04-03",
            shippingDate: null,
            paymentDate: null,
            paymentStatus: "Pending",
            items: [
                { name: "Banana", quantity: 10, price: 2.0 }
            ]
        },
        // Add more sample orders
        ...Array.from({ length: 27 }, (_, i) => ({
            id: i + 4,
            customerName: `Customer ${i + 4}`,
            phoneNumber: `555-000-${i + 4}`.padStart(10, '0'),
            email: `customer${i + 4}@@example.com`,
            status: ["Processing", "Confirmed", "Canceled"][Math.floor(Math.random() * 3)],
            total: (Math.random() * 100 + 20).toFixed(2),
            address: `${i + 100} Street, City`,
            orderDate: `2025-04-${(i % 10 + 1).toString().padStart(2, '0')}`,
            shippingDate: Math.random() > 0.3 ? `2025-04-${(i % 10 + 5).toString().padStart(2, '0')}` : null,
            paymentDate: Math.random() > 0.3 ? `2025-04-${(i % 10 + 1).toString().padStart(2, '0')}` : null,
            paymentStatus: Math.random() > 0.3 ? "Paid" : "Pending",
            items: [
                { name: `Item ${i + 1}`, quantity: Math.floor(Math.random() * 5) + 1, price: (Math.random() * 10 + 1).toFixed(2) },
                { name: `Item ${i + 2}`, quantity: Math.floor(Math.random() * 3) + 1, price: (Math.random() * 10 + 1).toFixed(2) }
            ]
        }))
    ];

    // Pagination variables
    let currentPage = 1;
    let itemsPerPage = 10;

    // Adjust items per page based on screen size
    function adjustItemsPerPage() {
        if (window.innerWidth <= 576) {
            itemsPerPage = 5;
        } else if (window.innerWidth <= 992) {
            itemsPerPage = 8;
        } else {
            itemsPerPage = 10;
        }
        renderOrderTable(orders, currentPage);
    }

    // Format date for display
    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
        return new Date(dateString).toLocaleDateString('vi-VN', options);
    }

    // Render table data
    function renderOrderTable(data, page = 1) {
        const tbody = document.querySelector('#order-table tbody');
        const pagination = document.querySelector('.pagination');
        tbody.innerHTML = '';

        const totalPages = Math.ceil(data.length / itemsPerPage);
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, data.length);
        const paginatedData = data.slice(startIndex, endIndex);

        // Check if current page is valid after items per page change
        if (page > totalPages && totalPages > 0) {
            currentPage = totalPages;
            renderOrderTable(data, totalPages);
            return;
        }

        paginatedData.forEach(order => {
            const row = document.createElement('tr');

            // Check if mobile view
            const isMobile = window.innerWidth <= 767.98;
            if (isMobile) {
                row.innerHTML = `
                    <td>${order.id}</td>
                    <td>
                        ${order.customerName}
                        <div class="small text-muted d-md-none">
                            ${order.phoneNumber}
                        </div>
                    </td>
                    <td>
                        <span class="badge ${getBadgeClass(order.status)}">${order.status}</span>
                    </td>
                    <td>$${parseFloat(order.total).toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-link text-dark" onclick="viewOrder(${order.id})">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
            } else {
                row.innerHTML = `
                    <td>${order.id}</td>
                    <td>${order.customerName}</td>
                    <td class="d-none d-md-table-cell">${order.phoneNumber}</td>
                    <td class="d-none d-md-table-cell">${order.email}</td>
                    <td>
                        <span class="badge ${getBadgeClass(order.status)}">${order.status}</span>
                    </td>
                    <td>$${parseFloat(order.total).toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-link text-dark" onclick="viewOrder(${order.id})">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
            }
            tbody.appendChild(row);
        });

        if (data.length > itemsPerPage) {
            renderPagination(totalPages, page);
            pagination.style.display = 'flex';
        } else {
            pagination.style.display = 'none';
        }
    }

    // Get appropriate badge class for status
    function getBadgeClass(status) {
        switch(status) {
            case 'Processing': return 'bg-warning text-dark';
            case 'Confirmed': return 'bg-success';
            case 'Canceled': return 'bg-danger';
            default: return 'bg-secondary';
        }
    }

    // Render pagination
    function renderPagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage - 1})">«</a>`;
        pagination.appendChild(prevLi);

        // Determine visible pages based on screen size
        let maxVisiblePages = 5; // Desktop default
        const isMobile = window.innerWidth <= 767.98;
        const isTablet = window.innerWidth <= 991.98 && window.innerWidth > 767.98;

        if (isMobile) {
            maxVisiblePages = 1;
        } else if (isTablet) {
            maxVisiblePages = 3;
        }

        const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // First page (if not in range)
        if (startPage > 1) {
            const firstPageLi = document.createElement('li');
            firstPageLi.className = 'page-item';
            firstPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(1)">1</a>`;
            pagination.appendChild(firstPageLi);

            // Ellipsis if needed
            if (startPage > 2) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${i})">${i}</a>`;
            pagination.appendChild(pageLi);
        }

        // Last page (if not in range)
        if (endPage < totalPages) {
            // Ellipsis if needed
            if (endPage < totalPages - 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled d-none d-md-block';
                ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                pagination.appendChild(ellipsisLi);
            }

            const lastPageLi = document.createElement('li');
            lastPageLi.className = 'page-item';
            lastPageLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${totalPages})">${totalPages}</a>`;
            pagination.appendChild(lastPageLi);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); changePage(${currentPage + 1})">»</a>`;
        pagination.appendChild(nextLi);
    }

    // Change page
    function changePage(page) {
        if (page < 1 || page > Math.ceil(orders.length / itemsPerPage)) return;
        currentPage = page;
        renderOrderTable(orders, page);
    }

    // Show notification
    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.style.cssText = `position: fixed; bottom: 20px; right: 20px; padding: 12px 24px; border-radius: 4px; color: white; background-color: ${type === 'success' ? '#28a745' : '#dc3545'}; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1100; transition: all 0.3s ease; display: flex; align-items: center; gap: 10px;`;
        const icon = document.createElement('i');
        icon.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
        notification.appendChild(icon);
        notification.appendChild(document.createTextNode(message));
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => document.body.removeChild(notification), 300);
        }, 3000);
    }

    // View order
    function viewOrder(id) {
        const order = orders.find(o => o.id === id);
        if (!order) return;

        // Check if mobile view
        const isMobile = window.innerWidth <= 767.98;

        const overlay = document.createElement('div');
        overlay.className = 'full-screen-overlay';

        const container = document.createElement('div');
        container.className = 'order-container my-4 mx-auto';
        container.style.cssText = 'width: 100%; max-width: 1200px;';

        const statusColor = {
            'Processing': '#F4A261',
            'Confirmed': '#2E8B57',
            'Canceled': '#E76F51'
        };

        container.innerHTML = `
            <div class="border-bottom py-3 px-4 d-flex justify-content-between align-items-center order-summary-header">
                <h3 class="fw-bold mb-0 text-dark">Order Summary</h3>
                <button class="btn btn-close-modal px-4">
                    <i class="bi bi-arrow-left me-1"></i> CLOSE
                </button>
            </div>
            <div class="row mx-0 py-4">
                <div class="col-md-6 px-4">
                    <h4 class="fw-bold mb-4">Shipping Details</h4>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingOrderSummaryName" value="${order.customerName}" disabled>
                        <label for="floatingOrderSummaryName">Name</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingOrderSummaryPhone" value="${order.phoneNumber}" disabled>
                        <label for="floatingOrderSummaryPhone">Phone</label>
                    </div>
                    <div class="form-floating mb-3">
                        <textarea class="form-control" id="floatingOrderSummaryAddress" style="resize: none; height: 120px" disabled>${order.address}</textarea>
                        <label for="floatingOrderSummaryAddress">Address</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingOrderDate" value="${formatDate(order.orderDate)}" disabled>
                        <label for="floatingOrderDate">Order Date</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingShippingDate" value="${formatDate(order.shippingDate)}" disabled>
                        <label for="floatingShippingDate">Shipping Date</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingPaymentDate" value="${formatDate(order.paymentDate)}" disabled>
                        <label for="floatingPaymentDate">Payment Date</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingPaymentStatus" value="${order.paymentStatus}" disabled>
                        <label for="floatingPaymentStatus">Payment Status</label>
                    </div>
                </div>
                <div class="col-md-6 px-4">
                    <h4 class="fw-bold mb-4">Order Summary</h4>
                    <div id="orderStatusLabel" class="w-100 mb-3 py-2 px-3 order-status" style="background-color: ${statusColor[order.status]};">
                        ORDER STATUS - <span id="orderStatusText">${order.status.toUpperCase()}</span>
                    </div>
                    <ul class="list-group list-group-flush mb-4">
                        ${order.items.map(item => `
                            <li class="list-group-item py-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <p class="fw-medium mb-1">${item.name}</p>
                                        <p class="text-muted mb-0">Quantity: ${item.quantity}</p>
                                    </div>
                                    <p class="text-success fw-bold fs-5 mb-0">$${parseFloat(item.price).toFixed(2)}</p>
                                </div>
                            </li>
                        `).join('')}
                        <li class="list-group-item p-0">
                            <div class="d-flex justify-content-between align-items-center px-3 py-1 total-row">
                                <span class="fw-bold">Total:</span>
                                <span class="fw-bold">$${parseFloat(order.total).toFixed(2)}</span>
                            </div>
                        </li>
                    </ul>
                    <div id="actionButtonsContainer" style="${order.status !== 'Processing' ? 'display: none;' : ''}">
                        <div id="actionButtons" class="d-grid gap-3">
                            <button id="confirmButton" class="btn btn-confirm py-2 w-100">CONFIRMED</button>
                            <button id="cancelButton" class="btn btn-cancel py-2 w-100">CANCELED</button>
                        </div>
                        <div id="cancellationForm" class="cancellation-form p-3 mt-3 d-none">
                            <div class="mb-3">
                                <label for="cancellationReason" class="form-label fw-bold">Please provide a reason for cancellation...</label>
                                <textarea id="cancellationReason" class="form-control" rows="3" style="resize: none;"></textarea>
                                <div id="cancellationError" class="text-danger mt-2 d-none">Please provide a reason for cancellation.</div>
                            </div>
                            <div class="d-grid gap-2 ${isMobile ? '' : 'd-md-flex'}">
                                <button id="confirmCancellationBtn" class="btn btn-confirm-cancel py-2 flex-grow-1">Confirm cancellation</button>
                                <button id="keepOrderBtn" class="btn btn-keep py-2 flex-grow-1">Keep Order</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        // Get DOM elements
        const orderStatusLabel = container.querySelector('#orderStatusLabel');
        const orderStatusText = container.querySelector('#orderStatusText');
        const actionButtons = container.querySelector('#actionButtons');
        const confirmButton = container.querySelector('#confirmButton');
        const cancelButton = container.querySelector('#cancelButton');
        const cancellationForm = container.querySelector('#cancellationForm');
        const cancellationReason = container.querySelector('#cancellationReason');
        const cancellationError = container.querySelector('#cancellationError');
        const confirmCancellationBtn = container.querySelector('#confirmCancellationBtn');
        const keepOrderBtn = container.querySelector('#keepOrderBtn');
        const closeBtn = container.querySelector('.btn-close-modal');

        // Handle Close button
        closeBtn.addEventListener('click', () => document.body.removeChild(overlay));

        if (order.status !== 'Processing') return;

        // Add input event to hide error when user starts typing
        cancellationReason.addEventListener('input', function() {
            if (cancellationReason.value.trim() !== '') {
                cancellationError.classList.add('d-none');
            }
        });

        // Handle Confirm button click
        confirmButton.addEventListener('click', function() {
            const index = orders.findIndex(o => o.id === order.id);
            orders[index].status = 'Confirmed';
            orders[index].shippingDate = orders[index].shippingDate || '2025-04-15';
            orders[index].paymentDate = orders[index].paymentDate || '2025-04-12';
            orders[index].paymentStatus = 'Paid';
            renderOrderTable(orders, currentPage);
            showNotification('Order confirmed successfully!', 'success');
            document.body.removeChild(overlay);
        });

        // Handle Cancel button click
        cancelButton.addEventListener('click', function() {
            actionButtons.classList.add('d-none');
            cancellationForm.classList.remove('d-none');
        });

        // Handle "Keep Order" button click
        keepOrderBtn.addEventListener('click', function() {
            cancellationError.classList.add('d-none');
            cancellationForm.classList.add('d-none');
            actionButtons.classList.remove('d-none');
        });

        // Handle "Confirm Cancellation" button click
        confirmCancellationBtn.addEventListener('click', function() {
            const reason = cancellationReason.value.trim();
            if (reason === '') {
                cancellationError.classList.remove('d-none');
                return;
            }
            cancellationError.classList.add('d-none');
            const index = orders.findIndex(o => o.id === order.id);
            orders[index].status = 'Canceled';
            orders[index].shippingDate = null;
            orders[index].paymentDate = null;
            orders[index].paymentStatus = 'Pending';
            renderOrderTable(orders, currentPage);
            showNotification('Order canceled successfully!', 'success');
            document.body.removeChild(overlay);
            console.log('Order canceled with reason:', reason);
        });
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        adjustItemsPerPage();
        renderOrderTable(orders);

        // Listen for window resize
        window.addEventListener('resize', function() {
            adjustItemsPerPage();
        });
    });
</script>