@using PBL3_HK4.Entity
@model object

@{
    ViewData["Title"] = "View Profile";
    bool isCustomer = Model is Customer;

    // Cast the model based on its type
    Customer customer = null;
    Admin admin = null;

    if (isCustomer)
    {
        customer = Model as Customer;
    }
    else
    {
        admin = Model as Admin;
    }
}

<div class="row my-3">
    @* Empty *@
    <div class="col-1">
    </div>

    @* Your Information *@
    <div class="col-4">
        <div class="row mb-3">
            <div class="col-4 ">
                <img src="~/img/DangHuuLong.jpg" class="img-fluid" style="border-radius: 50%; border: 2px solid #000;" />
            </div>
            <div class="col-1"></div>
            <div class="col-7 d-flex flex-column justify-content-evenly">
                @if (isCustomer)
                {
                    <p style="color: #314401; font-size: 18px;">You have earned <span style="color: #FFC107;">20 ★</span> points!</p>
                    <a class="btn" style="background-color: #007BFF; color: white; border-radius: 20px; font-weight: bold; font-size: 12px;">
                        <i class="bi bi-info-circle"></i> How to earn points?
                    </a>
                }
                <a class="btn btn-danger" style="color: white; border-radius: 20px; font-weight: bold; font-size: 12px;" asp-controller="Account" asp-action="SignIn">
                    <i class="bi bi-box-arrow-right"></i> Log out
                </a>
            </div>
        </div>
        <div style="border: 1px solid; border-radius: 10px; background-color: #FFFFFF;" class="p-3" id="accountInfoContainer">
            <p class="text-center fw-bold mb-4" style="color: #314401; font-size: 20px">Account Information</p>

            <div id="formFieldsContainer" style="display: grid; grid-template-columns: 100px 1fr; gap: 10px; align-items: center; font-size: 14px; margin-bottom: 10px;">
                <!-- User Name -->
                <div>
                    <label>User Name:</label>
                </div>
                <div>
                    <input value="@(isCustomer ? customer.UserName : admin.UserName)" id="username" name="username" type="text" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px;" readonly>
                </div>

                <!-- New Password (hidden initially) -->
                <div id="newPasswordLabel" style="display: none;">
                    <label>New Password:</label>
                </div>
                <div id="newPasswordField" style="display: none;" class="password-container">
                    <div class="d-flex align-items-center">
                        <input type="password" class="w-100 form-field" id="newPassword" name="newPassword" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px;">
                        <i class="bi bi-eye-slash password-toggle" style="margin-left: -30px; cursor: pointer;" data-target="newPassword"></i>
                    </div>
                    <div id="passwordRequirements" class="mt-1" style="font-size: 11px; color: #dc3545; display: none;">
                        Password must be at least 8 characters and include uppercase, lowercase, numbers and special characters
                    </div>
                    <div id="passwordStrength" class="mt-1" style="display: none;">
                        <div class="progress" style="height: 5px;">
                            <div id="passwordStrengthBar" class="progress-bar" style="width: 0%;"></div>
                        </div>
                        <span id="passwordStrengthText" style="font-size: 11px;"></span>
                    </div>
                </div>

                <!-- Confirm Password (hidden initially) -->
                <div id="confirmPasswordLabel" style="display: none;">
                    <label>Confirm Password:</label>
                </div>
                <div id="confirmPasswordField" style="display: none;" class="password-container">
                    <div class="d-flex align-items-center">
                        <input type="password" class="w-100 form-field" id="confirmPassword" name="confirmPassword" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px;" disabled>
                        <i class="bi bi-eye-slash password-toggle" style="margin-left: -30px; cursor: pointer;" data-target="confirmPassword"></i>
                    </div>
                    <div id="passwordMatch" class="mt-1" style="font-size: 11px; display: none;"></div>
                </div>

                <!-- Name -->
                <div>
                    <label>Name:</label>
                </div>
                <div>
                    <input value="@(isCustomer ? customer.Name : admin.Name)" id="name" name="name" type="text" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px;" readonly>
                </div>

                <!-- Email -->
                <div>
                    <label>Email:</label>
                </div>
                <div>
                    <input value="@(isCustomer ? customer.Email : admin.Email)" id="email" name="email" type="email" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px;" readonly>
                </div>

                <!-- Gender -->
                <div>
                    <label>Gender:</label>
                </div>
                <div>
                    <select id="sex" name="sex" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px; background-color: #f5f5f5;" disabled>
                        @{
                            string sex = isCustomer ? customer.Sex : admin.Sex;
                        }

                        @if (sex == "Male")
                        {
                            <option value="Male" selected>Male</option>
                        }
                        else
                        {
                            <option value="Male">Male</option>
                        }

                        @if (sex == "Female")
                        {
                            <option value="Female" selected>Female</option>
                        }
                        else
                        {
                            <option value="Female">Female</option>
                        }

                        @if (sex == "Other")
                        {
                            <option value="Other" selected>Other</option>
                        }
                        else
                        {
                            <option value="Other">Other</option>
                        }
                    </select>
                </div>

                <!-- Phone -->
                <div>
                    <label>Phone:</label>
                </div>
                <div>
                    <input value="@(isCustomer ? customer.Phone : admin.Phone)" id="phone" name="Phone" type="tel" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px;" readonly>
                </div>

                <!-- Date -->
                <div>
                    <label>Date of Birth:</label>
                </div>
                <div>
                    <input value="@(isCustomer ? customer.DateOfBirth.ToString("yyyy-MM-dd") : admin.DateOfBirth.ToString("yyyy-MM-dd"))" id="dateOfBirth" name="dateOfBirth" type="date" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; font-size: 14px; background-color: #f5f5f5;" readonly>
                </div>

                <!-- Address - Only for Customer -->
                @if (isCustomer)
                {
                    <div>
                        <label>Address:</label>
                    </div>
                    <div>
                        <textarea id="address" name="address" class="w-100 form-field" style="padding: 6px; border-radius: 4px; border: 1px solid #ccc; min-height: 60px; font-size: 14px; background-color: #f5f5f5;" readonly>@customer.Address</textarea>
                    </div>
                }
            </div>

            <div id="editButtonContainer">
                <button id="editButton" class="btn w-100 fw-bold" style="padding: 8px 16px; background-color: #FFCC99 ; color: white; border-radius: 20px; letter-spacing: 2px;">
                    <i class="bi bi-pencil-square"></i> EDIT YOUR INFORMATION
                </button>
            </div>
        </div>
    </div>

    @* Empty *@
    <div class="col-3">
    </div>

    @if (isCustomer)
    {
        <div class="col-3">
            <p style="color: #6D4C41; font-size: 24px; font-weight: bold;">Your Discount Coupons</p>
            <div style="max-height: 85vh; overflow-y: auto; padding: 10px; margin-right: -5px;">
                <!-- Thêm padding và margin âm -->
                @for (int i = 0; i < 10; i++)
                {
                    <div style="border-radius: 20px; background-color: #F0E6DA; border: 1px solid #D2B48C; overflow: hidden; margin-top: 20px; box-shadow: -6px 6px 5px rgba(0, 0, 0, 0.2);">
                        <div style="border-bottom: 1px solid #D2B48C; padding-left: 12px;" class="py-1">
                            <p style="color: #C05621; font-size: 16px; font-weight: bold; margin: 0;">Spring Sale - 20% OFF</p>
                        </div>
                        <div style="border-bottom: 1px solid #D2B48C; color: #6D4C41; padding-left: 12px; font-size: 12px;" class="py-1">
                            <p style="margin: 0;">Description: Get 20% off on orders over $100</p>
                            <p style="margin: 0;">Validity: 01/03/2024 - 31/03/2024</p>
                        </div>
                        <a href="" style="background-color: #5A7D5A; color: white; display: block; width: 100%; margin: 0; padding: 0; text-align: center; text-decoration: none; font-weight: bold;">
                            Use Now
                        </a>
                    </div>
                }
            </div>
        </div>
    }

    @* Empty *@
    <div class="col-1">
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Store model type for JavaScript
        const isCustomer = @Json.Serialize(isCustomer);

        const editButtonContainer = document.getElementById('editButtonContainer');
        const formFields = document.querySelectorAll('.form-field');

        // Password related elements
        const newPasswordLabel = document.getElementById('newPasswordLabel');
        const newPasswordField = document.getElementById('newPasswordField');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordLabel = document.getElementById('confirmPasswordLabel');
        const confirmPasswordField = document.getElementById('confirmPasswordField');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const passwordRequirements = document.getElementById('passwordRequirements');
        const passwordStrength = document.getElementById('passwordStrength');
        const passwordStrengthBar = document.getElementById('passwordStrengthBar');
        const passwordStrengthText = document.getElementById('passwordStrengthText');
        const passwordMatch = document.getElementById('passwordMatch');

        let originalValues = {};
        let passwordValid = false;
        let passwordsMatch = false;

        // Setup password toggle icons
        const passwordToggles = document.querySelectorAll('.password-toggle');
        passwordToggles.forEach(toggle => {
            toggle.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const targetInput = document.getElementById(targetId);

                if (targetInput.type === 'password') {
                    targetInput.type = 'text';
                    this.classList.remove('bi-eye-slash');
                    this.classList.add('bi-eye');
                } else {
                    targetInput.type = 'password';
                    this.classList.remove('bi-eye');
                    this.classList.add('bi-eye-slash');
                }
            });
        });

        // Password validation
        newPasswordInput.addEventListener('input', function() {
            validatePassword();
            checkPasswordMatch();
        });

        confirmPasswordInput.addEventListener('input', function() {
            checkPasswordMatch();
        });

        function validatePassword() {
            const password = newPasswordInput.value;
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasSpecialChar = /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
            const isLongEnough = password.length >= 8;

            passwordValid = hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar && isLongEnough;

            // Enable/disable confirm password field based on new password validity
            confirmPasswordInput.disabled = !passwordValid;

            // Show password requirements only if password is not valid and not empty
            passwordRequirements.style.display = (password && !passwordValid) ? 'block' : 'none';

            // Show password strength
            passwordStrength.style.display = password ? 'block' : 'none';

            let strength = 0;
            if (hasUpperCase) strength += 20;
            if (hasLowerCase) strength += 20;
            if (hasNumbers) strength += 20;
            if (hasSpecialChar) strength += 20;
            if (isLongEnough) strength += 20;

            // Update strength bar
            passwordStrengthBar.style.width = strength + '%';

            // Color coding
            if (strength <= 40) {
                passwordStrengthBar.style.backgroundColor = '#dc3545'; // Red - weak
                passwordStrengthText.textContent = 'Weak password';
                passwordStrengthText.style.color = '#dc3545';
            } else if (strength <= 80) {
                passwordStrengthBar.style.backgroundColor = '#ffc107'; // Yellow - moderate
                passwordStrengthText.textContent = 'Moderate password';
                passwordStrengthText.style.color = '#ffc107';
            } else {
                passwordStrengthBar.style.backgroundColor = '#28a745'; // Green - strong
                passwordStrengthText.textContent = 'Strong password';
                passwordStrengthText.style.color = '#28a745';
            }

            return passwordValid;
        }

        function checkPasswordMatch() {
            if (!newPasswordInput.value) {
                passwordMatch.style.display = 'none';
                passwordsMatch = false;
                return false;
            }

            const doMatch = confirmPasswordInput.value === newPasswordInput.value;
            passwordsMatch = doMatch && confirmPasswordInput.value !== '';

            // Show match status only if confirm password has been entered
            if (confirmPasswordInput.value) {
                passwordMatch.style.display = 'block';

                if (doMatch) {
                    passwordMatch.textContent = 'Passwords match';
                    passwordMatch.style.color = '#28a745'; // Green
                } else {
                    passwordMatch.textContent = 'Passwords do not match';
                    passwordMatch.style.color = '#dc3545'; // Red
                }
            } else {
                passwordMatch.style.display = 'none';
            }

            return passwordsMatch;
        }

        // Initialize EDIT button
        setupEditButton();

        function setupEditButton() {
            const editButton = document.getElementById('editButton');
            editButton.addEventListener('click', handleEditClick);
        }

        function handleEditClick() {
            // Save original values
            formFields.forEach(field => {
                originalValues[field.name || field.id] = field.value;
            });

            // Enable editing of fields
            formFields.forEach(field => {
                // Keep username readonly
                if (field.id === 'username') {
                    return;
                }

                field.readOnly = false;
                if (field.tagName === 'SELECT') {
                    field.disabled = false;
                }
                field.style.backgroundColor = 'white';
            });

            // Show New Password and Confirm Password fields
            newPasswordLabel.style.display = 'block';
            newPasswordField.style.display = 'block';
            confirmPasswordLabel.style.display = 'block';
            confirmPasswordField.style.display = 'block';

            // Disable confirm password until valid new password is entered
            confirmPasswordInput.disabled = true;

            // Replace EDIT button with OK and CANCEL buttons
            editButtonContainer.innerHTML = `
                <div class="d-flex" style="gap: 10px;">
                    <button id="okButton" class="btn flex-grow-1 fw-bold" style="background-color: #80B500; color: white; border-radius: 20px; padding: 8px 0;">
                        OK
                    </button>
                    <button id="cancelButton" class="btn flex-grow-1 fw-bold" style="background-color: #dc3545; color: white; border-radius: 20px; padding: 8px 0;">
                        CANCEL
                    </button>
                </div>
            `;

            // Handle OK button
            document.getElementById('okButton').addEventListener('click', function() {
                // Validate password if entered
                if (newPasswordInput.value) {
                    if (!passwordValid) {
                        alert('Please ensure your password meets all requirements.');
                        return;
                    }

                    if (!passwordsMatch) {
                        alert('Please ensure your passwords match.');
                        return;
                    }
                }

                disableEditing();
                hidePasswordFields();
                showEditButton();

                // Here you would typically send the updated data to the server
                // Example: submitFormData();
            });

            // Handle CANCEL button
            document.getElementById('cancelButton').addEventListener('click', function() {
                formFields.forEach(field => {
                    const fieldId = field.name || field.id;
                    if (originalValues[fieldId] !== undefined) {
                        field.value = originalValues[fieldId];
                    }
                });
                disableEditing();
                hidePasswordFields();
                showEditButton();
            });
        }

        function disableEditing() {
            formFields.forEach(field => {
                field.readOnly = true;
                if (field.tagName === 'SELECT') {
                    field.disabled = true;
                }
                field.style.backgroundColor = '#f5f5f5';
            });
        }

        function hidePasswordFields() {
            // Hide New Password and Confirm Password fields
            newPasswordLabel.style.display = 'none';
            newPasswordField.style.display = 'none';
            confirmPasswordLabel.style.display = 'none';
            confirmPasswordField.style.display = 'none';

            // Reset password fields
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
            passwordStrength.style.display = 'none';
            passwordMatch.style.display = 'none';
            passwordValid = false;
            passwordsMatch = false;
        }

        function showEditButton() {
            editButtonContainer.innerHTML = `
                <button id="editButton" class="btn w-100 fw-bold" style="background-color: #FFCC99; color: white; border-radius: 20px; padding: 8px 0; letter-spacing: 2px;">
                    <i class="bi bi-pencil-square"></i> EDIT YOUR INFORMATION
                </button>
            `;

            // Re-attach event for new EDIT button
            setupEditButton();
        }
    });
</script>