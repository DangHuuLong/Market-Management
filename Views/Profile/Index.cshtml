@using PBL3_HK4.Entity
@{
    ViewData["Title"] = "View Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Customer customer = Model as Customer;
}

<div class="profile-container">
    <div class="container py-4">
        <div class="row justify-content-center">
            <!-- User Information Section -->
            <div class="col-lg-5 col-md-6 mb-4">
                <div class="card shadow-sm p-4">
                    <div class="text-center mb-4">
                        <img src="~/img/avatar.jpg" class="user-image mb-3" alt="User Avatar" />
                        <p class="user-points mb-0">You have earned <span class="text-warning">@customer.EarnedPoint ★</span> points!</p>
                    </div>
                    <div class="user-actions">
                        <a class="btn info-btn mb-2">
                            <i class="bi bi-info-circle me-2"></i>How to earn points?
                        </a>
                        <a class="btn logout-btn" asp-controller="Account" asp-action="SignOut">
                            <i class="bi bi-box-arrow-right me-2"></i>Log out
                        </a>
                    </div>
                </div>
            </div>

            <!-- Account Information Section -->
            <div class="col-lg-7 col-md-6 mb-4">
                <div class="card shadow-sm p-4">
                    <h3 class="account-title text-center mb-4">Account Information</h3>
                    <form id="profileForm" method="post" asp-controller="Profile" asp-action="UpdateProfile">
                        <input type="hidden" name="UserID" value="@customer.UserID" />
                        <div id="formFieldsContainer" class="form-grid">
                            <!-- User Name -->
                            <div class="form-group">
                                <label class="form-label">User Name</label>
                                <input value="@customer.UserName" id="username" name="UserName" type="text" class="form-control form-field" readonly>
                            </div>

                            <!-- New Password (hidden initially) -->
                            <div id="newPasswordField" class="form-group" style="display: none;">
                                <label class="form-label">New Password</label>
                                <div class="position-relative">
                                    <input type="password" class="form-control form-field" id="newPassword" name="NewPassword">
                                    <i class="bi bi-eye-slash password-toggle" data-target="newPassword"></i>
                                </div>
                                <div id="passwordRequirements" class="mt-1 text-danger small" style="display: none;">
                                    Password must be at least 8 characters and include uppercase, lowercase, numbers, and special characters
                                </div>
                                <div id="passwordStrength" class="mt-1" style="display: none;">
                                    <div class="progress" style="height: 5px;">
                                        <div id="passwordStrengthBar" class="progress-bar" style="width: 0%;"></div>
                                    </div>
                                    <span id="passwordStrengthText" class="small"></span>
                                </div>
                            </div>

                            <!-- Confirm Password (hidden initially) -->
                            <div id="confirmPasswordField" class="form-group" style="display: none;">
                                <label class="form-label">Confirm Password</label>
                                <div class="position-relative">
                                    <input type="password" class="form-control form-field" id="confirmPassword" name="ConfirmPassword" disabled>
                                    <i class="bi bi-eye-slash password-toggle" data-target="confirmPassword"></i>
                                </div>
                                <div id="passwordMatch" class="mt-1 small" style="display: none;"></div>
                            </div>

                            <!-- Name -->
                            <div class="form-group">
                                <label class="form-label">Name</label>
                                <input value="@customer.Name" id="name" name="Name" type="text" class="form-control form-field" readonly>
                            </div>

                            <!-- Email -->
                            <div class="form-group">
                                <label class="form-label">Email</label>
                                <input value="@customer.Email" id="email" name="Email" type="email" class="form-control form-field" readonly>
                            </div>

                            <!-- Gender -->
                            <div class="form-group">
                                <label class="form-label">Gender</label>
                                <select id="sex" name="Sex" class="form-control form-field" disabled>
                                    <option value="Male" @@(customer.Sex == "Male" ? "selected" : "")>Male</option>
                                    <option value="Female" @@(customer.Sex == "Female" ? "selected" : "")>Female</option>
                                    <option value="Other" @@(customer.Sex == "Other" ? "selected" : "")>Other</option>
                                </select>
                            </div>

                            <!-- Phone -->
                            <div class="form-group">
                                <label class="form-label">Phone</label>
                                <input value="@customer.Phone" id="phone" name="Phone" type="tel" class="form-control form-field" readonly>
                            </div>

                            <!-- Date of Birth -->
                            <div class="form-group">
                                <label class="form-label">Date of Birth</label>
                                <input value="@customer.DateOfBirth.ToString("yyyy-MM-dd")" id="dateOfBirth" name="DateOfBirth" type="date" class="form-control form-field" readonly>
                            </div>

                            <!-- Address -->
                            <div class="form-group">
                                <label class="form-label">Address</label>
                                <textarea id="address" name="Address" class="form-control form-field" readonly>@customer.Address</textarea>
                            </div>

                            <!-- EarnedPoint (hidden) -->
                            <input type="hidden" name="EarnedPoint" value="@customer.EarnedPoint" />
                        </div>

                        <div id="editButtonContainer" class="mt-4">
                            <button type="button" id="editButton" class="btn edit-btn w-100">
                                <i class="bi bi-pencil-square me-2"></i>Edit Your Information
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Scoped to .profile-container to prevent affecting header/footer */
    .profile-container {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
    }

    .profile-container .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 15px; /* Reduced from py-5 */
    }

    .profile-container .card {
        border: none;
        border-radius: 15px;
        background-color: #ffffff;
        transition: all 0.3s ease;
    }

    .profile-container .card:hover {
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    }

    /* User Image */
    .profile-container .user-image {
        border-radius: 50%;
        border: 3px solid #007bff;
        width: 120px;
        height: 120px;
        object-fit: cover;
    }

    .profile-container .user-points {
        font-size: 1.1rem;
        color: #343a40;
        font-weight: 500;
    }

    .profile-container .text-warning {
        color: #ffc107 !important;
    }

    /* Buttons */
    .profile-container .btn {
        border-radius: 25px;
        font-weight: 500;
        transition: all 0.3s ease;
        text-align: center;
    }

    .profile-container .btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .profile-container .info-btn {
        background-color: #007bff;
        color: white;
        font-size: 1rem;
        padding: 10px 0;
    }

    .profile-container .info-btn:hover {
        background-color: #0056b3;
        color: white;
    }

    .profile-container .logout-btn {
        background-color: #dc3545;
        color: white;
        font-size: 1rem;
        padding: 10px 0;
    }

    .profile-container .logout-btn:hover {
        background-color: #c82333;
        color: white;
    }

    .profile-container .user-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    /* Account Information */
    .profile-container .account-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #343a40;
    }

    .profile-container .form-grid {
        display: grid;
        gap: 15px;
    }

    .profile-container .form-group {
        margin-bottom: 15px;
    }

    .profile-container .form-label {
        font-weight: 500;
        color: #343a40;
        margin-bottom: 5px;
        display: block;
    }

    .profile-container .form-field {
        border-radius: 8px;
        border: 1px solid #ced4da;
        font-size: 0.9rem;
        padding: 10px;
        transition: all 0.3s ease;
    }

    .profile-container .form-field:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        outline: none;
    }

    .profile-container .form-field[readonly],
    .profile-container .form-field[disabled] {
        background-color: #f1f3f5;
        border-color: #dee2e6;
    }

    .profile-container textarea.form-field {
        min-height: 80px;
        resize: vertical;
    }

    .profile-container .edit-btn {
        background-color: #007bff;
        color: white;
        padding: 12px 0;
        font-size: 1rem;
    }

    .profile-container .edit-btn:hover {
        background-color: #0056b3;
        color: white;
    }

    .profile-container .action-btn {
        padding: 10px 0;
        font-size: 1rem;
    }

    .profile-container .ok-btn {
        background-color: #28a745;
        color: white;
    }

    .profile-container .ok-btn:hover {
        background-color: #218838;
        color: white;
    }

    .profile-container .cancel-btn {
        background-color: #dc3545;
        color: white;
    }

    .profile-container .cancel-btn:hover {
        background-color: #c82333;
        color: white;
    }

    /* Password Toggle */
    .profile-container .password-toggle {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #6c757d;
    }

    /* Responsive Styles */
    @@media (max-width: 991px) {
        .profile-container .row {
            flex-direction: column;
            align-items: stretch;
        }

        .profile-container .col-lg-5,
        .profile-container .col-lg-7 {
            width: 100%;
            max-width: none;
        }
    }

    @@media (max-width: 767px) {
        .profile-container .user-image {
            width: 100px;
            height: 100px;
        }

        .profile-container .user-actions {
            gap: 10px;
        }

        .profile-container .info-btn,
        .profile-container .logout-btn {
            padding: 10px 0;
        }

        .profile-container .form-grid {
            display: block;
        }

        .profile-container .form-group {
            margin-bottom: 15px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const profileForm = document.getElementById('profileForm');
        const editButtonContainer = document.getElementById('editButtonContainer');
        const formFields = document.querySelectorAll('.form-field');

        // Password related elements
        const newPasswordField = document.getElementById('newPasswordField');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordField = document.getElementById('confirmPasswordField');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const passwordRequirements = document.getElementById('passwordRequirements');
        const passwordStrength = document.getElementById('passwordStrength');
        const passwordStrengthBar = document.getElementById('passwordStrengthBar');
        const passwordStrengthText = document.getElementById('passwordStrengthText');
        const passwordMatch = document.getElementById('passwordMatch');

        let originalValues = {};
        let passwordValid = false;
        let passwordsMatch = false;

        // Setup password toggle icons
        const passwordToggles = document.querySelectorAll('.password-toggle');
        passwordToggles.forEach(toggle => {
            toggle.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const targetInput = document.getElementById(targetId);
                if (targetInput.type === 'password') {
                    targetInput.type = 'text';
                    this.classList.remove('bi-eye-slash');
                    this.classList.add('bi-eye');
                } else {
                    targetInput.type = 'password';
                    this.classList.remove('bi-eye');
                    this.classList.add('bi-eye-slash');
                }
            });
        });

        // Password validation
        newPasswordInput.addEventListener('input', function() {
            validatePassword();
            checkPasswordMatch();
        });

        confirmPasswordInput.addEventListener('input', function() {
            checkPasswordMatch();
        });

        function validatePassword() {
            const password = newPasswordInput.value;
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasSpecialChar = /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
            const isLongEnough = password.length >= 8;

            passwordValid = hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar && isLongEnough;

            confirmPasswordInput.disabled = !passwordValid;
            passwordRequirements.style.display = (password && !passwordValid) ? 'block' : 'none';
            passwordStrength.style.display = password ? 'block' : 'none';

            let strength = 0;
            if (hasUpperCase) strength += 20;
            if (hasLowerCase) strength += 20;
            if (hasNumbers) strength += 20;
            if (hasSpecialChar) strength += 20;
            if (isLongEnough) strength += 20;

            passwordStrengthBar.style.width = strength + '%';
            if (strength <= 40) {
                passwordStrengthBar.classList.remove('bg-warning', 'bg-success');
                passwordStrengthBar.classList.add('bg-danger');
                passwordStrengthText.textContent = 'Weak';
                passwordStrengthText.classList.remove('text-warning', 'text-success');
                passwordStrengthText.classList.add('text-danger');
            } else if (strength <= 80) {
                passwordStrengthBar.classList.remove('bg-danger', 'bg-success');
                passwordStrengthBar.classList.add('bg-warning');
                passwordStrengthText.textContent = 'Moderate';
                passwordStrengthText.classList.remove('text-danger', 'text-success');
                passwordStrengthText.classList.add('text-warning');
            } else {
                passwordStrengthBar.classList.remove('bg-danger', 'bg-warning');
                passwordStrengthBar.classList.add('bg-success');
                passwordStrengthText.textContent = 'Strong';
                passwordStrengthText.classList.remove('text-danger', 'text-warning');
                passwordStrengthText.classList.add('text-success');
            }

            return passwordValid;
        }

        function checkPasswordMatch() {
            if (!newPasswordInput.value) {
                passwordMatch.style.display = 'none';
                passwordsMatch = false;
                return false;
            }

            const doMatch = confirmPasswordInput.value === newPasswordInput.value;
            passwordsMatch = doMatch && confirmPasswordInput.value !== '';

            if (confirmPasswordInput.value) {
                passwordMatch.style.display = 'block';
                if (doMatch) {
                    passwordMatch.textContent = 'Passwords match';
                    passwordMatch.classList.remove('text-danger');
                    passwordMatch.classList.add('text-success');
                } else {
                    passwordMatch.textContent = 'Passwords do not match';
                    passwordMatch.classList.remove('text-success');
                    passwordMatch.classList.add('text-danger');
                }
            } else {
                passwordMatch.style.display = 'none';
            }

            return passwordsMatch;
        }

        // Initialize EDIT button
        setupEditButton();

        function setupEditButton() {
            const editButton = document.getElementById('editButton');
            editButton.addEventListener('click', handleEditClick);
        }

        function handleEditClick() {
            formFields.forEach(field => {
                originalValues[field.name || field.id] = field.value;
            });

            formFields.forEach(field => {
                if (field.id === 'username') return;
                field.readOnly = false;
                if (field.tagName === 'SELECT') field.disabled = false;
            });

            newPasswordField.style.display = 'block';
            confirmPasswordField.style.display = 'block';
            confirmPasswordInput.disabled = true;

            editButtonContainer.innerHTML = `
                <div class="d-flex gap-3">
                    <button type="button" id="okButton" class="btn flex-grow-1 action-btn ok-btn">OK</button>
                    <button type="button" id="cancelButton" class="btn flex-grow-1 action-btn cancel-btn">Cancel</button>
                </div>
            `;

            document.getElementById('okButton').addEventListener('click', function() {
                // Only validate password if user entered one
                if (newPasswordInput.value) {
                    if (!passwordValid) {
                        alert('Please ensure your password meets all requirements.');
                        return;
                    }
                    if (!passwordsMatch) {
                        alert('Please ensure your passwords match.');
                        return;
                    }
                }
                profileForm.submit();
            });

            document.getElementById('cancelButton').addEventListener('click', function() {
                formFields.forEach(field => {
                    const fieldId = field.name || field.id;
                    if (originalValues[fieldId] !== undefined) {
                        field.value = originalValues[fieldId];
                    }
                });
                disableEditing();
                hidePasswordFields();
                showEditButton();
            });
        }

        function disableEditing() {
            formFields.forEach(field => {
                field.readOnly = true;
                if (field.tagName === 'SELECT') field.disabled = true;
            });
        }

        function hidePasswordFields() {
            newPasswordField.style.display = 'none';
            confirmPasswordField.style.display = 'none';
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
            passwordStrength.style.display = 'none';
            passwordMatch.style.display = 'none';
            passwordValid = false;
            passwordsMatch = false;
        }

        function showEditButton() {
            editButtonContainer.innerHTML = `
                <button type="button" id="editButton" class="btn edit-btn w-100">
                    <i class="bi bi-pencil-square me-2"></i>Edit Your Information
                </button>
            `;
            setupEditButton();
        }
    });
</script>