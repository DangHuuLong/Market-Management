@using PBL3_HK4.Entity
@model Customer

@{
    ViewData["Title"] = "View Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Common styles */
    .profile-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .user-image {
        border-radius: 50%;
        border: 2px solid #000;
        width: 100%;
        max-width: 120px;
    }

    .user-points {
        color: #314401;
        font-size: 18px;
    }

    /* Kiểu dáng chung cho tất cả các nút */
    .btn {
        border-radius: 20px;
        font-weight: bold;
        transition: all 0.3s ease;
        text-align: center;
    }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

    /* Kiểu dáng cho các nút thông tin và đăng xuất */
    .info-btn {
        background-color: #007BFF;
        color: white;
        font-size: 14px;
        width: 100%;
        margin-bottom: 10px;
        padding: 5px 0;
    }

        .info-btn:hover {
            background-color: #0056b3;
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
            color: white;
        }

    .logout-btn {
        background-color: #dc3545;
        color: white;
        font-size: 14px;
        width: 100%;
        padding: 5px 0;
    }

        .logout-btn:hover {
            background-color: #bb2d3b;
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
            color: white;
        }

    .user-actions {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    .account-container {
        border: 1px solid;
        border-radius: 10px;
        background-color: #FFFFFF;
    }

    .account-title {
        color: #314401;
        font-size: 20px;
        font-weight: bold;
    }

    .form-field {
        padding: 6px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 14px;
    }

    .edit-btn {
        padding: 8px 16px;
        background-color: #FFCC99;
        color: white;
        letter-spacing: 2px;
        width: 100%;
    }

        .edit-btn:hover {
            background-color: #FFB366;
            color: white;
        }

    .action-btn {
        padding: 8px 0;
    }

    .ok-btn {
        background-color: #80B500;
        color: white;
    }

        .ok-btn:hover {
            background-color: #6B9900;
            color: white;
        }

    .cancel-btn {
        background-color: #dc3545;
        color: white;
    }

        .cancel-btn:hover {
            background-color: #bb2d3b;
            color: white;
        }

    .coupon-title {
        color: #6D4C41;
        font-size: 24px;
        font-weight: bold;
    }

    .coupon-container {
        max-height: 85vh;
        overflow-y: auto;
        padding: 10px;
    }

    .coupon-card {
        border-radius: 20px;
        background-color: #F0E6DA;
        border: 1px solid #D2B48C;
        overflow: hidden;
        margin-top: 20px;
        box-shadow: -6px 6px 5px rgba(0, 0, 0, 0.2);
    }

    .coupon-header {
        border-bottom: 1px solid #D2B48C;
        padding-left: 12px;
    }

    .coupon-title {
        color: #C05621;
        font-size: 16px;
        font-weight: bold;
        margin: 0;
    }

    .coupon-details {
        border-bottom: 1px solid #D2B48C;
        color: #6D4C41;
        padding-left: 12px;
        font-size: 12px;
    }

    .coupon-use-btn {
        background-color: #5A7D5A;
        color: white;
        display: block;
        width: 100%;
        margin: 0;
        padding: 0;
        text-align: center;
        text-decoration: none;
        font-weight: bold;
        transition: all 0.3s ease;
    }

        .coupon-use-btn:hover {
            background-color: #496749;
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(90, 125, 90, 0.3);
            text-decoration: none;
        }

    .password-container {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
    }

    /* Responsive styles */
    @@media (max-width: 991px) {
        .profile-layout {
            display: flex;
            flex-direction: column;
        }

        .user-info-section {
            order: 1;
            margin-bottom: 20px;
        }

        .account-info-section {
            order: 2;
            margin-bottom: 20px;
        }

        .coupon-section {
            order: 3;
        }

        .coupon-list {
            display: flex;
            overflow-x: auto;
            margin: 0 -15px;
            padding: 0 15px;
            flex-wrap: nowrap;
        }

        .coupon-card {
            min-width: 240px;
            margin-right: 15px;
        }

        .coupon-container {
            max-height: none;
            overflow-y: visible;
        }
    }

    @@media (max-width: 767px) {
        .user-image-container {
            width: 100px;
            margin: 0 auto 15px auto;
        }

        .user-info {
            text-align: center;
        }

        .user-actions {
            display: flex;
            flex-direction: column;
            width: 100%;
            gap: 10px;
            margin-bottom: 15px;
        }

        .info-btn, .logout-btn {
            width: 80%;
            padding: 10px 0;
        }

        .form-grid {
            display: block !important;
        }

            .form-grid > div {
                margin-bottom: 10px;
            }

        .form-label {
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }
    }
</style>

<div class="profile-container">
    <div class="row my-3 profile-layout">
        <!-- User info and account info sections -->
        <div class="col-lg-1 d-none d-lg-block">
            <!-- Empty space for large screens -->
        </div>

        <!-- User information with image and points -->
        <div class="col-lg-4 col-md-6 col-sm-12 user-info-section">
            <div class="row mb-3">
                <div class="col-md-4 col-sm-12 user-image-container">
                    <img src="~/img/DangHuuLong.jpg" class="user-image" />
                </div>
                <div class="col-md-1 d-none d-md-block"></div>
                <div class="col-md-7 col-sm-12 user-info">
                    <p class="user-points">You have earned <span style="color: #FFC107;">@Model.EarnedPoint ★</span> points!</p>
                    <div class="user-actions">
                        <a class="btn info-btn">
                            <i class="bi bi-info-circle"></i> How to earn points?
                        </a>
                        <a class="btn logout-btn" asp-controller="Account" asp-action="SignIn">
                            <i class="bi bi-box-arrow-right"></i> Log out
                        </a>
                    </div>
                </div>
            </div>

            <!-- Account information form - Bọc trong form tag -->
            <form id="profileForm" method="post" asp-controller="Profile" asp-action="UpdateProfile">
                <!-- Thêm hidden field để lưu ID của customer -->
                <input type="hidden" name="UserID" value="@Model.UserID" />
                
                <div class="account-container p-3" id="accountInfoContainer">
                    <p class="text-center account-title mb-4">Account Information</p>

                    <div id="formFieldsContainer" class="form-grid" style="display: grid; grid-template-columns: 100px 1fr; gap: 10px; align-items: center; font-size: 14px; margin-bottom: 10px;">
                        <!-- User Name -->
                        <div class="form-label">
                            <label>User Name:</label>
                        </div>
                        <div>
                            <input value="@Model.UserName" id="username" name="UserName" type="text" class="w-100 form-field" readonly>
                        </div>

                        <!-- New Password (hidden initially) -->
                        <div id="newPasswordLabel" class="form-label" style="display: none;">
                            <label>New Password:</label>
                        </div>
                        <div id="newPasswordField" style="display: none;">
                            <div class="position-relative">
                                <input type="password" class="w-100 form-field" id="newPassword" name="NewPassword">
                                <i class="bi bi-eye-slash password-toggle" data-target="newPassword"></i>
                            </div>
                            <div id="passwordRequirements" class="mt-1" style="font-size: 11px; color: #dc3545; display: none;">
                                Password must be at least 8 characters and include uppercase, lowercase, numbers and special characters
                            </div>
                            <div id="passwordStrength" class="mt-1" style="display: none;">
                                <div class="progress" style="height: 5px;">
                                    <div id="passwordStrengthBar" class="progress-bar" style="width: 0%;"></div>
                                </div>
                                <span id="passwordStrengthText" style="font-size: 11px;"></span>
                            </div>
                        </div>

                        <!-- Confirm Password (hidden initially) -->
                        <div id="confirmPasswordLabel" class="form-label" style="display: none;">
                            <label>Confirm Password:</label>
                        </div>
                        <div id="confirmPasswordField" style="display: none;">
                            <div class="position-relative">
                                <input type="password" class="w-100 form-field" id="confirmPassword" name="ConfirmPassword" disabled>
                                <i class="bi bi-eye-slash password-toggle" data-target="confirmPassword"></i>
                            </div>
                            <div id="passwordMatch" class="mt-1" style="font-size: 11px; display: none;"></div>
                        </div>

                        <!-- Name -->
                        <div class="form-label">
                            <label>Name:</label>
                        </div>
                        <div>
                            <input value="@Model.Name" id="name" name="Name" type="text" class="w-100 form-field" readonly>
                        </div>

                        <!-- Email -->
                        <div class="form-label">
                            <label>Email:</label>
                        </div>
                        <div>
                            <input value="@Model.Email" id="email" name="Email" type="email" class="w-100 form-field" readonly>
                        </div>

                        <!-- Gender -->
                        <div class="form-label">
                            <label>Gender:</label>
                        </div>
                        <div>
                            <select id="sex" name="Sex" class="w-100 form-field" style="background-color: #f5f5f5;" disabled>
                                <option value="Male" @@(Model.Sex=="Male" ? "selected" : "")>Male</option>
                                <option value="Female" @@(Model.Sex=="Female" ? "selected" : "")>Female</option>
                                <option value="Other" @@(Model.Sex=="Other" ? "selected" : "")>Other</option>
                            </select>
                        </div>

                        <!-- Phone -->
                        <div class="form-label">
                            <label>Phone:</label>
                        </div>
                        <div>
                            <input value="@Model.Phone" id="phone" name="Phone" type="tel" class="w-100 form-field" readonly>
                        </div>

                        <!-- Date -->
                        <div class="form-label">
                            <label>Date of Birth:</label>
                        </div>
                        <div>
                            <input value="@Model.DateOfBirth.ToString("yyyy-MM-dd")" id="dateOfBirth" name="DateOfBirth" type="date" class="w-100 form-field" style="background-color: #f5f5f5;" readonly>
                        </div>

                        <!-- Address -->
                        <div class="form-label">
                            <label>Address:</label>
                        </div>
                        <div>
                            <textarea id="address" name="Address" class="w-100 form-field" style="min-height: 60px; background-color: #f5f5f5;" readonly>@Model.Address</textarea>
                        </div>
                        
                        <!-- EarnedPoint (hidden) -->
                        <input type="hidden" name="EarnedPoint" value="@Model.EarnedPoint" />
                    </div>

                    <div id="editButtonContainer">
                        <button type="button" id="editButton" class="btn edit-btn">
                            <i class="bi bi-pencil-square"></i> EDIT YOUR INFORMATION
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Empty space column - shown on large screens only -->
        <div class="col-lg-3 d-none d-lg-block account-info-section">
            <!-- Empty space for desktop layout -->
        </div>

        <!-- Coupons section -->
        <div class="col-lg-3 col-md-6 col-sm-12 coupon-section">
            <p class="coupon-title">Your Discount Coupons</p>
            <div class="coupon-container coupon-list">
                @for (int i = 0; i < 10; i++)
                {
                    <div class="coupon-card">
                        <div class="coupon-header py-1">
                            <p class="coupon-title">Spring Sale - 20% OFF</p>
                        </div>
                        <div class="coupon-details py-1">
                            <p style="margin: 0;">Description: Get 20% off on orders over $100</p>
                            <p style="margin: 0;">Validity: 01/03/2024 - 31/03/2024</p>
                        </div>
                        <a href="" class="coupon-use-btn">
                            Use Now
                        </a>
                    </div>
                }
            </div>
        </div>

        <!-- Empty space for desktop layout -->
        <div class="col-lg-1 d-none d-lg-block">
            <!-- Empty space -->
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const profileForm = document.getElementById('profileForm');
        const editButtonContainer = document.getElementById('editButtonContainer');
        const formFields = document.querySelectorAll('.form-field');

        // Password related elements
        const newPasswordLabel = document.getElementById('newPasswordLabel');
        const newPasswordField = document.getElementById('newPasswordField');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordLabel = document.getElementById('confirmPasswordLabel');
        const confirmPasswordField = document.getElementById('confirmPasswordField');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const passwordRequirements = document.getElementById('passwordRequirements');
        const passwordStrength = document.getElementById('passwordStrength');
        const passwordStrengthBar = document.getElementById('passwordStrengthBar');
        const passwordStrengthText = document.getElementById('passwordStrengthText');
        const passwordMatch = document.getElementById('passwordMatch');

        let originalValues = {};
        let passwordValid = false;
        let passwordsMatch = false;

        // Setup password toggle icons
        const passwordToggles = document.querySelectorAll('.password-toggle');
        passwordToggles.forEach(toggle => {
            toggle.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const targetInput = document.getElementById(targetId);

                if (targetInput.type === 'password') {
                    targetInput.type = 'text';
                    this.classList.remove('bi-eye-slash');
                    this.classList.add('bi-eye');
                } else {
                    targetInput.type = 'password';
                    this.classList.remove('bi-eye');
                    this.classList.add('bi-eye-slash');
                }
            });
        });

        // Password validation
        newPasswordInput.addEventListener('input', function() {
            validatePassword();
            checkPasswordMatch();
        });

        confirmPasswordInput.addEventListener('input', function() {
            checkPasswordMatch();
        });

        function validatePassword() {
            const password = newPasswordInput.value;
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasSpecialChar = /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
            const isLongEnough = password.length >= 8;

            passwordValid = hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar && isLongEnough;

            // Enable/disable confirm password field based on new password validity
            confirmPasswordInput.disabled = !passwordValid;

            // Show password requirements only if password is not valid and not empty
            passwordRequirements.style.display = (password && !passwordValid) ? 'block' : 'none';

            // Show password strength
            passwordStrength.style.display = password ? 'block' : 'none';

            let strength = 0;
            if (hasUpperCase) strength += 20;
            if (hasLowerCase) strength += 20;
            if (hasNumbers) strength += 20;
            if (hasSpecialChar) strength += 20;
            if (isLongEnough) strength += 20;

            // Update strength bar
            passwordStrengthBar.style.width = strength + '%';

            // Color coding
            if (strength <= 40) {
                passwordStrengthBar.style.backgroundColor = '#dc3545'; // Red - weak
                passwordStrengthText.textContent = 'Weak password';
                passwordStrengthText.style.color = '#dc3545';
            } else if (strength <= 80) {
                passwordStrengthBar.style.backgroundColor = '#ffc107'; // Yellow - moderate
                passwordStrengthText.textContent = 'Moderate password';
                passwordStrengthText.style.color = '#ffc107';
            } else {
                passwordStrengthBar.style.backgroundColor = '#28a745'; // Green - strong
                passwordStrengthText.textContent = 'Strong password';
                passwordStrengthText.style.color = '#28a745';
            }

            return passwordValid;
        }

        function checkPasswordMatch() {
            if (!newPasswordInput.value) {
                passwordMatch.style.display = 'none';
                passwordsMatch = false;
                return false;
            }

            const doMatch = confirmPasswordInput.value === newPasswordInput.value;
            passwordsMatch = doMatch && confirmPasswordInput.value !== '';

            // Show match status only if confirm password has been entered
            if (confirmPasswordInput.value) {
                passwordMatch.style.display = 'block';

                if (doMatch) {
                    passwordMatch.textContent = 'Passwords match';
                    passwordMatch.style.color = '#28a745'; // Green
                } else {
                    passwordMatch.textContent = 'Passwords do not match';
                    passwordMatch.style.color = '#dc3545'; // Red
                }
            } else {
                passwordMatch.style.display = 'none';
            }

            return passwordsMatch;
        }

        // Initialize EDIT button
        setupEditButton();

        function setupEditButton() {
            const editButton = document.getElementById('editButton');
            editButton.addEventListener('click', handleEditClick);
        }

        function handleEditClick() {
            // Save original values
            formFields.forEach(field => {
                originalValues[field.name || field.id] = field.value;
            });

            // Enable editing of fields
            formFields.forEach(field => {
                // Keep username readonly
                if (field.id === 'username') {
                    return;
                }

                field.readOnly = false;
                if (field.tagName === 'SELECT') {
                    field.disabled = false;
                }
                field.style.backgroundColor = 'white';
            });

            // Show New Password and Confirm Password fields
            newPasswordLabel.style.display = 'block';
            newPasswordField.style.display = 'block';
            confirmPasswordLabel.style.display = 'block';
            confirmPasswordField.style.display = 'block';

            // Disable confirm password until valid new password is entered
            confirmPasswordInput.disabled = true;

            // Replace EDIT button with OK and CANCEL buttons
            editButtonContainer.innerHTML = `
                <div class="d-flex" style="gap: 10px;">
                    <button type="button" id="okButton" class="btn flex-grow-1 action-btn ok-btn">
                        OK
                    </button>
                    <button type="button" id="cancelButton" class="btn flex-grow-1 action-btn cancel-btn">
                        CANCEL
                    </button>
                </div>
            `;

            // Handle OK button
            document.getElementById('okButton').addEventListener('click', function() {
                // Kiểm tra nếu không nhập mật khẩu mới thì không cho submit
                if (!newPasswordInput.value) {
                    alert('Please enter a new password.');
                    return;
                }

                // Kiểm tra mật khẩu mới có hợp lệ hay không
                if (!passwordValid) {
                    alert('Please ensure your password meets all requirements.');
                    return;
                }

                // Kiểm tra mật khẩu xác nhận có khớp hay không
                if (!passwordsMatch) {
                    alert('Please ensure your passwords match.');
                    return;
                }

                // Submit form
                profileForm.submit();
            });

            // Handle CANCEL button
            document.getElementById('cancelButton').addEventListener('click', function() {
                formFields.forEach(field => {
                    const fieldId = field.name || field.id;
                    if (originalValues[fieldId] !== undefined) {
                        field.value = originalValues[fieldId];
                    }
                });
                disableEditing();
                hidePasswordFields();
                showEditButton();
            });
        }

        function disableEditing() {
            formFields.forEach(field => {
                field.readOnly = true;
                if (field.tagName === 'SELECT') {
                    field.disabled = true;
                }
                field.style.backgroundColor = '#f5f5f5';
            });
        }

        function hidePasswordFields() {
            // Hide New Password and Confirm Password fields
            newPasswordLabel.style.display = 'none';
            newPasswordField.style.display = 'none';
            confirmPasswordLabel.style.display = 'none';
            confirmPasswordField.style.display = 'none';

            // Reset password fields
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
            passwordStrength.style.display = 'none';
            passwordMatch.style.display = 'none';
            passwordValid = false;
            passwordsMatch = false;
        }

        function showEditButton() {
            editButtonContainer.innerHTML = `
                <button type="button" id="editButton" class="btn edit-btn">
                    <i class="bi bi-pencil-square"></i> EDIT YOUR INFORMATION
                </button>
            `;

            // Re-attach event for new EDIT button
            setupEditButton();
        }

        // Check if we're on mobile and adjust coupon display if necessary
        function adjustForMobile() {
            if (window.innerWidth <= 767) {
                // Any mobile-specific adjustments can go here
            }
        }

        // Run on load and on resize
        adjustForMobile();
        window.addEventListener('resize', adjustForMobile);
    });
</script>