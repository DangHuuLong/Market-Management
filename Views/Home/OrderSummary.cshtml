@using PBL3_HK4.Entity

@{
    ViewData["Title"] = "Place Order - Organic Grocery";
    Layout = null;
    OrderSummaryViewModel orderSummaryViewModel = Model as OrderSummaryViewModel;
    ShoppingCart shoppingCart = orderSummaryViewModel.ShoppingCart;
    IEnumerable<CartItem> cartItems = shoppingCart.Items;
    IEnumerable<Product> products = orderSummaryViewModel.Products;
    IEnumerable<Discount> discounts = orderSummaryViewModel.Discounts;
    Customer customer = orderSummaryViewModel.Customer;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2e7d32;
            --secondary-color: #f57c00;
            --accent-color: #80B500;
            --text-color: #333333;
            --light-bg: #f5f7fa;
            --border-radius: 12px;
            --box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Poppins', sans-serif;
            color: var(--text-color);
            line-height: 1.6;
        }

        .order-container {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            overflow: hidden;
            margin-top: 40px;
            margin-bottom: 40px;
        }

        .header-section {
            background-color: var(--primary-color);
            padding: 20px 30px;
        }

        h3, h4 {
            font-weight: 600;
        }

        .section-title {
            position: relative;
            margin-bottom: 25px;
            font-weight: 600;
            color: var(--primary-color);
        }

            .section-title:after {
                content: '';
                display: block;
                width: 50px;
                height: 3px;
                background-color: var(--secondary-color);
                margin-top: 8px;
            }

        .form-control, .form-select {
            border-radius: 8px;
            padding: 12px 15px;
            border: 1px solid #e0e0e0;
            font-size: 14px;
            transition: all 0.3s;
        }

            .form-control:focus, .form-select:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.2rem rgba(46, 125, 50, 0.15);
            }

        .form-floating > label {
            padding: 12px 15px;
        }

        .form-floating > .form-control {
            height: calc(3.5rem + 2px);
            line-height: 1.25;
        }

        .list-group-item {
            border-left: none;
            border-right: none;
            padding: 15px 20px;
        }

        .product-name {
            font-weight: 500;
            color: var(--text-color);
        }

        .product-quantity {
            font-size: 13px;
            color: #757575;
        }

        .product-price {
            font-weight: 600;
            color: var(--primary-color);
        }

        .total-row {
            background-color: var(--accent-color);
            color: white;
            padding: 12px 20px;
            font-size: 18px;
            font-weight: 600;
        }

        .discount-btn {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            padding: 12px;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.3s;
        }

            .discount-btn:hover {
                background-color: #e65100;
                color: white;
            }

        .payment-methods .form-check {
            transition: all 0.3s;
            border-radius: 10px;
            padding: 16px;
            margin-bottom: 15px;
            border: 1px solid #e0e0e0;
        }

            .payment-methods .form-check:hover {
                background-color: rgba(46, 125, 50, 0.05);
                border-color: var(--primary-color);
            }

        .payment-methods .form-check-input:checked + .form-check-label {
            font-weight: 600;
            color: var(--primary-color);
        }

        .payment-details {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
        }

        .payment-icon {
            font-size: 1.2rem;
            color: var(--primary-color);
        }

        .complete-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 25px;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s;
        }

            .complete-btn:hover {
                background-color: #1b5e20;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

        .back-btn {
            background-color: white;
            color: #d32f2f;
            border: 1px solid #d32f2f;
            transition: all 0.3s;
        }

            .back-btn:hover {
                background-color: #d32f2f;
                color: white;
            }

        .terms-link {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }

            .terms-link:hover {
                text-decoration: underline;
            }

        .estimation-box {
            background-color: #f5f7fa;
            border-radius: 8px;
            padding: 12px 15px;
            margin-top: 20px;
            font-size: 14px;
            color: #616161;
            border-left: 3px solid var(--accent-color);
        }

        .estimation-icon {
            color: var(--accent-color);
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            max-width: 350px;
            z-index: 9999;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 8px;
            overflow: hidden;
        }

        .discount-item {
            background-color: #f8f9fa;
            border-left: 3px solid var(--accent-color);
            animation: fadeIn 0.5s ease-in;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .text-success {
            color: #28a745 !important;
        }

        .discount-applied {
            animation: pulse 1s;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }

            100% {
                transform: scale(1);
            }
        }

        @@media (max-width: 768px) {
            .order-container {
                margin-top: 20px;
                margin-bottom: 20px;
            }

            .notification {
                left: 20px;
                right: 20px;
                max-width: none;
            }
        }
    </style>
</head>
<body>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="notification alert alert-danger alert-dismissible fade show" role="alert">
            <strong><i class="bi bi-exclamation-triangle-fill me-2"></i> Error:</strong> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="notification alert alert-success alert-dismissible fade show" role="alert">
            <strong><i class="bi bi-check-circle-fill me-2"></i> Success:</strong> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="container">
        <div class="row">
            <div class="col-lg-10 col-md-12 mx-auto order-container p-0">
                <div class="header-section d-flex justify-content-between align-items-center">
                    <h3 class="mb-0 text-white">Complete Your Order</h3>
                    <a asp-controller="Home" asp-action="ShoppingCart" class="btn back-btn px-4">
                        <i class="bi bi-arrow-left me-1"></i> Back to Cart
                    </a>
                </div>

                <div class="p-4">
                    <div class="row mb-4">
                        <!-- Shipping Details Column -->
                        <div class="col-lg-6 mb-4 mb-lg-0">
                            <h4 class="section-title">Shipping Details</h4>
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="floatingOrderSummaryName" placeholder="Name" value="@customer.Name">
                                <label for="floatingOrderSummaryName">Full Name</label>
                            </div>
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="floatingOrderSummaryPhone" placeholder="Phone" value="@customer.Phone">
                                <label for="floatingOrderSummaryPhone">Phone Number</label>
                            </div>
                            <div class="form-floating mb-3">
                                <textarea class="form-control" id="floatingOrderSummaryAddress" placeholder="Address" style="resize: none; outline: none; box-shadow: none;height: 120px">@customer.Address</textarea>
                                <label for="floatingOrderSummaryAddress">Delivery Address</label>
                            </div>
                            <div class="estimation-box">
                                <i class="bi bi-truck estimation-icon me-2"></i>
                                Estimated Delivery: @DateTime.Now.AddDays(3).ToString("dd/MM/yyyy") - @DateTime.Now.AddDays(5).ToString("dd/MM/yyyy")
                            </div>
                        </div>

                        <!-- Order Summary Column -->
                        <div class="col-lg-6">
                            <h4 class="section-title">Order Summary</h4>
                            <div class="card shadow-sm">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <p class="product-name mb-0">Your Points</p>
                                            <p class="product-price mb-0" id="earnedPoints">@customer.EarnedPoint Points</p>
                                        </div>
                                    </li>
                                    @foreach (CartItem cartItem in cartItems)
                                    {
                                        var product = orderSummaryViewModel.GetProductByCartId(cartItem.ProductID);
                                        <li class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <p class="product-name mb-1">@product.ProductName</p>
                                                    <p class="product-quantity mb-0">Quantity: @cartItem.Quantity</p>
                                                </div>
                                                <p class="product-price mb-0">@cartItem.Price ₫</p>
                                            </div>
                                        </li>
                                    }
                                    <!-- Form để gửi yêu cầu trừ điểm -->
                                    <li class="list-group-item p-0">
                                        <form asp-controller="Home" asp-action="DeductPoints" method="post" id="spinForm">
                                            <input type="hidden" name="customerId" value="@customer.UserID" />
                                            <button type="button" class="discount-btn btn w-100 rounded-0" id="spinButton">
                                                <i class="bi bi-ticket-perforated-fill me-2"></i> Spin for Discount (2 Points)
                                            </button>
                                        </form>
                                    </li>
                                    <li class="list-group-item p-0">
                                        <div class="total-row d-flex justify-content-between align-items-center">
                                            <span>Total</span>
                                            <span id="totalAmount">@shoppingCart.TotalAmount ₫</span>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Second Section: Payment Information -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <h4 class="section-title">Payment Method</h4>

                            <div class="payment-methods">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="paymentMethod" id="vnpay">
                                    <label class="form-check-label fw-medium" for="vnpay">
                                        <i class="bi bi-credit-card payment-icon me-2"></i> VnPay
                                    </label>
                                    <div class="payment-details d-none">
                                        <h6 class="mb-1">Pay with VnPay</h6>
                                        <p class="mb-0">You will be redirected to the VnPay payment gateway to complete your transaction securely.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center pt-3 border-top">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="termsCheck">
                            <label class="form-check-label" for="termsCheck">
                                I agree to the <a href="#" class="terms-link">Terms & Conditions</a>
                            </label>
                        </div>
                        <form asp-controller="Home" asp-action="CompleteOrder" method="post" id="orderForm">
                            <input type="hidden" name="paymentMethod" id="selectedPaymentMethod" value="creditCard">
                            @if (TempData["DiscountId"] != null)
                            {
                                <input type="hidden" name="discountId" value="@TempData["DiscountId"]" />
                            }
                            <button type="submit" class="complete-btn" id="completeOrderBtn">
                                Complete Order <i class="bi bi-arrow-right ms-2"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
            input.addEventListener('change', function() {
                document.querySelectorAll('.payment-details').forEach(detail => {
                    detail.classList.add('d-none');
                });

                const selectedPaymentDetails = this.closest('.form-check').querySelector('.payment-details');
                if (selectedPaymentDetails) {
                    selectedPaymentDetails.classList.remove('d-none');
                }

                document.getElementById('selectedPaymentMethod').value = this.id;
            });
        });

        document.querySelector('#creditCard').closest('.form-check').querySelector('.payment-details').classList.remove('d-none');

        document.getElementById('orderForm').addEventListener('submit', function(e) {
            const termsCheck = document.getElementById('termsCheck');
            if (!termsCheck.checked) {
                e.preventDefault();
                alert('Please agree to the Terms & Conditions to proceed.');
                return false;
            }

            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').id;

            if (selectedPaymentMethod === 'creditCard') {
                const cardNumber = document.getElementById('cardNumber').value.trim();
                const cardName = document.getElementById('cardName').value.trim();
                const expDate = document.getElementById('expDate').value.trim();
                const cvv = document.getElementById('cvv').value.trim();

                if (!cardNumber || !cardName || !expDate || !cvv) {
                    e.preventDefault();
                    alert('Please fill in all credit card details.');
                    return false;
                }
            }

            return true;
        });

        setTimeout(function() {
            var notifications = document.querySelectorAll('.notification');
            notifications.forEach(function(notification) {
                var bsAlert = new bootstrap.Alert(notification);
                bsAlert.close();
            });
        }, 3000);

        document.addEventListener('DOMContentLoaded', function() {
            const spinButton = document.getElementById('spinButton');
            const spinForm = document.getElementById('spinForm');
            let currentPoints = @customer.EarnedPoint; 

            let discountApplied = @((TempData["DiscountApplied"] != null).ToString().ToLower());

        @if (TempData["DiscountApplied"] != null)
        {
            <text>
                        const discountItem = document.createElement('li');
                        discountItem.className = 'list-group-item discount-item discount-applied';
                        discountItem.innerHTML = `
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <p class="product-name mb-1">Discount: @TempData["DiscountName"]</p>
                                    <p class="product-quantity mb-0">@TempData["DiscountDescription"]</p>
                                </div>
                                <p class="product-price mb-0 text-success">-${@TempData["DiscountRate"]}%</p>
                            </div>
                        `;

                        // Chèn vào danh sách trước nút Spin
                        const listGroup = document.querySelector('.list-group');
                        const spinBtn = document.querySelector('#spinForm').closest('.list-group-item');
                        listGroup.insertBefore(discountItem, spinBtn);

                        // Cập nhật tổng tiền
                        const totalElement = document.querySelector('#totalAmount');
                        totalElement.textContent = `${@TempData["NewTotal"]} ₫`;
                        totalElement.classList.add('text-success');

                        // Cập nhật nút thành "Spin Again"
                        spinButton.innerHTML = '<i class="bi bi-ticket-perforated-fill me-2"></i> Spin Again (2 Points)';
            </text>
        }

        spinButton.addEventListener('click', function(e) {
            e.preventDefault();

            if (currentPoints < 2) {
                showMessage('warning', 'Not enough points to spin! You need at least 2 points.');
                return;
            }

            spinButton.disabled = true;
            spinButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i> Spinning...';

            const discounts = @Html.Raw(Json.Serialize(discounts));

            let counter = 0;
            const spinInterval = setInterval(function() {
                counter++;

                const randomText = ["Spinning...", "Good luck!", "Almost there!", "Wheel is spinning!"][Math.floor(Math.random() * 4)];
                spinButton.innerHTML = `<i class="bi bi-ticket-perforated-fill me-2"></i> ${randomText}`;

                if (counter >= 10) {
                    clearInterval(spinInterval);

                    fetch(spinForm.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams(new FormData(spinForm))
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            currentPoints = data.remainingPoints;
                            document.getElementById('earnedPoints').textContent = `${data.remainingPoints} Points`;

                            const finalResult = Math.random() > 0.7 ? 1 : -1; 

                            if (finalResult === -1) {
                                showMessage('warning', 'Better luck next time!');
                                spinButton.innerHTML = discountApplied ?
                                    '<i class="bi bi-ticket-perforated-fill me-2"></i> Spin Again (2 Points)' :
                                    '<i class="bi bi-ticket-perforated-fill me-2"></i> Spin for Discount (2 Points)';
                            } else {
                                const randomDiscount = discounts[Math.floor(Math.random() * discounts.length)];
                                discountApplied = true;
                                showAppliedDiscount(randomDiscount);

                                const originalTotal = @shoppingCart.TotalAmount;
                                const discountAmount = originalTotal * (randomDiscount.discountRate / 100);
                                const newTotal = originalTotal - discountAmount;
                                updateTotal(newTotal);

                                const orderForm = document.getElementById('orderForm');
                                const existingInput = document.getElementById('discountIdInput');
                                if (existingInput) {
                                    existingInput.remove();
                                }
                                const discountInput = document.createElement('input');
                                discountInput.type = 'hidden';
                                discountInput.id = 'discountIdInput';
                                discountInput.name = 'discountId';
                                discountInput.value = randomDiscount.discountID;
                                orderForm.appendChild(discountInput);

                                spinButton.innerHTML = '<i class="bi bi-ticket-perforated-fill me-2"></i> Spin Again (2 Points)';
                            }
                        } else {
                            showMessage('error', data.message);
                            spinButton.innerHTML = '<i class="bi bi-ticket-perforated-fill me-2"></i> Spin for Discount (2 Points)';
                        }
                        spinButton.disabled = false;
                    })
                    .catch(error => {
                        showMessage('error', 'An error occurred during spinning');
                        spinButton.disabled = false;
                        spinButton.innerHTML = '<i class="bi bi-ticket-perforated-fill me-2"></i> Spin for Discount (2 Points)';
                    });
                }
            }, 100);
        });

            function showAppliedDiscount(discount) {
                const existingDiscount = document.querySelector('.discount-item');
                if (existingDiscount) {
                    existingDiscount.remove();
                }

                const discountItem = document.createElement('li');
                discountItem.className = 'list-group-item discount-item discount-applied';
                discountItem.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="product-name mb-1">Discount: ${discount.name}</p>
                            <p class="product-quantity mb-0">${discount.describe || 'Applied to entire order'}</p>
                        </div>
                        <p class="product-price mb-0 text-success">-${discount.discountRate}%</p>
                    </div>
                `;

                const listGroup = document.querySelector('.list-group');
                const spinBtn = document.querySelector('#spinForm').closest('.list-group-item');
                listGroup.insertBefore(discountItem, spinBtn);

                showMessage('success', `Congratulations! You received "${discount.name}" discount!`);
            }

            function updateTotal(newTotal) {
                const totalElement = document.querySelector('#totalAmount');
                totalElement.textContent = `${Math.round(newTotal)} ₫`;
                totalElement.classList.add('text-success');
                setTimeout(() => {
                    totalElement.classList.remove('text-success');
                }, 2000);
            }

            function showMessage(type, message) {
                const notification = document.createElement('div');
                notification.className = `notification alert alert-${type} alert-dismissible fade show`;
                notification.setAttribute('role', 'alert');

                let icon = 'info-circle-fill';
                if (type === 'success') icon = 'check-circle-fill';
                if (type === 'warning') icon = 'exclamation-triangle-fill';
                if (type === 'danger') icon = 'exclamation-triangle-fill';

                notification.innerHTML = `
                    <strong><i class="bi bi-${icon} me-2"></i></strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

                document.body.appendChild(notification);

                setTimeout(function() {
                    const bsAlert = new bootstrap.Alert(notification);
                    bsAlert.close();
                }, 3000);
            }
        });
    </script>
</body>
</html>