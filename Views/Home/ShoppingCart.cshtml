@using PBL3_HK4.Entity
@{
    ViewData["Title"] = "Shopping Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ShoppingCartViewModel shoppingCartViewModel = Model as ShoppingCartViewModel;
    ShoppingCart shoppingCart = shoppingCartViewModel.ShoppingCart;
    IEnumerable<Product> products = shoppingCartViewModel.Products;
    ICollection<CartItem> cartItems = shoppingCart.Items ?? new List<CartItem>();
}

@Html.AntiForgeryToken()

<style>
    .cart-container {
        margin: 30px auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 960px;
        padding: 20px;
        background-color: #f8f9fa; /* Xám nhạt */
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .cart-header {
        font-size: 28px;
        font-weight: bold;
        color: #6B8E23; /* Xanh ô liu đậm */
        margin-bottom: 25px;
        text-align: center;
    }

    .item-count {
        color: #80B500; /* Xanh lá tươi */
        font-weight: bold;
    }

    .cart-item {
        background-color: #fff;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        border: 1px solid #e9ecef;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .cart-item:hover {
            box-shadow: 0 3px 7px rgba(0, 0, 0, 0.1);
            border-color: #d1d8e0;
        }

    .item-image {
        max-width: 80px;
        margin-right: 15px;
        border-radius: 6px;
    }

    .item-details {
        flex-grow: 1;
    }

    .item-name {
        font-weight: 500;
        font-size: 16px;
        color: #343a40;
        margin-bottom: 5px;
    }

    .item-price {
        color: #80B500; /* Xanh lá tươi */
        font-weight: bold;
        font-size: 16px;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 6px;
        overflow: hidden;
    }

    .btn-quantity {
        background-color: #fff;
        border: none;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s;
        font-size: 16px;
        color: #495057;
    }

        .btn-quantity:hover {
            background-color: #e9ecef;
        }

        .btn-quantity:focus {
            outline: none;
        }

    .quantity-value {
        width: 40px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 16px;
        color: #495057;
        border-left: 1px solid #ced4da;
        border-right: 1px solid #ced4da;
    }

    .btn-remove {
        color: #dc3545;
        cursor: pointer;
        font-size: 20px;
        transition: color 0.2s;
        background: none;
        border: none;
        padding: 0;
        margin-left: 15px;
    }

        .btn-remove:hover {
            color: #c82333;
        }

        .btn-remove:focus {
            outline: none;
        }

    .total-section {
        padding-top: 20px;
        margin-top: 20px;
        border-top: 1px solid #e9ecef;
    }

    .total-text {
        font-size: 20px;
        font-weight: bold;
        color: #343a40;
    }

    .total-amount {
        font-size: 22px;
        font-weight: bold;
        color: #80B500; /* Xanh lá tươi */
    }

    .btn-action {
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        text-align: center;
        margin: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
        text-decoration: none;
        display: inline-block;
    }

    .btn-checkout {
        background-color: #80B500; /* Xanh lá tươi */
        color: white;
        border: 1px solid #80B500;
    }

        .btn-checkout:hover {
            background-color: #729f00;
            border-color: #668c00;
        }

    .btn-continue {
        background-color: #007bff;
        color: white;
        border: 1px solid #007bff;
    }

        .btn-continue:hover {
            background-color: #0056b3;
            border-color: #004494;
        }

    /* Responsive styles */
    @@media (max-width: 767px) {
        .cart-header {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .cart-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .item-image {
            margin-bottom: 10px;
            margin-right: 0;
            width: 60px;
        }

        .item-details {
            margin-bottom: 10px;
        }

        .quantity-controls {
            margin-bottom: 10px;
        }

        .btn-remove {
            margin-left: 0;
        }

        .total-section {
            text-align: center;
        }

        .btn-action {
            width: 100%;
            margin: 5px 0;
        }
    }
</style>

<div class="cart-container">
    <h1 class="cart-header">
        Your Shopping Cart <span class="item-count">(@cartItems.Count)</span>
    </h1>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (cartItems.Count == 0)
    {
        <div class="text-center my-5">
            <h4>Your cart is empty</h4>
            <a asp-controller="Home" asp-action="Index" class="btn-action btn-continue mt-3">Continue Shopping</a>
        </div>
    }
    else
    {
        @foreach (CartItem cartItem in cartItems)
        {
            var product = shoppingCartViewModel.GetProductByCartId(cartItem.ProductID);
            var imagePath = product.Images != null && product.Images.Any()
            ? product.Images.First().ImagePath
            : "/images/products/default.jpg";

            <div class="cart-item">
                <img src="@imagePath" class="item-image" alt="@product.ProductName" />
                <div class="item-details">
                    <div class="item-name">@product.ProductName</div>
                    <div class="item-price"><span class="CostItem">@cartItem.Price</span> ₫ / @product.Unit</div>
                </div>
                <div class="quantity-controls">
                    <button class="btn-quantity minus" onclick="updateQuantity('@cartItem.ItemID', false, this)">
                        <i class="bi bi-dash"></i>
                    </button>
                    <div class="quantity-value Count">@cartItem.Quantity</div>
                    <button class="btn-quantity plus" onclick="updateQuantity('@cartItem.ItemID', true, this)">
                        <i class="bi bi-plus"></i>
                    </button>
                </div>
                <button class="btn-remove" onclick="removeItem('@cartItem.ItemID', this)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        }

        <div class="total-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <span class="total-text">Total:</span>
                <span class="total-amount"><span id="TotalCost">@shoppingCart.TotalAmount</span> ₫</span>
            </div>
            <div class="d-flex justify-content-end">
                <a asp-controller="Home" asp-action="OrderSummary" class="btn-action btn-checkout">Proceed to Checkout</a>
                <a asp-controller="Home" asp-action="Index" class="btn-action btn-continue">Continue Shopping</a>
            </div>
        </div>
    }
</div>

<script>
    // Calculate total when page loads
    document.addEventListener('DOMContentLoaded', function() {
        calculateTotal();
    });

    // Hàm cập nhật số lượng sản phẩm
    function updateQuantity(cartItemId, increase, button) {
        // Lấy phần tử hiển thị số lượng
        const quantityElement = button.parentElement.querySelector('.quantity-value');
        let currentQuantity = parseInt(quantityElement.textContent);

        // Nếu giảm thì kiểm tra xem số lượng có > 1 không
        if (!increase && currentQuantity <= 1) {
            return; // Không giảm nếu số lượng đã là 1
        }

        // Lấy token CSRF
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Gọi API để cập nhật số lượng trong database
        fetch('/Cart/UpdateQuantityCartItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: `cartitemid=${cartItemId}&increase=${increase}`
        })
        .then(response => {
            if (response.ok) {
                // Cập nhật giao diện
                if (increase) {
                    currentQuantity += 1;
                } else {
                    currentQuantity -= 1;
                }

                // Cập nhật tất cả các phần tử hiển thị số lượng của sản phẩm này
                const cartItem = button.closest('.cart-item');
                const allQuantityValues = cartItem.querySelectorAll('.Count');
                allQuantityValues.forEach(value => {
                    value.textContent = currentQuantity;
                });

                // Tính lại tổng tiền
                calculateTotal();
            } else {
                console.error('Failed to update quantity');
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    function removeItem(cartItemId, button) {
        if (confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) {
            // Lấy token CSRF
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Gọi API để xóa sản phẩm
            fetch('/Cart/DeleteCartItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `cartitemid=${cartItemId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Xóa sản phẩm khỏi giao diện
                    const cartItem = button.closest('.cart-item');
                    cartItem.style.opacity = '0';
                    setTimeout(() => {
                        cartItem.remove();

                        // Cập nhật số lượng sản phẩm trong trang giỏ hàng
                        document.querySelector('.item-count').textContent = data.cartItemCount;

                        // Cập nhật biểu tượng giỏ hàng trên thanh điều hướng (desktop, tablet, mobile)
                        updateCartCountBadges(data.cartItemCount);

                        // Tính lại tổng tiền
                        calculateTotal();

                        // Nếu giỏ hàng trống, hiển thị thông báo
                        if (data.cartItemCount === 0) {
                            location.reload(); // Reload trang nếu giỏ hàng trống
                        }
                    }, 300);
                } else {
                    alert('Không thể xóa sản phẩm, vui lòng thử lại sau.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Đã xảy ra lỗi khi xóa sản phẩm.');
            });
        }
    }

    // Hàm cập nhật số lượng giỏ hàng trên tất cả các thiết bị
    function updateCartCountBadges(count) {
        // Cập nhật biểu tượng giỏ hàng trên desktop
        const desktopCartCount = document.getElementById('cart-count');
        if (desktopCartCount) {
            desktopCartCount.textContent = count;
        }

        // Cập nhật biểu tượng giỏ hàng trên tablet
        const tabletCartCount = document.getElementById('tablet-cart-count');
        if (tabletCartCount) {
            tabletCartCount.textContent = count;
        }

        // Cập nhật biểu tượng giỏ hàng trên mobile
        const mobileCartCount = document.getElementById('mobile-cart-count');
        if (mobileCartCount) {
            mobileCartCount.textContent = count;
        }
    }

    // Update item count in header
    function updateItemCount() {
        const itemCount = document.querySelectorAll('.cart-item').length;
        document.querySelector('.item-count').textContent = itemCount;
    }

    // Calculate total cost
    function calculateTotal() {
        let total = 0;
        const cartItems = document.querySelectorAll('.cart-item');

        cartItems.forEach(item => {
            const price = parseFloat(item.querySelector('.CostItem').textContent);
            const quantity = parseInt(item.querySelector('.Count').textContent);
            total += price * quantity;
        });

        document.getElementById('TotalCost').textContent = total.toFixed(0);
    }
</script>