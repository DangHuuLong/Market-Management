@using PBL3_HK4.Entity
@{
    ViewData["Title"] = "Product Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Bạn có thể thêm các biến hoặc logic C# ở đây
    var productName = "Fresh Ruby Tomatoes";
    var price = 2.00m;
    var oldPrice = 2.99m;
    ProductDetailsViewModel productDetailsViewModel = Model as ProductDetailsViewModel;
    Product product = productDetailsViewModel.Product;
    IEnumerable<Product> listProduct = productDetailsViewModel.ListProduct;
}

<div class="row py-4">
    <!--Empty-->
    <div class="col-1"></div>

    <!--Content about product-->
    <div class="col-7">
        <div class="row pb-5">
            <div class="col-6" style="padding-bottom: 10px;">
                <img class="img-fluid" style="background-color: rgba(217, 194, 168, 0.5); box-shadow: -3px 5px 10px rgba(0, 0, 0, 0.2); border-radius: 8px;" id="img-product" src="~/img/—Pngtree—red fresh tomato with green_8933861.png" />
            </div>
            <div class="col-6 d-flex flex-column justify-content-between" style="padding-bottom: 10px;">
                <div>
                    <span class="star-rating" style="letter-spacing: 10px;" data-rating="@product.AverageRating"></span>
                    <span style="font-size: 20px;">@product.AverageRating</span>
                </div>
                <div>
                    <p style="color: #314401; font-size: 40px; font-weight: bold;">@product.ProductName</p>
                    <p style="font-size: 20px;">ID: @product.ProductID</p>
                    <div>
                        <span style="font-size: 48px; color: #94A84E;">@product.Price ₫</span>
                        @* <span style="font-size: 36px; color: rgba(148, 168, 78, 0.5); text-decoration: line-through;">@oldPrice.ToString("0.00")$ / 1Kg</span> *@
                    </div>
                </div>
                <div>
                    <hr style="border: 1px solid #333; opacity: 0.5; margin: 10px 0;">
                    <p style="font-size: 24px;">Categories: @product.Catalog.CatalogName</p>
                    <hr style="border: 1px solid #333; opacity: 0.5; margin: 10px 0;">
                </div>
                <div class="d-flex justify-content-evenly" style="border-radius:20px; border: 2px solid; width: 30%; font-size: 24px">
                    <i id="dash" class="bi bi-dash-circle" style="cursor: pointer;"></i>
                    <div style="border-left: 2px solid black; height: 36px;"></div>
                    <span id="value">1</span>
                    <div style="border-left: 2px solid black; height: 36px;"></div>
                    <i id="plus" class="bi bi-plus-circle" style="cursor: pointer;"></i>
                </div>
                <div class="d-flex gap-3">
                    <a class="btn" id="add-to-cart-btn" style="background-color: #80B500; color: white; border-radius: 20px; font-size: 20px; flex: 1;">
                        <i class="bi bi-cart-plus"></i> Add To Cart
                    </a>
                    <a asp-controller="Home" asp-action="OrderSummary" class="btn" style="background-color: transparent; border: 1px solid; border-radius: 20px; font-size: 20px; flex: 1;">
                        <i class="bi bi-truck"></i> Order Now
                    </a>
                </div>
            </div>

            <!--Tấm hình nhỏ về sản phẩm-->
            <div class="col-6">
                <div class="d-flex justify-content-between" style="margin-top: 5px; margin-bottom: 5px;">
                    <img class="sub-img" style="background-color: rgba(217, 194, 168, 0.5); box-shadow: -3px 5px 10px rgba(0, 0, 0, 0.2); border-radius: 8px;" src="~/img/—Pngtree—red fresh tomato with green_8933861.png" />
                    <img class="sub-img" style="background-color: rgba(217, 194, 168, 0.5); box-shadow: -3px 5px 10px rgba(0, 0, 0, 0.2); border-radius: 8px;" src="~/img/—Pngtree—red fresh tomato with green_8933861.png" />
                    <img class="sub-img" style="background-color: rgba(217, 194, 168, 0.5); box-shadow: -3px 5px 10px rgba(0, 0, 0, 0.2); border-radius: 8px;" src="~/img/—Pngtree—red fresh tomato with green_8933861.png" />
                </div>
            </div>

            <!--Empty-->
            <div class="col-6"></div>
        </div>

        <!--Description & Interview-->
        <div class="row border-bottom">
            <div class="col-6 text-center p-0">
                <span id="description-tab" class="d-block pb-2 border-bottom border-2 border-success text-success fs-4" style="cursor: pointer;">Description</span>
            </div>
            <div class="col-6 text-center p-0">
                <span id="reviews-tab" class="d-block pb-2 border-bottom border-2 border-transparent text-dark fs-4" style="cursor: pointer;">Reviews</span>
            </div>
        </div>

        <!-- Nội dung của từng tab -->
        <div class="row mt-3">
            <div id="description-content" class="d-block">
                <p style="font-weight: bold; font-size: 30px; color: #314401;">@product.ProductName</p>
                <p style="line-height: 30px; font-size: 16px;">
                    @product.ProductDescription
                </p>
            </div>
            <div id="reviews-content" class="d-none row d-flex align-items-center">
                <!--Nội dung được thêm bằng script-->
            </div>
        </div>
    </div>

    <!--Đề xuất về sản phẩm-->
    <div class="col-3">
        <ul id="related-products-list" style="border: 1px solid; padding: 0px">
            <li style="padding-left: 20px;">
                <p style="font-weight: bold">Related products</p>
            </li>
            <!--Sản phẩm được đề xuất sẽ thêm vào đây-->
            @foreach (Product productPropose in listProduct)
            {
                <li>
                    <hr style="border: 1px solid #333; opacity: 0.5; margin: 10px 0;">
                </li>
                <li style="padding-left: 20px; display: flex; flex-direction: column;">
                    <form action="@Url.Action("Details", "Product")" method="post" style="margin-top: auto; flex-grow: 1; display: flex; flex-direction: column;">
                        <input type="hidden" name="id" value="@productPropose.ProductID">
                        <button type="submit" style="border: none; background: none; padding: 0; width: 100%; text-align: left; flex-grow: 1;">
                            <div class="row">
                                <img class="col-3" src="@Url.Content("~/img/—Pngtree—red fresh tomato with green_8933861.png")" />
                                <div class="col-9 d-flex flex-column justify-content-between">
                                    <span class="star-rating" style="font-size: 10px;" data-rating="@productPropose.AverageRating"></span>
                                    <div>
                                        <span style="font-size: 16px;">@productPropose.ProductName</span>
                                    </div>
                                    <div>
                                        <span style="font-size: 20px; color: #94A84E;">@productPropose.Price ₫</span>
                                        @* <span style="font-size: 16px; color: rgba(148, 168, 78, 0.5); text-decoration: line-through;">@oldPrice.ToString("0.00")$</span> *@
                                    </div>
                                </div>
                            </div>
                        </button>
                    </form>
                </li>
            }
        </ul>
    </div>

    <!--Empty-->
    <div class="col-1">
    </div>
</div>

<style>
    .star-rating span {
        display: inline-block;
    }

    .product-fly {
        position: fixed;
        z-index: 9999;
        transform: translate(-50%, -50%);
        transition: all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        pointer-events: none;
    }
</style>

@section Scripts {
    <script>
        window.onload = function () {
            let mainImg = document.getElementById("img-product"); // Lấy ảnh chính
            let subImages = document.querySelectorAll(".sub-img"); // Lấy danh sách 3 ảnh nhỏ

            function resizeImages() {
                let height = mainImg.clientHeight; // Lấy chiều cao ảnh chính
                let newHeight = (height / 3) - 5; // Chia 3

                // Gán chiều cao mới cho từng ảnh nhỏ
                subImages.forEach(img => {
                    img.style.height = newHeight + "px";
                    img.style.objectFit = "cover"; // Giữ tỷ lệ ảnh
                });
            }

            // Khi ảnh chính tải xong thì thực hiện resize
            mainImg.onload = resizeImages;

            // Nếu ảnh đã tải trước đó thì thực hiện ngay
            if (mainImg.complete) {
                resizeImages();
            }
        };
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Description & Reviews Navigation
            const descriptionTab = document.getElementById('description-tab');
            const reviewsTab = document.getElementById('reviews-tab');
            const descriptionContent = document.getElementById('description-content');
            const reviewsContent = document.getElementById('reviews-content');

            function switchTab(activeTab, inactiveTab, activeContent, inactiveContent) {
                activeTab.classList.add("border-success", "text-success", "fw-bold");
                activeTab.classList.remove("border-transparent", "text-dark");

                inactiveTab.classList.add("border-transparent", "text-dark");
                inactiveTab.classList.remove("border-success", "text-success", "fw-bold");

                activeContent.classList.add("d-block");
                activeContent.classList.remove("d-none");

                inactiveContent.classList.add("d-none");
                inactiveContent.classList.remove("d-block");
            }

            descriptionTab.addEventListener('click', function () {
                switchTab(descriptionTab, reviewsTab, descriptionContent, reviewsContent);
            });

            reviewsTab.addEventListener('click', function () {
                switchTab(reviewsTab, descriptionTab, reviewsContent, descriptionContent);
            });

            // Lặp qua các bài đánh giá của 1 sản phẩm và cho nó hiển thị
            const count = 5;  // Ví dụ, lặp lại 5 lần
            const reviewsContainer = document.getElementById("reviews-content");

            for (let i = 0; i < count; i++) {
                reviewsContainer.innerHTML += `
                    <div class="row mb-3">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <img src="../img/DangHuuLong.jpg" class="rounded-circle w-100 h-auto">
                        </div>
                        <div class="col-10">
                            <div class="d-flex justify-content-between">
                                <span>Dang Huu Long</span>
                                <span>04/04/2025</span>
                            </div>
                            <span class="text-warning">★★★★★</span>
                            <p>
                                The Fresh Ruby Tomatoes are quite good, with a juicy texture and natural sweetness. However, some were slightly overripe, affecting the overall experience. Still a decent choice for daily cooking!
                            </p>
                        </div>
                    </div>
                `;
            }

            // Điều khiển tăng/giảm giá trị khi nhấn vào dấu cộng và dấu trừ
            const dash = document.getElementById('dash');
            const plus = document.getElementById('plus');
            const value = document.getElementById('value');

            dash.addEventListener('click', () => {
                let currentValue = parseInt(value.textContent);
                if (currentValue > 1) {
                    value.textContent = currentValue - 1;
                }
            });

            plus.addEventListener('click', () => {
                let currentValue = parseInt(value.textContent);
                value.textContent = currentValue + 1;
            });

            dash.addEventListener('mouseover', () => {
                dash.style.cursor = 'pointer';
            });

            plus.addEventListener('mouseover', () => {
                plus.style.cursor = 'pointer';
            });

            dash.addEventListener('mouseout', () => {
                dash.style.cursor = 'default';
            });

            plus.addEventListener('mouseout', () => {
                plus.style.cursor = 'default';
            });

            // Khi thêm 1 sản phẩm, nó sẽ bay đến Cart
            document.getElementById('add-to-cart-btn').addEventListener('click', function (e) {
                e.preventDefault();

                const productImg = document.getElementById('img-product');
                const cartIcon = document.getElementById('cart-icon');
                const cartCount = document.getElementById('cart-count');
                const quantity = parseInt(document.getElementById('value').textContent);
                const productId = '@product.ProductID'; // Lấy ID sản phẩm từ model

                const productRect = productImg.getBoundingClientRect();
                const cartRect = cartIcon.getBoundingClientRect();

                const flyingImg = new Image();
                flyingImg.src = productImg.src;
                flyingImg.classList.add('product-fly');

                // Tính toán tâm sản phẩm
                const startX = productRect.left + window.scrollX + (productRect.width / 2);
                const startY = productRect.top + window.scrollY + (productRect.height / 2);

                // Đặt vị trí ban đầu tại tâm sản phẩm
                flyingImg.style.left = `${startX}px`;
                flyingImg.style.top = `${startY}px`;
                flyingImg.style.width = `${productRect.width * 0.3}px`;
                flyingImg.style.opacity = '1';

                document.body.appendChild(flyingImg);

                requestAnimationFrame(() => {
                    // Tính toán tâm giỏ hàng
                    const targetX = cartRect.left + window.scrollX + (cartRect.width / 2);
                    const targetY = cartRect.top + window.scrollY + (cartRect.height / 2);

                    flyingImg.style.left = `${targetX}px`;
                    flyingImg.style.top = `${targetY}px`;
                    flyingImg.style.transform = 'translate(-50%, -50%) scale(0.3)';
                    flyingImg.style.opacity = '0';
                });

                // Gửi request đến server để thêm vào giỏ hàng
                fetch(`/Cart/AddToCart?productId=${productId}&quantity=${quantity}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Hoàn tất hiệu ứng bay và cập nhật số lượng trong giỏ hàng
                        flyingImg.addEventListener('transitionend', () => {
                            flyingImg.remove();

                            // Cập nhật số lượng hiển thị ở tất cả các badge giỏ hàng
                            document.getElementById('cart-count').textContent = data.cartItemCount;
                            if (document.getElementById('tablet-cart-count')) {
                                document.getElementById('tablet-cart-count').textContent = data.cartItemCount;
                            }
                            if (document.getElementById('mobile-cart-count')) {
                                document.getElementById('mobile-cart-count').textContent = data.cartItemCount;
                            }

                            document.getElementById('value').textContent = '1';

                            cartIcon.style.transform = 'scale(1.2)';
                            setTimeout(() => cartIcon.style.transform = '', 300);
                        }, { once: true });
                    } else {
                        // Xử lý trường hợp thêm không thành công
                        flyingImg.remove();
                        alert(data.message || 'Không thể thêm vào giỏ hàng');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    flyingImg.remove();
                    alert('Đã xảy ra lỗi khi thêm vào giỏ hàng');
                });
            });
        });
    </script>
    <script>
        document.querySelectorAll('.star-rating').forEach(span => {
            let starsHtml = '';
            const rating = Math.max(0, Math.min(5, parseFloat(span.getAttribute('data-rating') || 0)));
            const fullStars = Math.floor(rating);
            const hasHalfStar = rating - fullStars >= 0.5;
            const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

            for (let i = 0; i < fullStars; i++) {
                starsHtml += '<span style="color: #FFD700; font-size: 30px;">★</span>';
            }
            if (hasHalfStar) {
                starsHtml += '<span style="color: #FFD700; font-size: 30px;">☆</span>'; // Nửa sao
            }
            for (let i = 0; i < emptyStars; i++) {
                starsHtml += '<span style="color: #C0C0C0; font-size: 30px;">☆</span>';
            }

            span.innerHTML = starsHtml;
        });
    </script>
}