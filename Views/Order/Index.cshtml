@using PBL3_HK4.Entity
@{
    ViewData["Title"] = "Order Manage";
    Layout = "~/Views/Shared/_Layout.cshtml";
    CustomerOrderModelView customerOrderModelView = Model as CustomerOrderModelView;
    Customer customer = customerOrderModelView.Customer;
    IEnumerable<Bill> bills = customerOrderModelView.Bills;
    IEnumerable<BillDetail> billDetails = customerOrderModelView.BillDetails;
    IEnumerable<Product> products = customerOrderModelView.Products;
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- Thêm form với CSRF token -->
<form id="csrfForm">
    @Html.AntiForgeryToken()
</form>

<div class="order-manage py-5">
    <div class="row mx-auto" style="max-width: 1200px;">
        <!-- Header Section -->
        <div class="row align-items-center mb-4">
            <div class="col-md-6">
                <h1 class="order-title">Order List</h1>
            </div>
            <div class="col-md-6">
                <div class="search-filter-container">
                    <div class="search-container">
                        <input type="text" id="searchInput" placeholder="Search orders..." class="search-input">
                        <button type="button" onclick="searchOrders()" class="search-button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary filter-button dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-funnel me-1"></i> Filter
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                            <li><h6 class="dropdown-header">Status</h6></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Processing')">Processing</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Confirmed')">Confirmed</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Cancelled')">Cancelled</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Received')">Received</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Reviewed')">Reviewed</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Table version (for desktop/tablet) -->
        <div class="order-table-container order-table-scrollable px-0">
            <table class="order-table w-100">
                <thead>
                    <tr class="table-header">
                        <th style="width: 15%;">Name</th>
                        <th style="width: 15%;">Phone</th>
                        <th style="width: 20%;">Email</th>
                        <th style="width: 15%; text-align: center;">
                            Order Date
                            <div class="sort-buttons">
                                <button class="sort-button" onclick="sortOrders('Ascending')" title="Sort Ascending">
                                    <i class="bi bi-arrow-up"></i>
                                </button>
                                <button class="sort-button" onclick="sortOrders('Descending')" title="Sort Descending">
                                    <i class="bi bi-arrow-down"></i>
                                </button>
                            </div>
                        </th>
                        <th style="width: 15%; text-align: center;">Status</th>
                        <th style="width: 15%; text-align: right;">Total</th>
                        <th style="width: 10%; text-align: center;">Actions</th>
                    </tr>
                </thead>
                <tbody id="orderTableBody"></tbody>
            </table>
        </div>

        <!-- Card version (for mobile) -->
        <div class="order-cards-container">
            <div id="orderCards" class="order-cards"></div>
        </div>

        <!-- Pagination -->
        <div class="pagination-container mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination" id="pagination" style="gap: 5px;"></ul>
            </nav>
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div id="orderDetailsModal" class="order-modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Order Summary</h5>
            <span class="close">×</span>
        </div>
        <div class="modal-body">
            <div class="row mx-0 py-4 border-bottom">
                <div class="col-md-6 px-4">
                    <h4 class="fw-bold mb-4">Shipping Details</h4>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control required-field" id="floatingOrderSummaryName" placeholder="Name" name="" pattern="[A-Za-z\s]+" title="Please enter only letters and spaces" disabled>
                        <label for="floatingOrderSummaryName">Name</label>
                        <div class="invalid-feedback">Please enter a valid name (letters only)</div>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control required-field" id="floatingOrderSummaryPhone" placeholder="Phone" name="" pattern="[0-9]{10}" title="Please enter exactly 10 digits" disabled>
                        <label for="floatingOrderSummaryPhone">Phone</label>
                        <div class="invalid-feedback">Please enter a valid phone number (10 digits)</div>
                    </div>
                    <div class="form-floating mb-3">
                        <textarea class="form-control required-field" id="floatingOrderSummaryAddress" placeholder="Address" name="" style="resize: none; height: 120px" disabled></textarea>
                        <label for="floatingOrderSummaryAddress">Address</label>
                        <div class="invalid-feedback">Please enter a valid address (no special characters)</div>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control required-field" id="floatingOrderDate" placeholder="Order Date" name="" disabled>
                        <label for="floatingOrderDate">Order Date</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control required-field" id="floatingPaymentDate" placeholder="Payment Date" name="" disabled>
                        <label for="floatingPaymentDate">Payment Date</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control required-field" id="floatingPaymentStatus" placeholder="Payment Status" name="" disabled>
                        <label for="floatingPaymentStatus">Payment Status</label>
                    </div>
                </div>
                <div class="col-md-6 px-4">
                    <h4 class="fw-bold mb-4">Order Summary</h4>
                    <div id="orderStatusLabel" class="w-100 mb-3 py-2 px-3 text-center text-white rounded" style="font-weight: 500;">
                        ORDER STATUS - <span id="orderStatusText">PROCESSING</span>
                    </div>
                    <ul class="list-group list-group-flush mb-4 rounded" id="orderItemsList"></ul>
                    <div class="d-flex justify-content-between align-items-center px-3 py-2 bg-dark text-white rounded">
                        <span class="fw-bold">Total:</span>
                        <span class="fw-bold" id="modalOrderTotal">0 ₫</span>
                    </div>
                    <div id="actionButtonsContainer" class="mt-3"></div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" id="closeModalBtn">Close</button>
        </div>
    </div>
</div>

<style>
    /* General Styling */
    .order-manage {
        padding: 30px 0;
        font-family: 'Poppins', sans-serif;
    }

    .order-title {
        font-size: 2rem;
        font-weight: 600;
        color: #80B500; /* Main green */
        margin-bottom: 0;
    }

    /* Search and Filter */
    .search-filter-container {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .search-container {
        position: relative;
        width: 250px;
    }

    .search-input {
        width: 100%;
        padding: 10px 20px 10px 40px;
        border: 1px solid #6c757d;
        border-radius: 25px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

        .search-input:focus {
            border-color: #6D7B30; /* Darker green */
            box-shadow: 0 0 5px rgba(109, 123, 48, 0.3);
            outline: none;
        }

    .search-button {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: #6c757d;
        cursor: pointer;
    }

    .filter-button {
        border-radius: 25px;
        padding: 10px 20px;
        font-size: 0.9rem;
        border-color: #6c757d;
        color: #2d3e40;
        transition: all 0.3s ease;
    }

        .filter-button:hover, .filter-button:focus {
            background-color: #f8f9fa;
            border-color: #6D7B30;
            color: #6D7B30;
        }

        .filter-button:active {
            background-color: #f8f9fa;
        }

    /* Order Table */
    .order-table-container {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        background-color: #FFFFFF;
        width: 100%;
    }

    .order-table {
        width: 100%;
        border-collapse: collapse;
    }

    .table-header {
        background-color: #80B500; /* Main green */
        color: #FFFFFF;
    }

        .table-header th {
            padding: 15px;
            text-align: left;
            font-weight: 500;
        }

    .order-row {
        background-color: #FFFFFF;
        transition: all 0.3s ease;
    }

        .order-row:hover {
            background-color: #E6E9E1; /* Light green-gray */
        }

        .order-row td {
            padding: 15px;
            border-bottom: 1px solid #E6E9E1;
        }

    .status-cell {
        text-align: center;
        font-weight: 500;
    }

    .total-cell {
        text-align: right;
        font-weight: 500;
    }

    .actions-cell {
        text-align: center;
    }

    .view-button {
        background: none;
        border: none;
        color: #6D7B30; /* Darker green */
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .view-button:hover {
            color: #6A9300; /* Hover green */
        }

    .sort-buttons {
        display: inline-flex;
        gap: 5px;
        margin-left: 5px;
    }

    .sort-button {
        background: transparent;
        border: none;
        color: #FFFFFF;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .sort-button:hover {
            color: #E6E9E1;
        }

        .sort-button:focus {
            outline: none;
        }

    /* Order Cards (Mobile) */
    .order-cards {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .order-card {
        background-color: #FFFFFF;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        .order-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
        }

    .order-card-header {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #E6E9E1;
    }

    .order-card-body {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .order-card-row {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
    }

    .order-card-label {
        font-weight: 500;
        color: #2d3e40;
    }

    .order-card-status {
        font-weight: 500;
    }

    .order-card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid #E6E9E1;
    }

    .order-card-total {
        font-weight: 600;
        font-size: 1rem;
        color: #2d3e40;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
    }

    .page-link {
        border-radius: 8px;
        background-color: #FFFFFF;
        border: 1px solid #E6E9E1;
        color: #2d3e40;
        margin: 0 3px;
        transition: all 0.3s ease;
    }

        .page-link:hover {
            background-color: #E6E9E1;
            border-color: #E6E9E1;
        }

    .page-item.active .page-link {
        background-color: #6D7B30; /* Darker green */
        border-color: #6D7B30;
        color: #FFFFFF;
    }

    .page-item.disabled .page-link {
        background-color: #F5F7F3;
        color: #6c757d;
    }

    /* Modal */
    .order-modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #FFFFFF;
        margin: 5% auto;
        padding: 0;
        border: none;
        width: 80%;
        max-width: 900px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        animation: slideIn 0.3s ease;
    }

    @@keyframes slideIn {
        from

    {
        transform: translateY(-50px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .modal-header {
        background-color: #F5F7F3; /* Light green-gray */
        padding: 15px 20px;
        border-bottom: 1px solid #E6E9E1;
    }

    .modal-title {
        font-weight: 600;
        color: #2d3e40;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 15px 20px;
        background-color: #F5F7F3;
        border-top: 1px solid #E6E9E1;
    }

    .close {
        color: #6c757d;
        float: right;
        font-size: 28px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .close:hover {
            color: #2d3e40;
        }

    .list-group-item {
        border: 1px solid #E6E9E1;
        border-left: none;
        border-right: none;
    }

        .list-group-item:first-child {
            border-top: none;
        }

        .list-group-item:last-child {
            border-bottom: none;
        }

    /* Responsive Styles */
    @@media (max-width: 991px) {
        .order-manage

    {
        padding: 20px 0;
    }

    .order-title {
        font-size: 1.75rem;
        text-align: center;
        margin-bottom: 1rem;
    }

    .search-filter-container {
        justify-content: center;
        margin-bottom: 1rem;
    }

    .order-table-scrollable {
        overflow-x: auto;
    }

    .order-table {
        min-width: 700px; /* Increased due to new column */
    }

    .modal-content {
        width: 95%;
        margin: 10% auto;
    }

    }

    @@media (max-width: 767px) {
        .order-title

    {
        font-size: 1.5rem;
    }

    .search-container {
        width: 200px;
    }

    .search-input {
        padding: 8px 15px 8px 35px;
        font-size: 0.85rem;
    }

    .filter-button {
        padding: 8px 15px;
        font-size: 0.85rem;
    }

    .order-table {
        min-width: 600px;
    }

    .modal-content {
        width: 98%;
        margin: 5% auto;
    }

    }

    @@media (max-width: 575px) {
        .order-table-container

    {
        display: none;
    }

    .order-cards-container {
        display: block;
    }

    .search-container {
        width: 100%;
    }

    .pagination-container {
        flex-wrap: wrap;
    }

    .page-link {
        padding: 6px 10px;
        font-size: 0.85rem;
    }

    }
</style>

@section Scripts {
    <script>
                // Format number with dots as thousand separators
        function formatNumber(num) {
            return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        }

        const orders = [
        @foreach (var bill in bills)
        {
            var billDetails = customerOrderModelView.BillDetails.Where(bd => bd.BillID == bill.BillID).ToList();
            var statusText = "";
            var statusColor = "";
            var paymentStatus = "";
            switch ((int)bill.Status)
            {
                case 0:
                    statusText = "Processing";
                    statusColor = "#FF9800"; // Orange
                    paymentStatus = "Paid";
                    break;
                case 1:
                    statusText = "Confirmed";
                    statusColor = "#80B500"; // Main green
                    paymentStatus = "Paid";
                    break;
                case 2:
                    statusText = "Cancelled";
                    statusColor = "#d32f2f"; // Red
                    paymentStatus = "Refunded";
                    break;
                case 3:
                    statusText = "Received";
                    statusColor = "#2196F3"; // Blue
                    paymentStatus = "Paid";
                    break;
                case 4:
                    statusText = "Reviewed";
                    statusColor = "#9C27B0"; // Purple
                    paymentStatus = "Paid";
                    break;
            }
            <text>
                                    {
                                        id: "@bill.BillID",
                                        name: "@(customer?.Name ?? "Customer")",
                                        phone: "@(customer?.Phone ?? "N/A")",
                                        email: "@(customer?.Email ?? "N/A")",
                                        address: "@Html.Raw(bill.Address ?? customer?.Address ?? "N/A")",
                                        status: "@statusText",
                                        statusColor: "@statusColor",
                                        total: formatNumber(@bill.TotalPrice),
                                        orderDate: "@bill.Date.ToString("dd-MM-yyyy")",
                                        paymentDate: "@bill.Date.ToString("dd-MM-yyyy")",
                                        paymentStatus: "@paymentStatus",
                                        items: [
                @foreach (var detail in billDetails)
                {
                    var product = products.FirstOrDefault(p => p.ProductID == detail.ProductID);
                    <text>
                                                                    {
                                                                        name: "@(product?.ProductName ?? "Unknown Product")",
                                                                        quantity: @(detail.Quantity ?? 0),
                                                                        price: formatNumber(@(detail.Price ?? 0))
                                                                    },
                    </text>
                }
                                        ]
                                    },
            </text>
        }
        ];

        // Debug: Log the orders array to check if it's populated
        console.log('Orders:', orders);

        const ordersPerPage = 5;
        let currentPage = 1;
        let currentFilteredOrders = [];
        let currentSelectedOrder = null;

        const modal = document.getElementById("orderDetailsModal");
        const closeBtn = document.getElementsByClassName("close")[0];
        const closeModalBtn = document.getElementById("closeModalBtn");
        const orderStatusLabel = document.getElementById('orderStatusLabel');
        const orderStatusText = document.getElementById('orderStatusText');
        const actionButtonsContainer = document.getElementById('actionButtonsContainer');
        const orderItemsList = document.getElementById('orderItemsList');
        const modalOrderTotal = document.getElementById('modalOrderTotal');

        function createOrderRow(order) {
            return `
                <tr class="order-row">
                    <td>${order.name}</td>
                    <td>${order.phone}</td>
                    <td>${order.email}</td>
                    <td style="text-align: center;">${order.orderDate}</td>
                    <td class="status-cell" style="color: ${order.statusColor}">${order.status}</td>
                    <td class="total-cell">${order.total}₫</td>
                    <td class="actions-cell">
                        <button onclick="openOrderDetails('${order.id}')" class="view-button" title="View details">
                            <i class="bi bi-eye-fill"></i>
                        </button>
                    </td>
                </tr>
            `;
        }

        function createOrderCard(order) {
            return `
                <div class="order-card">
                    <div class="order-card-header">
                        <span class="order-card-status" style="color: ${order.statusColor}">${order.status}</span>
                    </div>
                    <div class="order-card-body">
                        <div class="order-card-row">
                            <span class="order-card-label">Name:</span>
                            <span>${order.name}</span>
                        </div>
                        <div class="order-card-row">
                            <span class="order-card-label">Phone:</span>
                            <span>${order.phone}</span>
                        </div>
                        <div class="order-card-row">
                            <span class="order-card-label">Email:</span>
                            <span>${order.email}</span>
                        </div>
                        <div class="order-card-row">
                            <span class="order-card-label">Order Date:</span>
                            <span>${order.orderDate}</span>
                        </div>
                    </div>
                    <div class="order-card-footer">
                        <span class="order-card-total">${order.total}₫</span>
                        <button onclick="openOrderDetails('${order.id}')" class="view-button" title="View details">
                            <i class="bi bi-eye-fill"></i>
                        </button>
                    </div>
                </div>
            `;
        }

        function openOrderDetails(orderId) {
            currentSelectedOrder = orders.find(order => order.id === orderId);
            if (!currentSelectedOrder) {
                console.error('Order not found for ID:', orderId);
                return;
            }

            document.getElementById('floatingOrderSummaryName').value = currentSelectedOrder.name;
            document.getElementById('floatingOrderSummaryPhone').value = currentSelectedOrder.phone;
            document.getElementById('floatingOrderSummaryAddress').value = currentSelectedOrder.address;
            document.getElementById('floatingOrderDate').value = currentSelectedOrder.orderDate;
            document.getElementById('floatingPaymentDate').value = currentSelectedOrder.paymentDate;
            document.getElementById('floatingPaymentStatus').value = currentSelectedOrder.paymentStatus;

            orderStatusText.textContent = currentSelectedOrder.status.toUpperCase();
            orderStatusLabel.style.backgroundColor = currentSelectedOrder.statusColor;

            orderItemsList.innerHTML = '';
            currentSelectedOrder.items.forEach(item => {
                const itemElement = document.createElement('li');
                itemElement.className = 'list-group-item py-3';
                itemElement.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="fw-medium mb-1">${item.name}</p>
                            <p class="text-muted mb-0">Quantity: ${item.quantity}</p>
                        </div>
                        <p class="text-success fw-bold fs-5 mb-0">${item.price}₫</p>
                    </div>
                `;
                orderItemsList.appendChild(itemElement);
            });

            modalOrderTotal.textContent = `${currentSelectedOrder.total}₫`;
            updateActionButtons(currentSelectedOrder.status);
            modal.style.display = "block";
        }

        function updateActionButtons(status) {
            actionButtonsContainer.innerHTML = '';
            if (status === 'Processing') {
                actionButtonsContainer.innerHTML = `
                    <div id="actionButtons" class="d-grid gap-3">
                        <button id="cancelButton" class="btn py-2 w-100 btn-danger">
                            Cancel Order
                        </button>
                    </div>
                    <div id="cancellationForm" class="border rounded p-3 mt-3 d-none">
                        <div class="mb-3">
                            <label for="cancellationReason" class="form-label fw-bold">Please provide a reason for cancellation...</label>
                            <textarea id="cancellationReason" class="form-control" rows="3" style="resize: none;"></textarea>
                            <div id="cancellationError" class="text-danger mt-2 d-none">Please provide a reason for cancellation.</div>
                        </div>
                        <div class="d-grid gap-2 d-md-flex">
                            <button id="confirmCancellationBtn" class="btn py-2 flex-grow-1 btn-danger">Confirm Cancellation</button>
                            <button id="keepOrderBtn" class="btn py-2 flex-grow-1 btn-success">Keep Order</button>
                        </div>
                    </div>
                `;
            } else if (status === 'Confirmed') {
                actionButtonsContainer.innerHTML = `
                    <div id="actionButtons" class="d-grid gap-3">
                        <button id="receiveButton" class="btn py-2 w-100 btn-success">
                            Received
                        </button>
                    </div>
                `;
            } else if (status === 'Received') {
                if (!currentSelectedOrder || !currentSelectedOrder.id) {
                    console.error('Invalid or missing bill ID:', currentSelectedOrder);
                    actionButtonsContainer.innerHTML = `
                        <div id="actionButtons" class="d-grid gap-3">
                            <p class="text-success">Order has been received.</p>
                            <p class="text-danger">Unable to review order due to invalid bill ID.</p>
                        </div>
                    `;
                    return;
                }

                actionButtonsContainer.innerHTML = `
                    <div id="actionButtons" class="d-grid gap-3">
                        <p class="text-success">Order has been received.</p>
                        <form action="@Url.Action("Reviews", "Order")" method="post">
        @Html.AntiForgeryToken()
                            <input type="hidden" name="billId" value="${currentSelectedOrder.id}" />
                            <button type="submit" class="btn py-2 w-100 btn-primary">Review Order</button>
                        </form>
                    </div>
                `;
            } else if (status === 'Reviewed') {
                actionButtonsContainer.innerHTML = `
                    <div id="actionButtons" class="d-grid gap-3">
                        <p class="text-success">Order has been received and reviewed.</p>
                    </div>
                `;
            } else if (status === 'Cancelled') {
                actionButtonsContainer.innerHTML = `
                    <div id="actionButtons" class="d-grid gap-3">
                        <p class="text-danger">Order has been cancelled.</p>
                    </div>
                `;
            }

            // Add event listeners using event delegation
            actionButtonsContainer.addEventListener('click', function(event) {
                const target = event.target;

                if (target.id === 'cancelButton') {
                    document.getElementById('actionButtons').classList.add('d-none');
                    document.getElementById('cancellationForm').classList.remove('d-none');
                }

                if (target.id === 'keepOrderBtn') {
                    document.getElementById('cancellationError').classList.add('d-none');
                    document.getElementById('cancellationForm').classList.add('d-none');
                    document.getElementById('actionButtons').classList.remove('d-none');
                }

                        // Thay đổi phần xử lý nút Cancel
                if (target.id === 'confirmCancellationBtn') {
                    const reason = document.getElementById('cancellationReason').value.trim();
                    if (reason === '') {
                        document.getElementById('cancellationError').classList.remove('d-none');
                        return;
                    }

                    // Tạo form để submit
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("CancelOrder", "Order")';

                    // Thêm CSRF token
                    const csrfField = document.createElement('input');
                    csrfField.type = 'hidden';
                    csrfField.name = '__RequestVerificationToken';
                    csrfField.value = document.querySelector('form#csrfForm input[name="__RequestVerificationToken"]').value;
                    form.appendChild(csrfField);

                    // Thêm billId
                    const billIdField = document.createElement('input');
                    billIdField.type = 'hidden';
                    billIdField.name = 'billId';
                    billIdField.value = currentSelectedOrder.id;
                    form.appendChild(billIdField);

                    // Thêm reason
                    const reasonField = document.createElement('input');
                    reasonField.type = 'hidden';
                    reasonField.name = 'reason';
                    reasonField.value = reason;
                    form.appendChild(reasonField);

                    // Thêm form vào document và submit
                    document.body.appendChild(form);
                    form.submit();
                }

                // Thay đổi phần xử lý nút Received
                if (target.id === 'receiveButton') {
                    // Tạo form để submit
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("ReceiveOrder", "Order")';

                    // Thêm CSRF token
                    const csrfField = document.createElement('input');
                    csrfField.type = 'hidden';
                    csrfField.name = '__RequestVerificationToken';
                    csrfField.value = document.querySelector('form#csrfForm input[name="__RequestVerificationToken"]').value;
                    form.appendChild(csrfField);

                    // Thêm billId
                    const billIdField = document.createElement('input');
                    billIdField.type = 'hidden';
                    billIdField.name = 'billId';
                    billIdField.value = currentSelectedOrder.id;
                    form.appendChild(billIdField);

                    // Thêm form vào document và submit
                    document.body.appendChild(form);
                    form.submit();
                }
            }, { once: false }); // Use once: false to allow multiple clicks
        }

        function closeModal() {
            modal.style.display = "none";
        }

        closeBtn.onclick = closeModal;
        closeModalBtn.onclick = closeModal;
        window.onclick = function(event) {
            if (event.target == modal) {
                closeModal();
            }
        }

        function initOrders() {
            console.log('Initializing orders...');
            currentFilteredOrders = [...orders];
            renderOrders();
            checkScreenSize();
        }

        function renderOrders(filteredOrders = currentFilteredOrders) {
            console.log('Rendering orders:', filteredOrders);
            currentFilteredOrders = filteredOrders;
            const tbody = document.getElementById("orderTableBody");
            const cardsContainer = document.getElementById("orderCards");
            tbody.innerHTML = "";
            cardsContainer.innerHTML = "";

            const start = (currentPage - 1) * ordersPerPage;
            const end = start + ordersPerPage;
            const pageOrders = filteredOrders.slice(start, end);

            console.log('Page orders:', pageOrders);

            if (pageOrders.length === 0) {
                tbody.innerHTML = `<tr><td colspan="7" class="text-center py-4">No orders found</td></tr>`;
                cardsContainer.innerHTML = `<div class="text-center py-4">No orders found</div>`;
            } else {
                pageOrders.forEach(order => {
                    tbody.innerHTML += createOrderRow(order);
                    cardsContainer.innerHTML += createOrderCard(order);
                });
            }

            updatePagination(filteredOrders.length);
        }

        function updatePagination(totalOrders) {
            const pagination = document.getElementById("pagination");
            const totalPages = Math.ceil(totalOrders / ordersPerPage);

            console.log('Total orders:', totalOrders, 'Total pages:', totalPages);

            if (totalPages === 0) {
                pagination.innerHTML = `<li class="page-item disabled"><span class="page-link">No results found</span></li>`;
                return;
            }

            pagination.innerHTML = `
                <li class="page-item ${currentPage === 1 ? "disabled" : ""}">
                    <a class="page-link" href="#" aria-label="Previous" onclick="changePage(${currentPage - 1}); return false;">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
            `;

            let startPage = 1;
            let endPage = totalPages;
            const maxVisiblePages = window.innerWidth < 576 ? 3 : 5;

            if (totalPages > maxVisiblePages) {
                const halfVisible = Math.floor(maxVisiblePages / 2);
                startPage = Math.max(1, currentPage - halfVisible);
                endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                if (endPage === totalPages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }
            }

            if (startPage > 1) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="changePage(1); return false;">1</a>
                    </li>
                `;
                if (startPage > 2) {
                    pagination.innerHTML += `
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    `;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === currentPage ? "active" : ""}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    pagination.innerHTML += `
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    `;
                }
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="changePage(${totalPages}); return false;">${totalPages}</a>
                    </li>
                `;
            }

            pagination.innerHTML += `
                <li class="page-item ${currentPage === totalPages ? "disabled" : ""}">
                    <a class="page-link" href="#" aria-label="Next" onclick="changePage(${currentPage + 1}); return false;">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
            `;
        }

        window.changePage = function(page) {
            const totalPages = Math.ceil(currentFilteredOrders.length / ordersPerPage);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            renderOrders();
        };

        window.searchOrders = function() {
            const searchTerm = document.getElementById("searchInput").value.toLowerCase();
            const filteredOrders = orders.filter(order =>
                order.name.toLowerCase().includes(searchTerm) ||
                order.email.toLowerCase().includes(searchTerm) ||
                order.phone.toLowerCase().includes(searchTerm) ||
                order.status.toLowerCase().includes(searchTerm)
            );
            currentPage = 1;
            renderOrders(filteredOrders);
        };

        window.filterOrders = function(filter) {
            let filteredOrders = orders;
            if (filter === "Processing" || filter === "Confirmed" || filter === "Cancelled" || filter === "Received" || filter === "Reviewed") {
                filteredOrders = orders.filter(order => order.status === filter);
            }
            currentPage = 1;
            renderOrders(filteredOrders);
        };

        window.sortOrders = function(order) {
            currentFilteredOrders.sort((a, b) => {
                const [dayA, monthA, yearA] = a.orderDate.split('-').map(Number);
                const [dayB, monthB, yearB] = b.orderDate.split('-').map(Number);
                const dateA = new Date(yearA, monthA - 1, dayA);
                const dateB = new Date(yearB, monthB - 1, dayB);
                return order === 'Ascending' ? dateA - dateB : dateB - dateA;
            });
            currentPage = 1;
            renderOrders();
        };

        function checkScreenSize() {
            const orderTableContainer = document.querySelector('.order-table-container');
            const orderCardsContainer = document.querySelector('.order-cards-container');
            if (window.innerWidth <= 575) {
                orderTableContainer.style.display = 'none';
                orderCardsContainer.style.display = 'block';
            } else {
                orderTableContainer.style.display = 'block';
                orderCardsContainer.style.display = 'none';
            }
        }

        // Clean up previous event listeners to prevent duplicates
        function removeAllEventListeners(element) {
            if (!element) return;
            const clone = element.cloneNode(true);
            element.parentNode.replaceChild(clone, element);
            return clone;
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing orders...');

            // Clear any existing event listeners to avoid duplicates
            const searchInput = document.getElementById("searchInput");
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        searchOrders();
                    }
                });
            }

            initOrders();
            window.addEventListener('resize', checkScreenSize);
        });
    </script>
}