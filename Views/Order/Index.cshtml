@{
    ViewData["Title"] = "Order Manage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row my-5">
    <div class="col-1"></div>
    <div class="col-10">
        <div class="row d-flex align-items-center">
            <div class="col-3"></div>
            <div class="col-1"></div>
            <div class="col-4 text-center" style="color: #314401; font-weight: bold; font-size: 34px; letter-spacing: 1px;">
                Order List
            </div>
            <div class="col-1"></div>
            <div class="col-3">
                <div class="d-flex justify-content-end gap-2">
                    <div class="search-container" style="position: relative; width: 200px;">
                        <input type="text" id="searchInput" placeholder="Search..."
                               style="width: 100%; padding: 10px 20px 10px 45px; border: 1px solid #ccc; border-radius: 30px; outline: none; font-size: 14px;">
                        <button type="button" onclick="searchOrders()"
                                style="position: absolute; left: 15px; top: 50%; transform: translateY(-50%); background: transparent; border: none; color: #888; cursor: pointer;">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown"
                                data-bs-toggle="dropdown" aria-expanded="false" style="border-radius: 30px; padding: 10px 20px;">
                            <i class="bi bi-funnel"></i>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                            <li><h6 class="dropdown-header">Status</h6></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Processing')">Processing</a></li>
                            <li><a class="dropdown-item" href="#" onclick=" thường xuyên xuất hiện trong các giao dịch của bạn.</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Confirmed')">Confirmed</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Canceled')">Canceled</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><h6 class="dropdown-header">Total</h6></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Under $100')">Under $100</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('$100 - $200')">$100 - $200</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterOrders('Over $200')">Over $200</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-4" style="border-radius: 15px; overflow: hidden; border: 2px solid #C1A78E;">
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr style="background-color: #B08968; color: #F8E1C4;">
                        <th style="padding: 12px; text-align: left; border: 1px solid #C1A78E; width: 10%;">ID</th>
                        <th style="padding: 12px; text-align: left; border: 1px solid #C1A78E; width: 15%;">Name</th>
                        <th style="padding: 12px; text-align: left; border: 1px solid #C1A78E; width: 15%;">Phone Number</th>
                        <th style="padding: 12px; text-align: left; border: 1px solid #C1A78E; width: 20%;">Email</th>
                        <th style="padding: 12px; text-align: center; border: 1px solid #C1A78E; width: 15%;">Status</th>
                        <th style="padding: 12px; text-align: right; border: 1px solid #C1A78E; width: 15%;">Total</th>
                        <th style="padding: 12px; text-align: center; border: 1px solid #C1A78E; width: 10%;">Actions</th>
                    </tr>
                </thead>
                <tbody id="orderTableBody"></tbody>
            </table>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <nav aria-label="Page navigation">
                <ul class="pagination" id="pagination" style="gap: 5px;"></ul>
            </nav>
        </div>
    </div>
    <div class="col-1"></div>
</div>

@section Scripts {
    <script>
        const buyer = {
            name: "John Smith",
            phone: "1234567890",
            email: "john.smith@email.com"
        };
        const statuses = [
            { text: "Processing", color: "#FF8C00" },
            { text: "Confirmed", color: "#008000" },
            { text: "Canceled", color: "#DC3545" }
        ];
        let orders = [];
        const ordersPerPage = 5;
        let currentPage = 1;

        function generateOrderId(index) {
            return `ORD${(index + 1).toString().padStart(3, "0")}`;
        }

        function generateRandomTotal() {
            return (Math.random() * 200 + 50).toFixed(2);
        }

        function createOrder(index) {
            const status = statuses[index % statuses.length];
            return {
                id: generateOrderId(index),
                name: buyer.name,
                phone: buyer.phone,
                email: buyer.email,
                status: status.text,
                statusColor: status.color,
                total: generateRandomTotal()
            };
        }

        function createOrderRow(order) {
            return `
                <tr style="background-color: #EDE0D4; border: 1px solid #C1A78E;">
                    <td style="padding: 12px; border: 1px solid #C1A78E;">${order.id}</td>
                    <td style="padding: 12px; border: 1px solid #C1A78E;">${order.name}</td>
                    <td style="padding: 12px; border: 1px solid #C1A78E;">${order.phone}</td>
                    <td style="padding: 12px; border: 1px solid #C1A78E;">${order.email}</td>
                    <td style="padding: 12px; text-align: center; border: 1px solid #C1A78E; font-weight: bold; color: ${order.statusColor};">
                        ${order.status}
                    </td>
                    <td style="padding: 12px; text-align: right; border: 1px solid #C1A78E;">${order.total}$</td>
                    <td style="padding: 12px; border: 1px solid #C1A78E; text-align: center;">
                        <a href="/Order/Details"
                           style="background-color: #5A7D5A; color: white; border-radius: 10px; display: inline-block; width: 100px; padding: 6px 0; text-decoration: none; text-align: center; font-size: 14px;">
                            <i class="bi bi-eye-fill"></i> View
                        </a>
                    </td>
                </tr>
            `;
        }

        function initOrders() {
            orders = [];
            for (let i = 0; i < 10; i++) {
                orders.push(createOrder(i));
            }
            renderOrders();
        }

        function renderOrders(filteredOrders = orders) {
            const tbody = document.getElementById("orderTableBody");
            tbody.innerHTML = "";
            const start = (currentPage - 1) * ordersPerPage;
            const end = start + ordersPerPage;
            const pageOrders = filteredOrders.slice(start, end);
            pageOrders.forEach(order => {
                tbody.innerHTML += createOrderRow(order);
            });
            updatePagination(filteredOrders.length);
        }

        function updatePagination(totalOrders) {
            const pagination = document.getElementById("pagination");
            const totalPages = Math.ceil(totalOrders / ordersPerPage);
            pagination.innerHTML = `
                <li class="page-item ${currentPage === 1 ? "disabled" : ""}">
                    <a class="page-link" href="#" aria-label="Previous" onclick="changePage(${currentPage - 1})"
                       style="border-radius: 10px; background-color: #F5F0EA; border: 1px solid #D7C7B5; color: #6D4C41;">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
            `;
            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === currentPage ? "active" : ""}">
                        <a class="page-link" href="#" onclick="changePage(${i})"
                           style="border-radius: 10px; ${i === currentPage ? "background-color: #B08968; border: 1px solid #B08968; color: #F8E1C4;" : "background-color: #F5F0EA; border: 1px solid #D7C7B5; color: #6D4C41;"}">${i}</a>
                    </li>
                `;
            }
            pagination.innerHTML += `
                <li class="page-item ${currentPage === totalPages ? "disabled" : ""}">
                    <a class="page-link" href="#" aria-label="Next" onclick="changePage(${currentPage + 1})"
                       style="border-radius: 10px; background-color: #F5F0EA; border: 1px solid #D7C7B5; color: #6D4C41;">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
            `;
        }

        window.changePage = function(page) {
            const totalPages = Math.ceil(orders.length / ordersPerPage);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            renderOrders();
        };

        window.searchOrders = function() {
            const searchTerm = document.getElementById("searchInput").value.toLowerCase();
            const filteredOrders = orders.filter(order =>
                order.id.toLowerCase().includes(searchTerm) ||
                order.name.toLowerCase().includes(searchTerm) ||
                order.email.toLowerCase().includes(searchTerm) ||
                order.status.toLowerCase().includes(searchTerm)
            );
            currentPage = 1;
            renderOrders(filteredOrders);
        };

        window.filterOrders = function(filter) {
            let filteredOrders = orders;
            if (filter === "Processing" || filter === "Confirmed" || filter === "Canceled") {
                filteredOrders = orders.filter(order => order.status === filter);
            } else if (filter === "Under $100") {
                filteredOrders = orders.filter(order => parseFloat(order.total) < 100);
            } else if (filter === "$100 - $200") {
                filteredOrders = orders.filter(order => parseFloat(order.total) >= 100 && parseFloat(order.total) <= 200);
            } else if (filter === "Over $200") {
                filteredOrders = orders.filter(order => parseFloat(order.total) > 200);
            }
            currentPage = 1;
            renderOrders(filteredOrders);
        };

        initOrders();
    </script>
}